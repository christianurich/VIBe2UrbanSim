Cache directory for run 98 set to /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47
Running opus_core.store.utils.cache_flt_data.CacheFltData: started on Mon Jun 27 18:47:08 2011
    Caching files from '/home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/base_year_data' 
    to '/home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47'.
Running opus_core.store.utils.cache_flt_data.CacheFltData: completed.....5.2 sec
Logging to file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
Running simulation for years 2001 thru 2006
Simulation root seed: None
Running UrbanSim for year 2001 in new process: started on Mon Jun 27 18:47:13 2011
    Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
    Invoking: /usr/bin/python /home/christian/Documents/vibe2/src/3dparty/opus/src/urbansim/model_coordinators/model_system.py -r /tmp/tmpGlxEk1/resources.pickle --log-file-name run_multiprocess.log
Cache Directory set to: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47
Start simulation run: started on Mon Jun 27 18:47:13 2011
    random seed = (32307514,)
    Starting simulation for year 2001: started on Mon Jun 27 18:47:13 2011
        Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
        Logging to file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/year_2001_log.txt
        Simulate year 2001: started on Mon Jun 27 18:47:13 2011
            Creating object urbansim.datasets.travel_data_dataset.TravelDataDataset
            Creating object urbansim_parcel.datasets.building_dataset.BuildingDataset
            Creating object urbansim.datasets.job_building_type_dataset.JobBuildingTypeDataset
            Creating object urbansim_parcel.datasets.parcel_dataset.ParcelDataset
            Creating object urbansim.datasets.zone_dataset.ZoneDataset
            Creating object urbansim.datasets.household_dataset.HouseholdDataset
            Creating object urbansim_parcel.datasets.development_template_component_dataset.DevelopmentTemplateComponentDataset
            Creating object urbansim_parcel.datasets.development_template_dataset.DevelopmentTemplateDataset
            Creating object urbansim_parcel.datasets.person_dataset.PersonDataset
            Creating object urbansim.datasets.job_dataset.JobDataset
            Creating object urbansim.datasets.building_type_dataset.BuildingTypeDataset
            Running Real Estate Price Model (from urbansim.models.real_estate_price_model): started on Mon Jun 27 18:47:13 2011
                numpy.logical_or(urbansim_parcel.parcel.building_sqft, urbansim_parcel.parcel.is_land_use_type_vacant)
                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                        urbansim_parcel.building.building_sqft...........0.1 sec
                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.3 sec
                    urbansim_parcel.parcel.is_land_use_type_SSS
                        Creating object urbansim_parcel.datasets.land_use_type_dataset.LandUseTypeDataset
                    urbansim_parcel.parcel.is_land_use_type_SSS: completed...0.0 sec
                numpy.logical_or(urbansim_parcel.parcel.building_sqft, urbansim_parcel.parcel.is_land_use_type_vacant): completed...0.3 sec
                ln_unit_price=ln(urbansim_parcel.parcel.unit_price)
                    unit_price = safe_array_divide(parcel.land_value + urbansim_parcel.parcel.improvement_value, urbansim_parcel.parcel.existing_units)
                        urbansim_parcel.parcel.existing_units
                            unit_name = parcel.disaggregate(land_use_type.unit_name)....0.0 sec
                            residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                        urbansim_parcel.parcel.existing_units: completed...0.1 sec
                        improvement_value =parcel.aggregate(building.improvement_value)....0.1 sec
                    unit_price = safe_array_divide(parcel.land_value + urbansim_parcel.parcel.improvement_value, urbansim_parcel.parcel.existing_units): completed...0.2 sec
                ln_unit_price=ln(urbansim_parcel.parcel.unit_price): completed...0.3 sec
                Total number of individuals: 163801
                REPM chunk 1 out of 1.: started on Mon Jun 27 18:47:14 2011
                    Number of agents in this chunk: 163801
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300
                        psrc.parcel.SSS_in_gridcell
                            Creating object urbansim.datasets.gridcell_dataset.GridcellDataset
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300: completed...0.1 sec
                    art600 = psrc.parcel.distance_to_arterial_in_gridcell<600....0.0 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)
                        psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone....0.0 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone): completed...0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200: completed...0.1 sec
                    hwy2000 = psrc.parcel.distance_to_highway_in_gridcell<2000....0.0 sec
                    inugb = parcel.is_inside_urban_growth_boundary*1.....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built)
                            urbansim_parcel.building.has_valid_year_built....0.0 sec
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built): completed...0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940: completed...0.1 sec
                    ln_bldgage=(ln(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean))).astype(float32)
                        urbansim_parcel.building.age_masked..............0.0 sec
                    ln_bldgage=(ln(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean))).astype(float32): completed...0.1 sec
                    ln_invfar=(ln(parcel.parcel_sqft/(urbansim_parcel.parcel.building_sqft).astype(float32))).astype(float32)....0.0 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32)
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean)
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)
                                zone_id = building.disaggregate(parcel.zone_id)....0.1 sec
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id): completed...0.2 sec
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean): completed...0.3 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32): completed...0.3 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.5 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.5 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.5 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_walk....0.0 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32): completed...0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_transit_walk....0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32): completed...0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_walk....0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32): completed...0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_transit_walk....0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32): completed...0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            acres = zone.aggregate(parcel.parcel_sqft) / 43560.0 ....0.0 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32): completed...0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)
                        psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd
                            psrc.zone.generalized_cost_hbw_am_drive_alone_to_DDD
                                destination_id=129+0*zone.zone_id........0.0 sec
                            psrc.zone.generalized_cost_hbw_am_drive_alone_to_DDD: completed...0.0 sec
                        psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd: completed...0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32): completed...0.0 sec
                    lnlotsqft=(ln(parcel.parcel_sqft)).astype(float32)...0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.0 sec
                    lnsqft=(ln(urbansim_parcel.parcel.building_sqft)).astype(float32)....0.0 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32)....0.0 sec
                REPM chunk 1 out of 1.: completed........................2.0 sec
                Values less than 3.0 and larger than 7.0 were excluded from adding residuals.
            Running Real Estate Price Model (from urbansim.models.real_estate_price_model): completed...2.7 sec
            Flushing parcel
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/parcels doesn't exist and is created
            Flushing building
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/buildings doesn't exist and is created
            Flushing household
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/households doesn't exist and is created
            Flushing job
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/jobs doesn't exist and is created
            Flushing travel_data
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/travel_data doesn't exist and is created
            Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
            has_vacant_land=urbansim_parcel.parcel.vacant_land_area > 0
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                    used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
            has_vacant_land=urbansim_parcel.parcel.vacant_land_area > 0: completed...0.1 sec
            development_template.is_active > 0...........................0.0 sec
            WARNING: template_filter is set to development_template.is_active > 0, but there is an error when computing it: Incomplete variable specification for 'development_template.is_active' (missing package name, and variable is not in expression library not a lag variable).
            Creating proposals for new development: started on Mon Jun 27 18:47:18 2011
                Creating object urbansim.datasets.development_constraint_dataset.DevelopmentConstraintDataset
                urbansim_parcel.development_template.far.................0.0 sec
                urbansim_parcel.development_template.units_per_acre......0.0 sec
                Creating object urbansim_parcel.datasets.generic_land_use_type_dataset.GenericLandUseTypeDataset
                Matching 772 development constraints to 166618 parcels: started on Mon Jun 27 18:47:18 2011....4.6 sec
                generic_land_use_type_id=development_template.disaggregate(land_use_type.generic_land_use_type_id)....0.1 sec
                Combine parcels, templates and constraints: started on Mon Jun 27 18:47:23 2011....2.4 sec
                Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
                urbansim_parcel.development_project_proposal.is_size_fit
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)....1.2 sec
                    land_area_min=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_min)....0.2 sec
                    land_area_max=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_max)....0.1 sec
                urbansim_parcel.development_project_proposal.is_size_fit: completed...1.6 sec
                urbansim_parcel.development_project_proposal.units_proposed
                    urbansim_parcel.development_project_proposal.units_proposed_fraction
                        urbansim_parcel.development_project_proposal.land_area_taken
                            land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                            land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                        urbansim_parcel.development_project_proposal.land_area_taken: completed...0.0 sec
                        density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)
                            urbansim_parcel.development_template.density_converter....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter): completed...0.0 sec
                        usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                    urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.1 sec
                urbansim_parcel.development_project_proposal.units_proposed: completed...0.1 sec
                proposal set created with 82060 proposals.
            Creating proposals for new development: completed............9.9 sec
            Creating proposals for re-development: started on Mon Jun 27 18:47:28 2011
                low_improvement_ratio_of_parcels_with_bldg=(parcel.number_of_agents(building)>0)*(urbansim_parcel.parcel.improvement_value / ( urbansim_parcel.parcel.unit_price * urbansim_parcel.parcel.existing_units ) < 0.1)*(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean)>30)
                    urbansim_parcel.parcel.existing_units
                        unit_name = parcel.disaggregate(land_use_type.unit_name)....0.0 sec
                        building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                            urbansim_parcel.building.building_sqft.......0.0 sec
                        building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.1 sec
                        residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                    urbansim_parcel.parcel.existing_units: completed.....0.2 sec
                    improvement_value =parcel.aggregate(building.improvement_value)....0.1 sec
                    urbansim_parcel.building.age_masked
                        urbansim_parcel.building.has_valid_year_built....0.0 sec
                    urbansim_parcel.building.age_masked: completed.......0.0 sec
                low_improvement_ratio_of_parcels_with_bldg=(parcel.number_of_agents(building)>0)*(urbansim_parcel.parcel.improvement_value / ( urbansim_parcel.parcel.unit_price * urbansim_parcel.parcel.existing_units ) < 0.1)*(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean)>30): completed...0.5 sec
                Matching 772 development constraints to 2708 parcels: started on Mon Jun 27 18:47:28 2011....0.1 sec
                Combine parcels, templates and constraints: started on Mon Jun 27 18:47:29 2011....0.0 sec
                Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
                urbansim_parcel.development_project_proposal.is_size_fit
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                            used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                    land_area_min=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_min)....0.0 sec
                    land_area_max=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_max)....0.0 sec
                urbansim_parcel.development_project_proposal.is_size_fit: completed...0.1 sec
                urbansim_parcel.development_project_proposal.units_proposed
                    urbansim_parcel.development_project_proposal.units_proposed_fraction
                        urbansim_parcel.development_project_proposal.land_area_taken
                            land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                            land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                        urbansim_parcel.development_project_proposal.land_area_taken: completed...0.0 sec
                        density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                        usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                    urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.0 sec
                urbansim_parcel.development_project_proposal.units_proposed: completed...0.0 sec
                proposal set created with 11274 proposals.
            Creating proposals for re-development: completed.............1.0 sec
            Running Development Project Proposal Regression Model (from urbansim_parcel.models.development_project_proposal_regression_model): started on Mon Jun 27 18:47:29 2011
                Creating object urbansim_parcel.datasets.development_project_proposal_component_dataset.DevelopmentProjectProposalComponentDataset
                Total number of individuals: 93334
                PDPRM chunk 1 out of 1.: started on Mon Jun 27 18:47:29 2011
                    Number of agents in this chunk: 93334
                    land_use_type_id=development_project_proposal.disaggregate(development_template.land_use_type_id)....0.0 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300: completed...0.1 sec
                    art300 = development_project_proposal.disaggregate(parcel.art300)....0.0 sec
                    art600 = psrc.parcel.distance_to_arterial_in_gridcell<600....0.0 sec
                    art600 = development_project_proposal.disaggregate(parcel.art600)....0.0 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)....0.0 sec
                    hbwavgtmda = development_project_proposal.disaggregate(parcel.hbwavgtmda)....0.0 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200: completed...0.1 sec
                    hwy200 = development_project_proposal.disaggregate(parcel.hwy200)....0.0 sec
                    hwy2000 = psrc.parcel.distance_to_highway_in_gridcell<2000....0.0 sec
                    hwy2000 = development_project_proposal.disaggregate(parcel.hwy2000)....0.0 sec
                    inugb = parcel.is_inside_urban_growth_boundary*1.....0.0 sec
                    inugb = development_project_proposal.disaggregate(parcel.inugb)....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built)....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940: completed...0.1 sec
                    is_pre_1940 = development_project_proposal.disaggregate(parcel.is_pre_1940)....0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_age).astype(float32))
                        urbansim_parcel.development_project_proposal.building_age
                            urbansim_parcel.development_project_proposal.has_valid_year_built....0.0 sec
                        urbansim_parcel.development_project_proposal.building_age: completed...0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_age).astype(float32)): completed...0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_sqft).astype(float32))
                        building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32)
                            building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32)
                                building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                                        urbansim_parcel.development_project_proposal.units_proposed
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                                urbansim_parcel.development_project_proposal.land_area_taken
                                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                                                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                                                            used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                                                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                                                    land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                                    land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                                    parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                                                urbansim_parcel.development_project_proposal.land_area_taken: completed...0.2 sec
                                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.2 sec
                                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.2 sec
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.2 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)
                                        urbansim_parcel.development_template.is_far....0.0 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far): completed...0.0 sec
                                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.2 sec
                            building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32): completed...0.3 sec
                        building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32): completed...0.3 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_sqft).astype(float32)): completed...0.3 sec
                    ln_bounded(safe_array_divide(development_project_proposal.disaggregate(parcel.parcel_sqft), (urbansim_parcel.development_project_proposal.building_sqft).astype(float32)))....0.0 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32)....0.0 sec
                    lnavginc = development_project_proposal.disaggregate(parcel.lnavginc)....0.0 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp10da = development_project_proposal.disaggregate(parcel.lnemp10da)....0.0 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32)....0.0 sec
                    lnemp10wa = development_project_proposal.disaggregate(parcel.lnemp10wa)....0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp20da = development_project_proposal.disaggregate(parcel.lnemp20da)....0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32)....0.0 sec
                    lnemp20tw = development_project_proposal.disaggregate(parcel.lnemp20tw)....0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32)....0.0 sec
                    lnemp20wa = development_project_proposal.disaggregate(parcel.lnemp20wa)....0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp30da = development_project_proposal.disaggregate(parcel.lnemp30da)....0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32)....0.0 sec
                    lnemp30tw = development_project_proposal.disaggregate(parcel.lnemp30tw)....0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)....0.0 sec
                    lnempden = development_project_proposal.disaggregate(parcel.lnempden)....0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)....0.0 sec
                    lngcdacbd = development_project_proposal.disaggregate(parcel.lngcdacbd)....0.0 sec
                    lnlotsqft=(ln(parcel.parcel_sqft)).astype(float32)...0.0 sec
                    lnlotsqft = development_project_proposal.disaggregate(parcel.lnlotsqft)....0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)....0.0 sec
                    lnpopden = development_project_proposal.disaggregate(parcel.lnpopden)....0.0 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32)....0.0 sec
                    lnunits = development_project_proposal.disaggregate(parcel.lnunits)....0.0 sec
                PDPRM chunk 1 out of 1.: completed.......................1.8 sec
            Running Development Project Proposal Regression Model (from urbansim_parcel.models.development_project_proposal_regression_model): completed...2.2 sec
            Flushing parcel
            Flushing building
            Flushing development_project_proposal_component
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/development_project_proposal_components doesn't exist and is created
            Flushing development_project_proposal
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/development_project_proposals doesn't exist and is created
            exp_roi = exp(urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment)
                urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment
                    total_investment = (urbansim_parcel.development_project_proposal.acquisition_cost + urbansim_parcel.development_project_proposal.demolition_cost + urbansim_parcel.development_project_proposal.construction_cost).astype(float32)
                        urbansim_parcel.development_project_proposal.acquisition_cost
                            unit_price = development_project_proposal.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                            existing_units = development_project_proposal.disaggregate(urbansim_parcel.parcel.existing_units)
                                urbansim_parcel.parcel.existing_units
                                    unit_name = parcel.disaggregate(land_use_type.unit_name)....0.0 sec
                                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                                        urbansim_parcel.building.building_sqft....0.0 sec
                                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.1 sec
                                    residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                                urbansim_parcel.parcel.existing_units: completed...0.2 sec
                            existing_units = development_project_proposal.disaggregate(urbansim_parcel.parcel.existing_units): completed...0.3 sec
                            improvement_value=development_project_proposal.disaggregate(urbansim_parcel.parcel.improvement_value)
                                improvement_value =parcel.aggregate(building.improvement_value)....0.1 sec
                            improvement_value=development_project_proposal.disaggregate(urbansim_parcel.parcel.improvement_value): completed...0.1 sec
                            urbansim_parcel.development_project_proposal.land_area_taken
                                vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                                    vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                                        used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                                    vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                                vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                                land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                            urbansim_parcel.development_project_proposal.land_area_taken: completed...0.2 sec
                            land_area=development_project_proposal.disaggregate(parcel.parcel_sqft)....0.0 sec
                        urbansim_parcel.development_project_proposal.acquisition_cost: completed...0.7 sec
                        construction_cost = development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.construction_cost)
                            construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed
                                urbansim_parcel.development_project_proposal_component.units_proposed
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                                        urbansim_parcel.development_project_proposal.units_proposed
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.0 sec
                                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.0 sec
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.0 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)....0.0 sec
                                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                                    building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.1 sec
                                component_construction_cost_per_unit = (development_template_component.construction_cost_per_unit * development_template_component.building_sqft_per_unit).astype(float32)....0.0 sec
                            construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.1 sec
                        construction_cost = development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.construction_cost): completed...0.2 sec
                        demolition_cost = development_project_proposal.disaggregate(urbansim_parcel.parcel.demolition_cost) * development_project_proposal.is_redevelopment
                            demolition_cost = (parcel.aggregate(urbansim_parcel.building.demolition_cost)).astype(int32)
                                urbansim_parcel.building.demolition_cost
                                    demolition_cost_per_sqft=building.disaggregate(demolition_cost_per_sqft.demolition_cost_per_sqft)
                                        Creating object urbansim_parcel.datasets.demolition_cost_per_sqft_dataset.DemolitionCostPerSqftDataset
                                    demolition_cost_per_sqft=building.disaggregate(demolition_cost_per_sqft.demolition_cost_per_sqft): completed...0.0 sec
                                urbansim_parcel.building.demolition_cost: completed...0.0 sec
                            demolition_cost = (parcel.aggregate(urbansim_parcel.building.demolition_cost)).astype(int32): completed...0.1 sec
                        demolition_cost = development_project_proposal.disaggregate(urbansim_parcel.parcel.demolition_cost) * development_project_proposal.is_redevelopment: completed...0.1 sec
                    total_investment = (urbansim_parcel.development_project_proposal.acquisition_cost + urbansim_parcel.development_project_proposal.demolition_cost + urbansim_parcel.development_project_proposal.construction_cost).astype(float32): completed...1.0 sec
                    profit = urbansim_parcel.development_project_proposal.total_revenue - urbansim_parcel.development_project_proposal.total_investment
                        total_revenue = (urbansim_parcel.development_project_proposal.building_sqft * development_project_proposal.unit_price_expected).astype(float32)
                            building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32)
                                building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32)....0.0 sec
                            building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32): completed...0.0 sec
                        total_revenue = (urbansim_parcel.development_project_proposal.building_sqft * development_project_proposal.unit_price_expected).astype(float32): completed...0.0 sec
                    profit = urbansim_parcel.development_project_proposal.total_revenue - urbansim_parcel.development_project_proposal.total_investment: completed...0.0 sec
                urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment: completed...1.1 sec
            exp_roi = exp(urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment): completed...1.1 sec
            Running urbansim_parcel.models.development_project_proposal_sampling_model.DevelopmentProjectProposalSamplingModel: started on Mon Jun 27 18:47:32 2011
                number_of_components = (development_project_proposal.number_of_agents(development_project_proposal_component)).astype(int32)....0.0 sec
                zone_id = development_project_proposal.disaggregate(parcel.zone_id)....0.1 sec
                occupied_units_for_jobs = urbansim_parcel.building.number_of_non_home_based_jobs
                    urbansim_parcel.building.number_of_SSS_jobs
                        urbansim.job.is_building_type_SSS................0.0 sec
                    urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                occupied_units_for_jobs = urbansim_parcel.building.number_of_non_home_based_jobs: completed...0.2 sec
                units_for_jobs = urbansim_parcel.building.total_non_home_based_job_space
                    urbansim_parcel.building.total_non_home_based_job_space
                        urbansim_parcel.building.building_sqft_per_job
                            Creating object urbansim_parcel.datasets.building_sqft_per_job_dataset.BuildingSqftPerJobDataset
                            zone_id = building.disaggregate(parcel.zone_id)....0.1 sec
                        urbansim_parcel.building.building_sqft_per_job: completed...0.1 sec
                    urbansim_parcel.building.total_non_home_based_job_space: completed...0.2 sec
                units_for_jobs = urbansim_parcel.building.total_non_home_based_job_space: completed...0.2 sec
                occupied_residential_units = urbansim_parcel.building.number_of_households
                    number_of_households = building.number_of_agents(household)....0.1 sec
                occupied_residential_units = urbansim_parcel.building.number_of_households: completed...0.1 sec
                is_residential = (building.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                Creating object urbansim_parcel.datasets.target_vacancy_dataset.TargetVacancyDataset
                is_residential = target_vacancy.disaggregate(building_type.is_residential)....0.0 sec
                Sampling from 498 eligible proposals with status 4.
                WARNING: Running out of proposals; there aren't any proposals with non-zero weight
                Status of 106 development proposals set to active.
                Target/existing vacancy rates (reached using eligible proposals) by building type:
                3[commercial]: 0.736705182172 = ((existing_units:387465 + 
                                              units_proposed:0 - units_to_be_demolished:2) 
                                              - units_occupied:102017) / units_stock:387463
                4[condo_residential]: 0.155339146958 = ((existing_units:29471 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:24893) / units_stock:29471
                8[industrial]: 0.922368238763 = ((existing_units:303216 + 
                                              units_proposed:0 - units_to_be_demolished:54) 
                                              - units_occupied:23535) / units_stock:303162
                12[multi_family_residential]: 0.106052273321 = ((existing_units:110925 + 
                                              units_proposed:0 - units_to_be_demolished:8) 
                                              - units_occupied:99154) / units_stock:110917
                13[office]: 0.575770919541 = ((existing_units:474653 + 
                                              units_proposed:0 - units_to_be_demolished:25) 
                                              - units_occupied:201351) / units_stock:474628
                19[single_family_residential]: 0.0317494077698 = ((existing_units:134259 + 
                                              units_proposed:2192 - units_to_be_demolished:102) 
                                              - units_occupied:132020) / units_stock:136349
                20[tcu]: 0.789473684211 = ((existing_units:3059 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:644) / units_stock:3059
                21[warehousing]: 0.870979216896 = ((existing_units:430160 + 
                                              units_proposed:0 - units_to_be_demolished:51) 
                                              - units_occupied:55493) / units_stock:430109
            Running urbansim_parcel.models.development_project_proposal_sampling_model.DevelopmentProjectProposalSamplingModel: completed...0.9 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing development_project_proposal_component
            Flushing development_project_proposal
            Running BuildingConstructionModel (from urbansim_parcel.models.building_construction_model): started on Mon Jun 27 18:47:33 2011
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: started on Mon Jun 27 18:47:33 2011
                    86 values of household.building_id are set to -1.
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: completed...0.1 sec
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: started on Mon Jun 27 18:47:33 2011
                    106 values of job.building_id are set to -1.
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: completed...0.1 sec
                21 buildings demolished.
                Creating object urbansim_parcel.datasets.velocity_function_dataset.VelocityFunctionDataset
                Creating object urbansim_parcel.datasets.development_project_proposal_component_dataset.DevelopmentProjectProposalComponentDataset
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                    used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                    urbansim_parcel.building.building_sqft...............0.0 sec
                building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.1 sec
                urbansim_parcel.parcel.is_land_use_type_SSS..............0.0 sec
                development_project_proposal_component.disaggregate(development_template.land_use_type_id, [development_project_proposal])
                    development_project_proposal.disaggregate(development_template.land_use_type_id)....0.0 sec
                development_project_proposal_component.disaggregate(development_template.land_use_type_id, [development_project_proposal]): completed...0.0 sec
                urbansim_parcel.development_project_proposal_component.units_proposed
                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                        urbansim_parcel.development_project_proposal.units_proposed
                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                urbansim_parcel.development_project_proposal.land_area_taken
                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)....0.0 sec
                                    land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                    land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                    parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                                urbansim_parcel.development_project_proposal.land_area_taken: completed...0.1 sec
                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.1 sec
                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.1 sec
                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.1 sec
                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)....0.0 sec
                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                    building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.1 sec
                land_area_taken = urbansim_parcel.development_project_proposal_component.percent_building_sqft * (development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.land_area_taken) / 100.)....0.0 sec
                construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed....0.0 sec
                106 new buildings built.
                building type 19: 106
                Number of new buildings by template ids:
                {27: 1, 33: 4, 23: 1, 15: 100}
            Running BuildingConstructionModel (from urbansim_parcel.models.building_construction_model): completed...0.9 sec
            Flushing parcel
            Flushing building
            Flushing development_project_proposal
            Creating object urbansim.datasets.household_characteristic_dataset.HouseholdCharacteristicDataset
            Running Household Transition Model with Persons Update (from urbansim_parcel.models.household_transition_model): started on Mon Jun 27 18:47:35 2011
                Difference in number of households: 4742 (original 258469, new 263211, created 37763, deleted 33021)
                Number of unplaced households: 37836
                Created 20520 persons.
                WARNING: Number of persons in household set (655462) does not correspond to those in person set (532503).
            Running Household Transition Model with Persons Update (from urbansim_parcel.models.household_transition_model): completed...40.4 sec
            Flushing household
            Running Employment Transition Model (from urbansim.models.employment_transition_model): started on Mon Jun 27 18:48:16 2011
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                    urbansim.job.is_home_based_job.......................0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based
                    urbansim.job.is_non_home_based_job...................0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                Difference in number of jobs: -5943 (original 565228, new 559285, created 83390, deleted 89333)
                Number of unplaced jobs: 83480
            Running Employment Transition Model (from urbansim.models.employment_transition_model): completed...1.7 sec
            Flushing job
            Creating object urbansim.datasets.household_relocation_rate_dataset.HouseholdRelocationRateDataset
            Running Household Relocation Model (from urbansim.models.agent_relocation_model): started on Mon Jun 27 18:48:18 2011
                compute_probabilities ...
                WARNING: There are 117 households whose probability is un-specified by the rate dataset. Their probability is set to 0.
                compute_choices ...
                Number of movers: 98300
            Running Household Relocation Model (from urbansim.models.agent_relocation_model): completed...0.7 sec
            Flushing household
            zone_id = building.disaggregate(parcel.zone_id)..............0.1 sec
            Running Household Location Choice Model (from psrc_parcel.models.household_location_choice_model): started on Mon Jun 27 18:48:19 2011
                Total number of individuals: 98300
                HLCM chunk 1 out of 2.: started on Mon Jun 27 18:48:19 2011
                    Number of agents in this chunk: 49150
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 85102 units.
                    numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(numpy.logical_and(building.residential_units, building.sqft_per_unit), urbansim_parcel.building.unit_price > 0))
                        unit_price = building.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                        is_residential = (building.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                    numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(numpy.logical_and(building.residential_units, building.sqft_per_unit), urbansim_parcel.building.unit_price > 0)): completed...0.1 sec
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.1 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential
                        is_condo_residential=building.disaggregate(building_type.building_type_name=='condo_residential')
                            building_type.building_type_name=='condo_residential'....0.0 sec
                        is_condo_residential=building.disaggregate(building_type.building_type_name=='condo_residential'): completed...0.0 sec
                        urbansim.household.is_low_income.................0.0 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential: completed...0.1 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential
                        is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential')
                            building_type.building_type_name=='multi_family_residential'....0.0 sec
                        is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential'): completed...0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential: completed...0.1 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)
                        is_single_family_residential=building.disaggregate(building_type.building_type_name == 'single_family_residential')
                            building_type.building_type_name=='single_family_residential'....0.0 sec
                        is_single_family_residential=building.disaggregate(building_type.building_type_name == 'single_family_residential'): completed...0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential): completed...0.1 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)
                        urbansim_parcel.building.building_sqft...........0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft): completed...0.2 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.3 sec
                    ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit)
                        parcel_sqft_per_unit=safe_array_divide(building.disaggregate(parcel.parcel_sqft),building.residential_units)....0.1 sec
                    ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit): completed...0.1 sec
                    lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.4 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.4 sec
                    lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32): completed...0.4 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.1 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.1 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)
                            urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.0 sec
                        ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone): completed...0.0 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 672 (in 6 iterations)
                HLCM chunk 1 out of 2.: completed.......................20.1 sec
                HLCM chunk 2 out of 2.: started on Mon Jun 27 18:48:39 2011
                    Number of agents in this chunk: 49150
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 66839 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.1 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.2 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.3 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.1 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 4439 (in 6 iterations)
                HLCM chunk 2 out of 2.: completed.......................17.0 sec
                number_of_households = building.number_of_agents(household)....0.1 sec
                Total number of individuals: 5111
                HLCM chunk 1 out of 1.: started on Mon Jun 27 18:48:56 2011
                    Number of agents in this chunk: 5111
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 22128 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.0 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.0 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.0 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.0 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 0 (in 5 iterations)
                HLCM chunk 1 out of 1.: completed........................1.3 sec
                number_of_households = building.number_of_agents(household)....0.1 sec
            Running Household Location Choice Model (from psrc_parcel.models.household_location_choice_model): completed...38.8 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing travel_data
            Creating object urbansim.datasets.job_relocation_rate_dataset.JobRelocationRateDataset
            Running Employment Relocation Model (from urbansim.models.agent_relocation_model): started on Mon Jun 27 18:48:58 2011
                compute_probabilities ...
                compute_choices ...
                Number of movers: 111241
            Running Employment Relocation Model (from urbansim.models.agent_relocation_model): completed...0.8 sec
            Flushing job
            'agents_grouping_attribute' set to job.building_type.
            zone_id = building.disaggregate(parcel.zone_id)..............0.1 sec
            Running Non_home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): started on Mon Jun 27 18:48:59 2011
                Total number of individuals: 107453
                Non_home_based ELCM chunk 1 out of 3.: started on Mon Jun 27 18:48:59 2011
                    Number of agents in this chunk: 35818
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.3 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.7 sec
                            urbansim_parcel.building.building_sqft.......0.0 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...0.8 sec
                        urbansim_parcel.building.building_sqft_per_job...0.0 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...0.9 sec
                    Available capacity: 1548591 units.
                    building.non_residential_sqft>0......................0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.2 sec
                    far=(urbansim_parcel.building.building_sqft/urbansim_parcel.building.parcel_sqft).astype(float32)
                        parcel_sqft = building.disaggregate(parcel.parcel_sqft)....0.1 sec
                    far=(urbansim_parcel.building.building_sqft/urbansim_parcel.building.parcel_sqft).astype(float32): completed...0.1 sec
                    inugb = building.disaggregate(parcel.is_inside_urban_growth_boundary)*1....0.1 sec
                    is_commercial_building = urbansim.building.is_commercial
                        is_commercial=building.disaggregate(building_type.building_type_name =='commercial')
                            building_type.building_type_name=='commercial'....0.0 sec
                        is_commercial=building.disaggregate(building_type.building_type_name =='commercial'): completed...0.0 sec
                    is_commercial_building = urbansim.building.is_commercial: completed...0.0 sec
                    is_industrial_building = urbansim.building.is_industrial
                        is_industrial=building.disaggregate(building_type.building_type_name =='industrial')
                            building_type.building_type_name=='industrial'....0.0 sec
                        is_industrial=building.disaggregate(building_type.building_type_name =='industrial'): completed...0.0 sec
                    is_industrial_building = urbansim.building.is_industrial: completed...0.0 sec
                    is_near_art = building.disaggregate(psrc.parcel.is_near_arterial_in_gridcell)
                        psrc.parcel.SSS_in_gridcell
                            urbansim.gridcell.is_near_arterial...........0.0 sec
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    is_near_art = building.disaggregate(psrc.parcel.is_near_arterial_in_gridcell): completed...0.2 sec
                    is_near_highway = building.disaggregate(psrc.parcel.is_near_highway_in_gridcell)
                        psrc.parcel.SSS_in_gridcell
                            urbansim.gridcell.is_near_highway............0.0 sec
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    is_near_highway = building.disaggregate(psrc.parcel.is_near_highway_in_gridcell): completed...0.1 sec
                    is_office_building = urbansim.building.is_office
                        is_office=building.disaggregate(building_type.building_type_name =='office')
                            building_type.building_type_name=='office'...0.0 sec
                        is_office=building.disaggregate(building_type.building_type_name =='office'): completed...0.0 sec
                    is_office_building = urbansim.building.is_office: completed...0.0 sec
                    ln_bldgage=ln(urbansim_parcel.building.age_masked)
                        urbansim_parcel.building.age_masked
                            urbansim_parcel.building.has_valid_year_built....0.0 sec
                        urbansim_parcel.building.age_masked: completed...0.0 sec
                    ln_bldgage=ln(urbansim_parcel.building.age_masked): completed...0.0 sec
                    ln_unit_price_trunc = ln(where(building.disaggregate(urbansim_parcel.parcel.unit_price<1500),where(building.disaggregate(urbansim_parcel.parcel.unit_price<1),1,building.disaggregate(urbansim_parcel.parcel.unit_price)),1500))
                        urbansim_parcel.parcel.unit_price<1500...........0.0 sec
                        urbansim_parcel.parcel.unit_price<1..............0.0 sec
                    ln_unit_price_trunc = ln(where(building.disaggregate(urbansim_parcel.parcel.unit_price<1500),where(building.disaggregate(urbansim_parcel.parcel.unit_price<1),1,building.disaggregate(urbansim_parcel.parcel.unit_price)),1500)): completed...0.3 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD
                            urbansim_parcel.job.is_sector_DDD............0.0 sec
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD: completed...0.0 sec
                        zone.aggregate(parcel.parcel_sqft)/43560.0.......0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income))
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean)
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean): completed...0.2 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income)): completed...0.2 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    lngcdacbd=ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))....0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))
                        urbansim_parcel.zone.population_per_acre
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre)): completed...0.0 sec
                    lnsqft=ln(urbansim_parcel.building.building_sqft)....0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                Non_home_based ELCM chunk 1 out of 3.: completed........10.0 sec
                Non_home_based ELCM chunk 2 out of 3.: started on Mon Jun 27 18:49:09 2011
                    Number of agents in this chunk: 35818
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.3 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.7 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...0.8 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...0.8 sec
                    Available capacity: 1522517 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.2 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 2 out of 3.: completed.........9.3 sec
                Non_home_based ELCM chunk 3 out of 3.: started on Mon Jun 27 18:49:18 2011
                    Number of agents in this chunk: 35817
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.3 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.7 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...0.8 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...0.8 sec
                    Available capacity: 1496390 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.2 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 3 out of 3.: completed.........9.2 sec
                urbansim_parcel.building.number_of_SSS_jobs
                    urbansim.job.is_building_type_SSS....................0.0 sec
                urbansim_parcel.building.number_of_SSS_jobs: completed...0.1 sec
                urbansim_parcel.building.total_non_home_based_job_space..0.0 sec
                Total number of individuals: 16403
                Non_home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:49:28 2011
                    Number of agents in this chunk: 16403
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.4 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.7 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...0.9 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...0.9 sec
                    Available capacity: 1466091 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.1 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 1.: completed.........4.3 sec
                urbansim_parcel.building.number_of_SSS_jobs..............0.1 sec
            Running Non_home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): completed...33.3 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing travel_data
            'agents_grouping_attribute' set to job.building_type.
            zone_id = building.disaggregate(parcel.zone_id)..............0.1 sec
            Running Home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): started on Mon Jun 27 18:49:33 2011
                Total number of individuals: 3788
                Home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:49:33 2011
                    Number of agents in this chunk: 3788
                    urbansim_parcel.building.vacant_home_based_job_space
                        urbansim_parcel.building.total_home_based_job_space
                            sum_minimum_persons_and_2=building.aggregate(urbansim_parcel.household.minimum_persons_and_2)
                                urbansim_parcel.household.minimum_persons_and_2....0.0 sec
                            sum_minimum_persons_and_2=building.aggregate(urbansim_parcel.household.minimum_persons_and_2): completed...0.2 sec
                            is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential')....0.0 sec
                        urbansim_parcel.building.total_home_based_job_space: completed...0.2 sec
                        urbansim_parcel.building.number_of_SSS_jobs
                            urbansim.job.is_building_type_SSS............0.0 sec
                        urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                        WARNING: Negative values detected in function/method ''
                        WARNING: Minimum: -265.0. Negative values clipped to zero.
                    urbansim_parcel.building.vacant_home_based_job_space: completed...0.3 sec
                    Available capacity: 394666.0 units.
                    numpy.logical_and(building.residential_units, building.sqft_per_unit)....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    bias_hb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_home_based_job_space = urbansim_parcel.building.vacant_home_based_job_space/float(sum(urbansim_parcel.building.vacant_home_based_job_space))....0.1 sec
                            _log_weights_vacant_home_based_job_space = ln(building._normalized_weights_vacant_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_home_based_job_space = ln(1 - building._normalized_weights_vacant_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_hb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_home_based_job_space: completed...0.1 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income))....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.4 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.4 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.4 sec
                    lngcdacbd=ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))....0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))....0.0 sec
                    lnsqftunit=ln(urbansim_parcel.building.building_sqft_per_unit)
                        building_sqft_per_unit=safe_array_divide(urbansim_parcel.building.building_sqft,building.residential_units)
                            urbansim_parcel.building.building_sqft.......0.0 sec
                        building_sqft_per_unit=safe_array_divide(urbansim_parcel.building.building_sqft,building.residential_units): completed...0.0 sec
                    lnsqftunit=ln(urbansim_parcel.building.building_sqft_per_unit): completed...0.0 sec
                    unit_price = building.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 0 (in 2 iterations)
                Home_based ELCM chunk 1 out of 1.: completed.............1.5 sec
            Running Home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): completed...1.5 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Running Distribute Unplaced Jobs Model (from urbansim_parcel.models.distribute_unplaced_jobs_model): started on Mon Jun 27 18:49:34 2011
                urbansim.job.is_in_employment_sector_group_SSS...........3.6 sec
                Number of scalable jobs: 16360
                urbansim_parcel.building.number_of_jobs_of_sector_DDD
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim_parcel.building.number_of_jobs_of_sector_DDD: completed...0.2 sec
                is_governmental = building.disaggregate(building_type.generic_building_type_description == 'government')
                    building_type.generic_building_type_description=='government'....0.0 sec
                is_governmental = building.disaggregate(building_type.generic_building_type_description == 'government'): completed...0.0 sec
            Running Distribute Unplaced Jobs Model (from urbansim_parcel.models.distribute_unplaced_jobs_model): completed...3.9 sec
            Flushing building
            Flushing job
            Writing datasets to cache for year 2001: started on Mon Jun 27 18:49:38 2011
                Flushing travel_data
                Flushing development_project_proposal
                Flushing household
                Flushing development_template
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/development_templates doesn't exist and is created
                Flushing job_building_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/job_building_types doesn't exist and is created
                Flushing zone
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/zones doesn't exist and is created
                Flushing demolition_cost_per_sqft
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/demolition_cost_per_sqft doesn't exist and is created
                Flushing employment_sector_group
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/employment_adhoc_sector_groups doesn't exist and is created
                Flushing generic_land_use_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/generic_land_use_types doesn't exist and is created
                Flushing land_use_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/land_use_types doesn't exist and is created
                Flushing employment_sector
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/employment_sectors doesn't exist and is created
                Flushing dataset
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/employment_adhoc_sector_group_definitions doesn't exist and is created
                Flushing parcel
                Flushing gridcell
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/gridcells doesn't exist and is created
                Flushing target_vacancy
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/target_vacancies doesn't exist and is created
                Flushing urbansim_constant
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/urbansim_constants doesn't exist and is created
                Flushing job
                Flushing building
                Flushing development_constraint
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/development_constraints doesn't exist and is created
                Flushing development_template_component
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/development_template_components doesn't exist and is created
                Flushing person
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/persons doesn't exist and is created
                Flushing building_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/building_types doesn't exist and is created
                Flushing building_sqft_per_job
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2001/building_sqft_per_job doesn't exist and is created
            Writing datasets to cache for year 2001: completed...........2.7 sec
        Simulate year 2001: completed............................2 min, 28.1 sec
        Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/year_2001_log.txt
    Starting simulation for year 2001: completed.................2 min, 28.1 sec
Start simulation run: completed..................................2 min, 28.1 sec
Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
Running UrbanSim for year 2001 in new process: completed.........2 min, 28.5 sec
Running UrbanSim for year 2002 in new process: started on Mon Jun 27 18:49:41 2011
    Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
    Invoking: /usr/bin/python /home/christian/Documents/vibe2/src/3dparty/opus/src/urbansim/model_coordinators/model_system.py -r /tmp/tmpklLWUz/resources.pickle --log-file-name run_multiprocess.log
Cache Directory set to: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47
Start simulation run: started on Mon Jun 27 18:49:42 2011
    random seed = (185827658,)
    Starting simulation for year 2002: started on Mon Jun 27 18:49:42 2011
        Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
        Logging to file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/year_2002_log.txt
        Simulate year 2002: started on Mon Jun 27 18:49:42 2011
            Creating object urbansim.datasets.travel_data_dataset.TravelDataDataset
            Creating object urbansim_parcel.datasets.building_dataset.BuildingDataset
            Creating object urbansim.datasets.job_building_type_dataset.JobBuildingTypeDataset
            Creating object urbansim_parcel.datasets.parcel_dataset.ParcelDataset
            Creating object urbansim.datasets.zone_dataset.ZoneDataset
            Creating object urbansim.datasets.household_dataset.HouseholdDataset
            Creating object urbansim_parcel.datasets.development_template_component_dataset.DevelopmentTemplateComponentDataset
            Creating object urbansim_parcel.datasets.development_template_dataset.DevelopmentTemplateDataset
            Creating object urbansim_parcel.datasets.person_dataset.PersonDataset
            Creating object urbansim.datasets.job_dataset.JobDataset
            Creating object urbansim.datasets.building_type_dataset.BuildingTypeDataset
            Running Real Estate Price Model (from urbansim.models.real_estate_price_model): started on Mon Jun 27 18:49:42 2011
                numpy.logical_or(urbansim_parcel.parcel.building_sqft, urbansim_parcel.parcel.is_land_use_type_vacant)
                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                        urbansim_parcel.building.building_sqft...........0.1 sec
                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.3 sec
                    urbansim_parcel.parcel.is_land_use_type_SSS
                        Creating object urbansim_parcel.datasets.land_use_type_dataset.LandUseTypeDataset
                    urbansim_parcel.parcel.is_land_use_type_SSS: completed...0.0 sec
                numpy.logical_or(urbansim_parcel.parcel.building_sqft, urbansim_parcel.parcel.is_land_use_type_vacant): completed...0.4 sec
                ln_unit_price=ln(urbansim_parcel.parcel.unit_price)......0.0 sec
                Total number of individuals: 163810
                REPM chunk 1 out of 1.: started on Mon Jun 27 18:49:43 2011
                    Number of agents in this chunk: 163810
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300
                        psrc.parcel.SSS_in_gridcell
                            Creating object urbansim.datasets.gridcell_dataset.GridcellDataset
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300: completed...0.1 sec
                    art600 = psrc.parcel.distance_to_arterial_in_gridcell<600....0.0 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)
                        psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone....0.1 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone): completed...0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200: completed...0.1 sec
                    hwy2000 = psrc.parcel.distance_to_highway_in_gridcell<2000....0.0 sec
                    inugb = parcel.is_inside_urban_growth_boundary*1.....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built)
                            urbansim_parcel.building.has_valid_year_built....0.0 sec
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built): completed...0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940: completed...0.1 sec
                    ln_bldgage=(ln(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean))).astype(float32)
                        urbansim_parcel.building.age_masked..............0.0 sec
                    ln_bldgage=(ln(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean))).astype(float32): completed...0.1 sec
                    ln_invfar=(ln(parcel.parcel_sqft/(urbansim_parcel.parcel.building_sqft).astype(float32))).astype(float32)....0.0 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32)
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean)
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)
                                zone_id = building.disaggregate(parcel.zone_id)....0.1 sec
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id): completed...0.2 sec
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean): completed...0.3 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32): completed...0.4 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.5 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.5 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.6 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_walk....0.0 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32): completed...0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_transit_walk....0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32): completed...0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_walk....0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32): completed...0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_transit_walk....0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32): completed...0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            acres = zone.aggregate(parcel.parcel_sqft) / 43560.0 ....0.0 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32): completed...0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)
                        psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd
                            psrc.zone.generalized_cost_hbw_am_drive_alone_to_DDD
                                destination_id=129+0*zone.zone_id........0.0 sec
                            psrc.zone.generalized_cost_hbw_am_drive_alone_to_DDD: completed...0.0 sec
                        psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd: completed...0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32): completed...0.0 sec
                    lnlotsqft=(ln(parcel.parcel_sqft)).astype(float32)...0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.0 sec
                    lnsqft=(ln(urbansim_parcel.parcel.building_sqft)).astype(float32)....0.0 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32)
                        residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32): completed...0.1 sec
                REPM chunk 1 out of 1.: completed........................2.2 sec
            Running Real Estate Price Model (from urbansim.models.real_estate_price_model): completed...2.7 sec
            Flushing parcel
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/parcels doesn't exist and is created
            Flushing building
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/buildings doesn't exist and is created
            Flushing household
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/households doesn't exist and is created
            Flushing job
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/jobs doesn't exist and is created
            Flushing travel_data
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/travel_data doesn't exist and is created
            Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
            flter = numpy.logical_and(parcel.number_of_agents(development_project_proposal) == 0, urbansim_parcel.parcel.vacant_land_area > 0)
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                    used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
            flter = numpy.logical_and(parcel.number_of_agents(development_project_proposal) == 0, urbansim_parcel.parcel.vacant_land_area > 0): completed...0.1 sec
            development_template.is_active > 0...........................0.0 sec
            WARNING: template_filter is set to development_template.is_active > 0, but there is an error when computing it: Incomplete variable specification for 'development_template.is_active' (missing package name, and variable is not in expression library not a lag variable).
            Creating proposals for new development: started on Mon Jun 27 18:49:47 2011
                Creating object urbansim.datasets.development_constraint_dataset.DevelopmentConstraintDataset
                urbansim_parcel.development_template.far.................0.0 sec
                urbansim_parcel.development_template.units_per_acre......0.0 sec
                Creating object urbansim_parcel.datasets.generic_land_use_type_dataset.GenericLandUseTypeDataset
                Matching 772 development constraints to 166524 parcels: started on Mon Jun 27 18:49:47 2011....4.6 sec
                generic_land_use_type_id=development_template.disaggregate(land_use_type.generic_land_use_type_id)....0.0 sec
                Combine parcels, templates and constraints: started on Mon Jun 27 18:49:52 2011....2.5 sec
                Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
                urbansim_parcel.development_project_proposal.is_size_fit
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)....1.2 sec
                    land_area_min=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_min)....0.2 sec
                    land_area_max=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_max)....0.1 sec
                urbansim_parcel.development_project_proposal.is_size_fit: completed...1.5 sec
                urbansim_parcel.development_project_proposal.units_proposed
                    urbansim_parcel.development_project_proposal.units_proposed_fraction
                        urbansim_parcel.development_project_proposal.land_area_taken
                            land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                            land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                        urbansim_parcel.development_project_proposal.land_area_taken: completed...0.0 sec
                        density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)
                            urbansim_parcel.development_template.density_converter....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter): completed...0.0 sec
                        usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                    urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.1 sec
                urbansim_parcel.development_project_proposal.units_proposed: completed...0.1 sec
                proposal set created with 81392 proposals.
            Creating proposals for new development: completed............9.7 sec
            Creating proposals for re-development: started on Mon Jun 27 18:49:56 2011
                low_improvement_ratio_of_parcels_with_bldg=(parcel.number_of_agents(building)>0)*(urbansim_parcel.parcel.improvement_value / ( urbansim_parcel.parcel.unit_price * urbansim_parcel.parcel.existing_units ) < 0.1)*(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean)>30)
                    urbansim_parcel.parcel.existing_units
                        unit_name = parcel.disaggregate(land_use_type.unit_name)....0.0 sec
                        building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                            urbansim_parcel.building.building_sqft.......0.1 sec
                        building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.1 sec
                        residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                    urbansim_parcel.parcel.existing_units: completed.....0.2 sec
                    improvement_value =parcel.aggregate(building.improvement_value)....0.1 sec
                    urbansim_parcel.building.age_masked
                        urbansim_parcel.building.has_valid_year_built....0.0 sec
                    urbansim_parcel.building.age_masked: completed.......0.0 sec
                low_improvement_ratio_of_parcels_with_bldg=(parcel.number_of_agents(building)>0)*(urbansim_parcel.parcel.improvement_value / ( urbansim_parcel.parcel.unit_price * urbansim_parcel.parcel.existing_units ) < 0.1)*(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean)>30): completed...0.5 sec
                Matching 772 development constraints to 2742 parcels: started on Mon Jun 27 18:49:57 2011....0.1 sec
                Combine parcels, templates and constraints: started on Mon Jun 27 18:49:57 2011....0.0 sec
                Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
                urbansim_parcel.development_project_proposal.is_size_fit
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                            used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                    land_area_min=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_min)....0.0 sec
                    land_area_max=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_max)....0.0 sec
                urbansim_parcel.development_project_proposal.is_size_fit: completed...0.1 sec
                urbansim_parcel.development_project_proposal.units_proposed
                    urbansim_parcel.development_project_proposal.units_proposed_fraction
                        urbansim_parcel.development_project_proposal.land_area_taken
                            land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                            land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                        urbansim_parcel.development_project_proposal.land_area_taken: completed...0.0 sec
                        density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                        usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                    urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.0 sec
                urbansim_parcel.development_project_proposal.units_proposed: completed...0.0 sec
                proposal set created with 11377 proposals.
            Creating proposals for re-development: completed.............1.0 sec
            Running Development Project Proposal Regression Model (from urbansim_parcel.models.development_project_proposal_regression_model): started on Mon Jun 27 18:49:58 2011
                Creating object urbansim_parcel.datasets.development_project_proposal_component_dataset.DevelopmentProjectProposalComponentDataset
                Total number of individuals: 92769
                PDPRM chunk 1 out of 1.: started on Mon Jun 27 18:49:58 2011
                    Number of agents in this chunk: 92769
                    land_use_type_id=development_project_proposal.disaggregate(development_template.land_use_type_id)....0.0 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300: completed...0.1 sec
                    art300 = development_project_proposal.disaggregate(parcel.art300)....0.0 sec
                    art600 = psrc.parcel.distance_to_arterial_in_gridcell<600....0.0 sec
                    art600 = development_project_proposal.disaggregate(parcel.art600)....0.0 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)....0.0 sec
                    hbwavgtmda = development_project_proposal.disaggregate(parcel.hbwavgtmda)....0.0 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200: completed...0.1 sec
                    hwy200 = development_project_proposal.disaggregate(parcel.hwy200)....0.0 sec
                    hwy2000 = psrc.parcel.distance_to_highway_in_gridcell<2000....0.0 sec
                    hwy2000 = development_project_proposal.disaggregate(parcel.hwy2000)....0.0 sec
                    inugb = parcel.is_inside_urban_growth_boundary*1.....0.0 sec
                    inugb = development_project_proposal.disaggregate(parcel.inugb)....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built)....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940: completed...0.1 sec
                    is_pre_1940 = development_project_proposal.disaggregate(parcel.is_pre_1940)....0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_age).astype(float32))
                        urbansim_parcel.development_project_proposal.building_age
                            urbansim_parcel.development_project_proposal.has_valid_year_built....0.0 sec
                        urbansim_parcel.development_project_proposal.building_age: completed...0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_age).astype(float32)): completed...0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_sqft).astype(float32))
                        building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32)
                            building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32)
                                building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                                        urbansim_parcel.development_project_proposal.units_proposed
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                                urbansim_parcel.development_project_proposal.land_area_taken
                                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                                                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                                                            used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                                                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                                                    land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                                    land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                                    parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                                                urbansim_parcel.development_project_proposal.land_area_taken: completed...0.2 sec
                                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.2 sec
                                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.2 sec
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.2 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)
                                        urbansim_parcel.development_template.is_far....0.0 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far): completed...0.0 sec
                                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.2 sec
                            building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32): completed...0.3 sec
                        building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32): completed...0.3 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_sqft).astype(float32)): completed...0.3 sec
                    ln_bounded(safe_array_divide(development_project_proposal.disaggregate(parcel.parcel_sqft), (urbansim_parcel.development_project_proposal.building_sqft).astype(float32)))....0.0 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32)....0.0 sec
                    lnavginc = development_project_proposal.disaggregate(parcel.lnavginc)....0.0 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp10da = development_project_proposal.disaggregate(parcel.lnemp10da)....0.0 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32)....0.0 sec
                    lnemp10wa = development_project_proposal.disaggregate(parcel.lnemp10wa)....0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp20da = development_project_proposal.disaggregate(parcel.lnemp20da)....0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32)....0.0 sec
                    lnemp20tw = development_project_proposal.disaggregate(parcel.lnemp20tw)....0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32)....0.0 sec
                    lnemp20wa = development_project_proposal.disaggregate(parcel.lnemp20wa)....0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp30da = development_project_proposal.disaggregate(parcel.lnemp30da)....0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32)....0.0 sec
                    lnemp30tw = development_project_proposal.disaggregate(parcel.lnemp30tw)....0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)....0.0 sec
                    lnempden = development_project_proposal.disaggregate(parcel.lnempden)....0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)....0.0 sec
                    lngcdacbd = development_project_proposal.disaggregate(parcel.lngcdacbd)....0.0 sec
                    lnlotsqft=(ln(parcel.parcel_sqft)).astype(float32)...0.0 sec
                    lnlotsqft = development_project_proposal.disaggregate(parcel.lnlotsqft)....0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)....0.0 sec
                    lnpopden = development_project_proposal.disaggregate(parcel.lnpopden)....0.0 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32)....0.0 sec
                    lnunits = development_project_proposal.disaggregate(parcel.lnunits)....0.0 sec
                PDPRM chunk 1 out of 1.: completed.......................1.8 sec
            Running Development Project Proposal Regression Model (from urbansim_parcel.models.development_project_proposal_regression_model): completed...2.1 sec
            Flushing parcel
            Flushing building
            Flushing development_project_proposal_component
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/development_project_proposal_components doesn't exist and is created
            Flushing development_project_proposal
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/development_project_proposals doesn't exist and is created
            exp_roi = exp(urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment)
                urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment
                    total_investment = (urbansim_parcel.development_project_proposal.acquisition_cost + urbansim_parcel.development_project_proposal.demolition_cost + urbansim_parcel.development_project_proposal.construction_cost).astype(float32)
                        urbansim_parcel.development_project_proposal.acquisition_cost
                            unit_price = development_project_proposal.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                            existing_units = development_project_proposal.disaggregate(urbansim_parcel.parcel.existing_units)
                                urbansim_parcel.parcel.existing_units
                                    unit_name = parcel.disaggregate(land_use_type.unit_name)....0.0 sec
                                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                                        urbansim_parcel.building.building_sqft....0.1 sec
                                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.2 sec
                                    residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                                urbansim_parcel.parcel.existing_units: completed...0.3 sec
                            existing_units = development_project_proposal.disaggregate(urbansim_parcel.parcel.existing_units): completed...0.3 sec
                            improvement_value=development_project_proposal.disaggregate(urbansim_parcel.parcel.improvement_value)
                                improvement_value =parcel.aggregate(building.improvement_value)....0.1 sec
                            improvement_value=development_project_proposal.disaggregate(urbansim_parcel.parcel.improvement_value): completed...0.1 sec
                            urbansim_parcel.development_project_proposal.land_area_taken
                                vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                                    vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                                        used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                                    vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                                vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                                land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                            urbansim_parcel.development_project_proposal.land_area_taken: completed...0.2 sec
                            land_area=development_project_proposal.disaggregate(parcel.parcel_sqft)....0.0 sec
                        urbansim_parcel.development_project_proposal.acquisition_cost: completed...0.8 sec
                        construction_cost = development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.construction_cost)
                            construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed
                                urbansim_parcel.development_project_proposal_component.units_proposed
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                                        urbansim_parcel.development_project_proposal.units_proposed
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.0 sec
                                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.0 sec
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.0 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)....0.0 sec
                                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                                    building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.1 sec
                                component_construction_cost_per_unit = (development_template_component.construction_cost_per_unit * development_template_component.building_sqft_per_unit).astype(float32)....0.0 sec
                            construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.1 sec
                        construction_cost = development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.construction_cost): completed...0.2 sec
                        demolition_cost = development_project_proposal.disaggregate(urbansim_parcel.parcel.demolition_cost) * development_project_proposal.is_redevelopment
                            demolition_cost = (parcel.aggregate(urbansim_parcel.building.demolition_cost)).astype(int32)
                                urbansim_parcel.building.demolition_cost
                                    demolition_cost_per_sqft=building.disaggregate(demolition_cost_per_sqft.demolition_cost_per_sqft)
                                        Creating object urbansim_parcel.datasets.demolition_cost_per_sqft_dataset.DemolitionCostPerSqftDataset
                                    demolition_cost_per_sqft=building.disaggregate(demolition_cost_per_sqft.demolition_cost_per_sqft): completed...0.0 sec
                                urbansim_parcel.building.demolition_cost: completed...0.0 sec
                            demolition_cost = (parcel.aggregate(urbansim_parcel.building.demolition_cost)).astype(int32): completed...0.1 sec
                        demolition_cost = development_project_proposal.disaggregate(urbansim_parcel.parcel.demolition_cost) * development_project_proposal.is_redevelopment: completed...0.1 sec
                    total_investment = (urbansim_parcel.development_project_proposal.acquisition_cost + urbansim_parcel.development_project_proposal.demolition_cost + urbansim_parcel.development_project_proposal.construction_cost).astype(float32): completed...1.1 sec
                    profit = urbansim_parcel.development_project_proposal.total_revenue - urbansim_parcel.development_project_proposal.total_investment
                        total_revenue = (urbansim_parcel.development_project_proposal.building_sqft * development_project_proposal.unit_price_expected).astype(float32)
                            building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32)
                                building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32)....0.0 sec
                            building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32): completed...0.0 sec
                        total_revenue = (urbansim_parcel.development_project_proposal.building_sqft * development_project_proposal.unit_price_expected).astype(float32): completed...0.0 sec
                    profit = urbansim_parcel.development_project_proposal.total_revenue - urbansim_parcel.development_project_proposal.total_investment: completed...0.0 sec
                urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment: completed...1.2 sec
            exp_roi = exp(urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment): completed...1.2 sec
            Running urbansim_parcel.models.development_project_proposal_sampling_model.DevelopmentProjectProposalSamplingModel: started on Mon Jun 27 18:50:01 2011
                number_of_components = (development_project_proposal.number_of_agents(development_project_proposal_component)).astype(int32)....0.0 sec
                zone_id = development_project_proposal.disaggregate(parcel.zone_id)....0.1 sec
                occupied_units_for_jobs = urbansim_parcel.building.number_of_non_home_based_jobs
                    urbansim_parcel.building.number_of_SSS_jobs
                        urbansim.job.is_building_type_SSS................0.0 sec
                    urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                occupied_units_for_jobs = urbansim_parcel.building.number_of_non_home_based_jobs: completed...0.2 sec
                units_for_jobs = urbansim_parcel.building.total_non_home_based_job_space
                    urbansim_parcel.building.total_non_home_based_job_space
                        urbansim_parcel.building.building_sqft_per_job
                            Creating object urbansim_parcel.datasets.building_sqft_per_job_dataset.BuildingSqftPerJobDataset
                            zone_id = building.disaggregate(parcel.zone_id)....0.1 sec
                        urbansim_parcel.building.building_sqft_per_job: completed...0.1 sec
                    urbansim_parcel.building.total_non_home_based_job_space: completed...0.1 sec
                units_for_jobs = urbansim_parcel.building.total_non_home_based_job_space: completed...0.1 sec
                occupied_residential_units = urbansim_parcel.building.number_of_households
                    number_of_households = building.number_of_agents(household)....0.1 sec
                occupied_residential_units = urbansim_parcel.building.number_of_households: completed...0.1 sec
                is_residential = (building.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                Creating object urbansim_parcel.datasets.target_vacancy_dataset.TargetVacancyDataset
                is_residential = target_vacancy.disaggregate(building_type.is_residential)....0.0 sec
                Status of 0 development proposals set to active.
                Target/existing vacancy rates (reached using eligible proposals) by building type:
                3[commercial]: 0.723266479638 = ((existing_units:387463 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:107224) / units_stock:387463
                4[condo_residential]: 0.120830647077 = ((existing_units:29471 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:25910) / units_stock:29471
                8[industrial]: 0.861338162435 = ((existing_units:303162 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:42037) / units_stock:303162
                12[multi_family_residential]: 0.098217586123 = ((existing_units:110917 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:100023) / units_stock:110917
                13[office]: 0.617864938436 = ((existing_units:474628 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:181372) / units_stock:474628
                19[single_family_residential]: 0.00448114764318 = ((existing_units:136349 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:135738) / units_stock:136349
                20[tcu]: 0.754168028768 = ((existing_units:3059 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:752) / units_stock:3059
                21[warehousing]: 0.866250183093 = ((existing_units:430109 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:57527) / units_stock:430109
            Running urbansim_parcel.models.development_project_proposal_sampling_model.DevelopmentProjectProposalSamplingModel: completed...0.7 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing development_project_proposal_component
            Flushing development_project_proposal
            Running BuildingConstructionModel (from urbansim_parcel.models.building_construction_model): started on Mon Jun 27 18:50:02 2011
                Creating object urbansim_parcel.datasets.velocity_function_dataset.VelocityFunctionDataset
                No new buildings built.
            Running BuildingConstructionModel (from urbansim_parcel.models.building_construction_model): completed...0.0 sec
            Creating object urbansim.datasets.household_characteristic_dataset.HouseholdCharacteristicDataset
            Running Household Transition Model with Persons Update (from urbansim_parcel.models.household_transition_model): started on Mon Jun 27 18:50:03 2011
                Difference in number of households: 2921 (original 263211, new 266132, created 2935, deleted 14)
                Number of unplaced households: 2935
                Created 1756 persons.
                WARNING: Number of persons in household set (660895) does not correspond to those in person set (534238).
            Running Household Transition Model with Persons Update (from urbansim_parcel.models.household_transition_model): completed...2.6 sec
            Flushing household
            Running Employment Transition Model (from urbansim.models.employment_transition_model): started on Mon Jun 27 18:50:06 2011
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                    urbansim.job.is_home_based_job.......................0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based
                    urbansim.job.is_non_home_based_job...................0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                Difference in number of jobs: -15083 (original 559285, new 544202, created 3348, deleted 18431)
                Number of unplaced jobs: 3348
            Running Employment Transition Model (from urbansim.models.employment_transition_model): completed...1.6 sec
            Flushing job
            Creating object urbansim.datasets.household_relocation_rate_dataset.HouseholdRelocationRateDataset
            Running Household Relocation Model (from urbansim.models.agent_relocation_model): started on Mon Jun 27 18:50:08 2011
                compute_probabilities ...
                WARNING: There are 118 households whose probability is un-specified by the rate dataset. Their probability is set to 0.
                compute_choices ...
                Number of movers: 74219
            Running Household Relocation Model (from urbansim.models.agent_relocation_model): completed...0.8 sec
            Flushing household
            zone_id = building.disaggregate(parcel.zone_id)..............0.1 sec
            Running Household Location Choice Model (from psrc_parcel.models.household_location_choice_model): started on Mon Jun 27 18:50:09 2011
                Total number of individuals: 74219
                HLCM chunk 1 out of 2.: started on Mon Jun 27 18:50:09 2011
                    Number of agents in this chunk: 37110
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 52639 units.
                    numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(numpy.logical_and(building.residential_units, building.sqft_per_unit), urbansim_parcel.building.unit_price > 0))
                        unit_price = building.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                        is_residential = (building.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                    numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(numpy.logical_and(building.residential_units, building.sqft_per_unit), urbansim_parcel.building.unit_price > 0)): completed...0.1 sec
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.1 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential
                        is_condo_residential=building.disaggregate(building_type.building_type_name=='condo_residential')
                            building_type.building_type_name=='condo_residential'....0.0 sec
                        is_condo_residential=building.disaggregate(building_type.building_type_name=='condo_residential'): completed...0.0 sec
                        urbansim.household.is_low_income.................0.0 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential: completed...0.1 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential
                        is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential')
                            building_type.building_type_name=='multi_family_residential'....0.0 sec
                        is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential'): completed...0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential: completed...0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)
                        is_single_family_residential=building.disaggregate(building_type.building_type_name == 'single_family_residential')
                            building_type.building_type_name=='single_family_residential'....0.0 sec
                        is_single_family_residential=building.disaggregate(building_type.building_type_name == 'single_family_residential'): completed...0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential): completed...0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)
                        urbansim_parcel.building.building_sqft...........0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft): completed...0.2 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.2 sec
                    ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit)
                        parcel_sqft_per_unit=safe_array_divide(building.disaggregate(parcel.parcel_sqft),building.residential_units)....0.1 sec
                    ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit): completed...0.1 sec
                    lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.4 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.4 sec
                    lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32): completed...0.4 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.1 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)
                            urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.1 sec
                        ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone): completed...0.1 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 2791 (in 6 iterations)
                HLCM chunk 1 out of 2.: completed.......................13.9 sec
                HLCM chunk 2 out of 2.: started on Mon Jun 27 18:50:23 2011
                    Number of agents in this chunk: 37109
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 53996 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.1 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.2 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.1 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 2746 (in 6 iterations)
                HLCM chunk 2 out of 2.: completed.......................12.5 sec
                number_of_households = building.number_of_agents(household)....0.1 sec
                Total number of individuals: 5537
                HLCM chunk 1 out of 1.: started on Mon Jun 27 18:50:35 2011
                    Number of agents in this chunk: 5537
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 19633 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.0 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.0 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.0 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.0 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 0 (in 5 iterations)
                HLCM chunk 1 out of 1.: completed........................1.3 sec
                number_of_households = building.number_of_agents(household)....0.1 sec
            Running Household Location Choice Model (from psrc_parcel.models.household_location_choice_model): completed...28.2 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing travel_data
            Creating object urbansim.datasets.job_relocation_rate_dataset.JobRelocationRateDataset
            Running Employment Relocation Model (from urbansim.models.agent_relocation_model): started on Mon Jun 27 18:50:37 2011
                compute_probabilities ...
                compute_choices ...
                Number of movers: 35840
            Running Employment Relocation Model (from urbansim.models.agent_relocation_model): completed...0.8 sec
            Flushing job
            'agents_grouping_attribute' set to job.building_type.
            zone_id = building.disaggregate(parcel.zone_id)..............0.4 sec
            Running Non_home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): started on Mon Jun 27 18:50:39 2011
                Total number of individuals: 35218
                Non_home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:50:39 2011
                    Number of agents in this chunk: 35218
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.3 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.6 sec
                            urbansim_parcel.building.building_sqft.......0.0 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...0.8 sec
                        urbansim_parcel.building.building_sqft_per_job...0.0 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...0.8 sec
                    Available capacity: 1498303 units.
                    building.non_residential_sqft>0......................0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.2 sec
                    far=(urbansim_parcel.building.building_sqft/urbansim_parcel.building.parcel_sqft).astype(float32)
                        parcel_sqft = building.disaggregate(parcel.parcel_sqft)....0.1 sec
                    far=(urbansim_parcel.building.building_sqft/urbansim_parcel.building.parcel_sqft).astype(float32): completed...0.1 sec
                    inugb = building.disaggregate(parcel.is_inside_urban_growth_boundary)*1....0.1 sec
                    is_commercial_building = urbansim.building.is_commercial
                        is_commercial=building.disaggregate(building_type.building_type_name =='commercial')
                            building_type.building_type_name=='commercial'....0.0 sec
                        is_commercial=building.disaggregate(building_type.building_type_name =='commercial'): completed...0.0 sec
                    is_commercial_building = urbansim.building.is_commercial: completed...0.0 sec
                    is_industrial_building = urbansim.building.is_industrial
                        is_industrial=building.disaggregate(building_type.building_type_name =='industrial')
                            building_type.building_type_name=='industrial'....0.0 sec
                        is_industrial=building.disaggregate(building_type.building_type_name =='industrial'): completed...0.0 sec
                    is_industrial_building = urbansim.building.is_industrial: completed...0.0 sec
                    is_near_art = building.disaggregate(psrc.parcel.is_near_arterial_in_gridcell)
                        psrc.parcel.SSS_in_gridcell
                            urbansim.gridcell.is_near_arterial...........0.0 sec
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    is_near_art = building.disaggregate(psrc.parcel.is_near_arterial_in_gridcell): completed...0.2 sec
                    is_near_highway = building.disaggregate(psrc.parcel.is_near_highway_in_gridcell)
                        psrc.parcel.SSS_in_gridcell
                            urbansim.gridcell.is_near_highway............0.0 sec
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    is_near_highway = building.disaggregate(psrc.parcel.is_near_highway_in_gridcell): completed...0.1 sec
                    is_office_building = urbansim.building.is_office
                        is_office=building.disaggregate(building_type.building_type_name =='office')
                            building_type.building_type_name=='office'...0.0 sec
                        is_office=building.disaggregate(building_type.building_type_name =='office'): completed...0.0 sec
                    is_office_building = urbansim.building.is_office: completed...0.0 sec
                    ln_bldgage=ln(urbansim_parcel.building.age_masked)
                        urbansim_parcel.building.age_masked
                            urbansim_parcel.building.has_valid_year_built....0.0 sec
                        urbansim_parcel.building.age_masked: completed...0.0 sec
                    ln_bldgage=ln(urbansim_parcel.building.age_masked): completed...0.0 sec
                    ln_unit_price_trunc = ln(where(building.disaggregate(urbansim_parcel.parcel.unit_price<1500),where(building.disaggregate(urbansim_parcel.parcel.unit_price<1),1,building.disaggregate(urbansim_parcel.parcel.unit_price)),1500))
                        urbansim_parcel.parcel.unit_price<1..............0.0 sec
                        urbansim_parcel.parcel.unit_price<1500...........0.0 sec
                    ln_unit_price_trunc = ln(where(building.disaggregate(urbansim_parcel.parcel.unit_price<1500),where(building.disaggregate(urbansim_parcel.parcel.unit_price<1),1,building.disaggregate(urbansim_parcel.parcel.unit_price)),1500)): completed...0.3 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD
                            urbansim_parcel.job.is_sector_DDD............0.0 sec
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD: completed...0.0 sec
                        zone.aggregate(parcel.parcel_sqft)/43560.0.......0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income))
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean)
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.1 sec
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean): completed...0.2 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income)): completed...0.2 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.2 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    lngcdacbd=ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))....0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))
                        urbansim_parcel.zone.population_per_acre
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre)): completed...0.0 sec
                    lnsqft=ln(urbansim_parcel.building.building_sqft)....0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 1.: completed........10.1 sec
                urbansim_parcel.building.number_of_SSS_jobs
                    urbansim.job.is_building_type_SSS....................0.0 sec
                urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                urbansim_parcel.building.total_non_home_based_job_space..0.0 sec
                Total number of individuals: 3346
                Non_home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:50:49 2011
                    Number of agents in this chunk: 3346
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.3 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.6 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...0.7 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...0.7 sec
                    Available capacity: 1466431 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.1 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 1.: completed.........2.3 sec
                urbansim_parcel.building.number_of_SSS_jobs..............0.2 sec
                Total number of individuals: 3309
                Non_home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:50:51 2011
                    Number of agents in this chunk: 3309
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.3 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.6 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...0.8 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...0.8 sec
                    Available capacity: 1466394 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.1 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 1.: completed.........2.2 sec
                urbansim_parcel.building.number_of_SSS_jobs..............0.2 sec
            Running Non_home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): completed...15.3 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing travel_data
            'agents_grouping_attribute' set to job.building_type.
            zone_id = building.disaggregate(parcel.zone_id)..............0.1 sec
            Running Home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): started on Mon Jun 27 18:50:54 2011
                Total number of individuals: 622
                Home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:50:54 2011
                    Number of agents in this chunk: 622
                    urbansim_parcel.building.vacant_home_based_job_space
                        urbansim_parcel.building.total_home_based_job_space
                            sum_minimum_persons_and_2=building.aggregate(urbansim_parcel.household.minimum_persons_and_2)
                                urbansim_parcel.household.minimum_persons_and_2....0.0 sec
                            sum_minimum_persons_and_2=building.aggregate(urbansim_parcel.household.minimum_persons_and_2): completed...0.2 sec
                            is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential')....0.0 sec
                        urbansim_parcel.building.total_home_based_job_space: completed...0.2 sec
                        urbansim_parcel.building.number_of_SSS_jobs
                            urbansim.job.is_building_type_SSS............0.0 sec
                        urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                        WARNING: Negative values detected in function/method ''
                        WARNING: Minimum: -235.0. Negative values clipped to zero.
                    urbansim_parcel.building.vacant_home_based_job_space: completed...0.4 sec
                    Available capacity: 394193.0 units.
                    numpy.logical_and(building.residential_units, building.sqft_per_unit)....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    bias_hb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_home_based_job_space = urbansim_parcel.building.vacant_home_based_job_space/float(sum(urbansim_parcel.building.vacant_home_based_job_space))....0.1 sec
                            _log_weights_vacant_home_based_job_space = ln(building._normalized_weights_vacant_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_home_based_job_space = ln(1 - building._normalized_weights_vacant_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_hb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_home_based_job_space: completed...0.1 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income))....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.4 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.4 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.4 sec
                    lngcdacbd=ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))....0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))....0.0 sec
                    lnsqftunit=ln(urbansim_parcel.building.building_sqft_per_unit)
                        building_sqft_per_unit=safe_array_divide(urbansim_parcel.building.building_sqft,building.residential_units)
                            urbansim_parcel.building.building_sqft.......0.0 sec
                        building_sqft_per_unit=safe_array_divide(urbansim_parcel.building.building_sqft,building.residential_units): completed...0.0 sec
                    lnsqftunit=ln(urbansim_parcel.building.building_sqft_per_unit): completed...0.0 sec
                    unit_price = building.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 0 (in 2 iterations)
                Home_based ELCM chunk 1 out of 1.: completed.............1.2 sec
            Running Home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): completed...1.3 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Running Distribute Unplaced Jobs Model (from urbansim_parcel.models.distribute_unplaced_jobs_model): started on Mon Jun 27 18:50:56 2011
                urbansim.job.is_in_employment_sector_group_SSS...........3.4 sec
                Number of scalable jobs: 1769
                urbansim_parcel.building.number_of_jobs_of_sector_DDD
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim_parcel.building.number_of_jobs_of_sector_DDD: completed...0.2 sec
                urbansim_parcel.building.number_of_jobs_of_sector_DDD
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim_parcel.building.number_of_jobs_of_sector_DDD: completed...0.2 sec
                is_governmental = building.disaggregate(building_type.generic_building_type_description == 'government')
                    building_type.generic_building_type_description=='government'....0.0 sec
                is_governmental = building.disaggregate(building_type.generic_building_type_description == 'government'): completed...0.0 sec
            Running Distribute Unplaced Jobs Model (from urbansim_parcel.models.distribute_unplaced_jobs_model): completed...3.8 sec
            Flushing building
            Flushing job
            Writing datasets to cache for year 2002: started on Mon Jun 27 18:51:00 2011
                Flushing travel_data
                Flushing development_project_proposal
                Flushing household
                Flushing development_template
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/development_templates doesn't exist and is created
                Flushing job_building_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/job_building_types doesn't exist and is created
                Flushing zone
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/zones doesn't exist and is created
                Flushing demolition_cost_per_sqft
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/demolition_cost_per_sqft doesn't exist and is created
                Flushing employment_sector_group
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/employment_adhoc_sector_groups doesn't exist and is created
                Flushing generic_land_use_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/generic_land_use_types doesn't exist and is created
                Flushing land_use_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/land_use_types doesn't exist and is created
                Flushing employment_sector
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/employment_sectors doesn't exist and is created
                Flushing dataset
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/employment_adhoc_sector_group_definitions doesn't exist and is created
                Flushing parcel
                Flushing gridcell
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/gridcells doesn't exist and is created
                Flushing target_vacancy
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/target_vacancies doesn't exist and is created
                Flushing urbansim_constant
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/urbansim_constants doesn't exist and is created
                Flushing job
                Flushing development_project_proposal_component
                Flushing building
                Flushing development_constraint
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/development_constraints doesn't exist and is created
                Flushing development_template_component
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/development_template_components doesn't exist and is created
                Flushing person
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/persons doesn't exist and is created
                Flushing building_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/building_types doesn't exist and is created
                Flushing building_sqft_per_job
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2002/building_sqft_per_job doesn't exist and is created
            Writing datasets to cache for year 2002: completed...........2.9 sec
        Simulate year 2002: completed............................1 min, 20.3 sec
        Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/year_2002_log.txt
    Starting simulation for year 2002: completed.................1 min, 20.4 sec
Start simulation run: completed..................................1 min, 20.4 sec
Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
Running UrbanSim for year 2002 in new process: completed.........1 min, 21.4 sec
Running UrbanSim for year 2003 in new process: started on Mon Jun 27 18:51:03 2011
    Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
    Invoking: /usr/bin/python /home/christian/Documents/vibe2/src/3dparty/opus/src/urbansim/model_coordinators/model_system.py -r /tmp/tmpT1Y2rN/resources.pickle --log-file-name run_multiprocess.log
Cache Directory set to: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47
Start simulation run: started on Mon Jun 27 18:51:03 2011
    random seed = (783587785,)
    Starting simulation for year 2003: started on Mon Jun 27 18:51:03 2011
        Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
        Logging to file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/year_2003_log.txt
        Simulate year 2003: started on Mon Jun 27 18:51:03 2011
            Creating object urbansim.datasets.travel_data_dataset.TravelDataDataset
            Creating object urbansim_parcel.datasets.building_dataset.BuildingDataset
            Creating object urbansim.datasets.job_building_type_dataset.JobBuildingTypeDataset
            Creating object urbansim_parcel.datasets.parcel_dataset.ParcelDataset
            Creating object urbansim.datasets.zone_dataset.ZoneDataset
            Creating object urbansim.datasets.household_dataset.HouseholdDataset
            Creating object urbansim_parcel.datasets.development_template_component_dataset.DevelopmentTemplateComponentDataset
            Creating object urbansim_parcel.datasets.development_template_dataset.DevelopmentTemplateDataset
            Creating object urbansim_parcel.datasets.person_dataset.PersonDataset
            Creating object urbansim.datasets.job_dataset.JobDataset
            Creating object urbansim.datasets.building_type_dataset.BuildingTypeDataset
            Running Real Estate Price Model (from urbansim.models.real_estate_price_model): started on Mon Jun 27 18:51:03 2011
                numpy.logical_or(urbansim_parcel.parcel.building_sqft, urbansim_parcel.parcel.is_land_use_type_vacant)
                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                        urbansim_parcel.building.building_sqft...........0.1 sec
                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.3 sec
                    urbansim_parcel.parcel.is_land_use_type_SSS
                        Creating object urbansim_parcel.datasets.land_use_type_dataset.LandUseTypeDataset
                    urbansim_parcel.parcel.is_land_use_type_SSS: completed...0.0 sec
                numpy.logical_or(urbansim_parcel.parcel.building_sqft, urbansim_parcel.parcel.is_land_use_type_vacant): completed...0.4 sec
                ln_unit_price=ln(urbansim_parcel.parcel.unit_price)......0.0 sec
                Total number of individuals: 163810
                REPM chunk 1 out of 1.: started on Mon Jun 27 18:51:04 2011
                    Number of agents in this chunk: 163810
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300
                        psrc.parcel.SSS_in_gridcell
                            Creating object urbansim.datasets.gridcell_dataset.GridcellDataset
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300: completed...0.1 sec
                    art600 = psrc.parcel.distance_to_arterial_in_gridcell<600....0.0 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)
                        psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone....0.1 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone): completed...0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200: completed...0.1 sec
                    hwy2000 = psrc.parcel.distance_to_highway_in_gridcell<2000....0.0 sec
                    inugb = parcel.is_inside_urban_growth_boundary*1.....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built)
                            urbansim_parcel.building.has_valid_year_built....0.0 sec
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built): completed...0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940: completed...0.1 sec
                    ln_bldgage=(ln(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean))).astype(float32)
                        urbansim_parcel.building.age_masked..............0.0 sec
                    ln_bldgage=(ln(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean))).astype(float32): completed...0.1 sec
                    ln_invfar=(ln(parcel.parcel_sqft/(urbansim_parcel.parcel.building_sqft).astype(float32))).astype(float32)....0.0 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32)
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean)
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)
                                zone_id = building.disaggregate(parcel.zone_id)....0.1 sec
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id): completed...0.2 sec
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean): completed...0.4 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32): completed...0.4 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.5 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.6 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.6 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.6 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_walk....0.0 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32): completed...0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_transit_walk....0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32): completed...0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_walk....0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32): completed...0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_transit_walk....0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32): completed...0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            acres = zone.aggregate(parcel.parcel_sqft) / 43560.0 ....0.0 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32): completed...0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)
                        psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd
                            psrc.zone.generalized_cost_hbw_am_drive_alone_to_DDD
                                destination_id=129+0*zone.zone_id........0.0 sec
                            psrc.zone.generalized_cost_hbw_am_drive_alone_to_DDD: completed...0.0 sec
                        psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd: completed...0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32): completed...0.1 sec
                    lnlotsqft=(ln(parcel.parcel_sqft)).astype(float32)...0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.1 sec
                    lnsqft=(ln(urbansim_parcel.parcel.building_sqft)).astype(float32)....0.0 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32)
                        residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32): completed...0.1 sec
                REPM chunk 1 out of 1.: completed........................2.4 sec
            Running Real Estate Price Model (from urbansim.models.real_estate_price_model): completed...3.0 sec
            Flushing parcel
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/parcels doesn't exist and is created
            Flushing building
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/buildings doesn't exist and is created
            Flushing household
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/households doesn't exist and is created
            Flushing job
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/jobs doesn't exist and is created
            Flushing travel_data
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/travel_data doesn't exist and is created
            Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
            flter = numpy.logical_and(parcel.number_of_agents(development_project_proposal) == 0, urbansim_parcel.parcel.vacant_land_area > 0)
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                    used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
            flter = numpy.logical_and(parcel.number_of_agents(development_project_proposal) == 0, urbansim_parcel.parcel.vacant_land_area > 0): completed...0.1 sec
            development_template.is_active > 0...........................0.0 sec
            WARNING: template_filter is set to development_template.is_active > 0, but there is an error when computing it: Incomplete variable specification for 'development_template.is_active' (missing package name, and variable is not in expression library not a lag variable).
            Creating proposals for new development: started on Mon Jun 27 18:51:08 2011
                Creating object urbansim.datasets.development_constraint_dataset.DevelopmentConstraintDataset
                urbansim_parcel.development_template.far.................0.0 sec
                urbansim_parcel.development_template.units_per_acre......0.0 sec
                Creating object urbansim_parcel.datasets.generic_land_use_type_dataset.GenericLandUseTypeDataset
                Matching 772 development constraints to 166524 parcels: started on Mon Jun 27 18:51:09 2011....4.7 sec
                generic_land_use_type_id=development_template.disaggregate(land_use_type.generic_land_use_type_id)....0.0 sec
                Combine parcels, templates and constraints: started on Mon Jun 27 18:51:13 2011....2.5 sec
                Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
                urbansim_parcel.development_project_proposal.is_size_fit
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)....1.2 sec
                    land_area_min=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_min)....0.2 sec
                    land_area_max=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_max)....0.2 sec
                urbansim_parcel.development_project_proposal.is_size_fit: completed...1.6 sec
                urbansim_parcel.development_project_proposal.units_proposed
                    urbansim_parcel.development_project_proposal.units_proposed_fraction
                        urbansim_parcel.development_project_proposal.land_area_taken
                            land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                            land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                        urbansim_parcel.development_project_proposal.land_area_taken: completed...0.0 sec
                        density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)
                            urbansim_parcel.development_template.density_converter....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter): completed...0.0 sec
                        usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                    urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.1 sec
                urbansim_parcel.development_project_proposal.units_proposed: completed...0.1 sec
                proposal set created with 81392 proposals.
            Creating proposals for new development: completed............9.9 sec
            Creating proposals for re-development: started on Mon Jun 27 18:51:18 2011
                low_improvement_ratio_of_parcels_with_bldg=(parcel.number_of_agents(building)>0)*(urbansim_parcel.parcel.improvement_value / ( urbansim_parcel.parcel.unit_price * urbansim_parcel.parcel.existing_units ) < 0.1)*(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean)>30)
                    urbansim_parcel.parcel.existing_units
                        unit_name = parcel.disaggregate(land_use_type.unit_name)....0.1 sec
                        building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                            urbansim_parcel.building.building_sqft.......0.1 sec
                        building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.1 sec
                        residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                    urbansim_parcel.parcel.existing_units: completed.....0.3 sec
                    improvement_value =parcel.aggregate(building.improvement_value)....0.1 sec
                    urbansim_parcel.building.age_masked
                        urbansim_parcel.building.has_valid_year_built....0.0 sec
                    urbansim_parcel.building.age_masked: completed.......0.0 sec
                low_improvement_ratio_of_parcels_with_bldg=(parcel.number_of_agents(building)>0)*(urbansim_parcel.parcel.improvement_value / ( urbansim_parcel.parcel.unit_price * urbansim_parcel.parcel.existing_units ) < 0.1)*(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean)>30): completed...0.6 sec
                Matching 772 development constraints to 2771 parcels: started on Mon Jun 27 18:51:19 2011....0.1 sec
                Combine parcels, templates and constraints: started on Mon Jun 27 18:51:19 2011....0.1 sec
                Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
                urbansim_parcel.development_project_proposal.is_size_fit
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                            used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                    land_area_min=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_min)....0.0 sec
                    land_area_max=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_max)....0.0 sec
                urbansim_parcel.development_project_proposal.is_size_fit: completed...0.1 sec
                urbansim_parcel.development_project_proposal.units_proposed
                    urbansim_parcel.development_project_proposal.units_proposed_fraction
                        urbansim_parcel.development_project_proposal.land_area_taken
                            land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                            land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                        urbansim_parcel.development_project_proposal.land_area_taken: completed...0.0 sec
                        density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                        usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                    urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.0 sec
                urbansim_parcel.development_project_proposal.units_proposed: completed...0.0 sec
                proposal set created with 11527 proposals.
            Creating proposals for re-development: completed.............1.1 sec
            Running Development Project Proposal Regression Model (from urbansim_parcel.models.development_project_proposal_regression_model): started on Mon Jun 27 18:51:19 2011
                Creating object urbansim_parcel.datasets.development_project_proposal_component_dataset.DevelopmentProjectProposalComponentDataset
                Total number of individuals: 92919
                PDPRM chunk 1 out of 1.: started on Mon Jun 27 18:51:20 2011
                    Number of agents in this chunk: 92919
                    land_use_type_id=development_project_proposal.disaggregate(development_template.land_use_type_id)....0.0 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300: completed...0.1 sec
                    art300 = development_project_proposal.disaggregate(parcel.art300)....0.0 sec
                    art600 = psrc.parcel.distance_to_arterial_in_gridcell<600....0.0 sec
                    art600 = development_project_proposal.disaggregate(parcel.art600)....0.0 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)....0.0 sec
                    hbwavgtmda = development_project_proposal.disaggregate(parcel.hbwavgtmda)....0.0 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200: completed...0.1 sec
                    hwy200 = development_project_proposal.disaggregate(parcel.hwy200)....0.0 sec
                    hwy2000 = psrc.parcel.distance_to_highway_in_gridcell<2000....0.0 sec
                    hwy2000 = development_project_proposal.disaggregate(parcel.hwy2000)....0.0 sec
                    inugb = parcel.is_inside_urban_growth_boundary*1.....0.0 sec
                    inugb = development_project_proposal.disaggregate(parcel.inugb)....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built)....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940: completed...0.1 sec
                    is_pre_1940 = development_project_proposal.disaggregate(parcel.is_pre_1940)....0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_age).astype(float32))
                        urbansim_parcel.development_project_proposal.building_age
                            urbansim_parcel.development_project_proposal.has_valid_year_built....0.0 sec
                        urbansim_parcel.development_project_proposal.building_age: completed...0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_age).astype(float32)): completed...0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_sqft).astype(float32))
                        building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32)
                            building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32)
                                building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                                        urbansim_parcel.development_project_proposal.units_proposed
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                                urbansim_parcel.development_project_proposal.land_area_taken
                                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                                                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                                                            used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                                                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                                                    land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                                    land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                                    parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                                                urbansim_parcel.development_project_proposal.land_area_taken: completed...0.2 sec
                                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.2 sec
                                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.2 sec
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.2 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)
                                        urbansim_parcel.development_template.is_far....0.0 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far): completed...0.0 sec
                                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.2 sec
                            building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32): completed...0.3 sec
                        building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32): completed...0.3 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_sqft).astype(float32)): completed...0.3 sec
                    ln_bounded(safe_array_divide(development_project_proposal.disaggregate(parcel.parcel_sqft), (urbansim_parcel.development_project_proposal.building_sqft).astype(float32)))....0.1 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32)....0.0 sec
                    lnavginc = development_project_proposal.disaggregate(parcel.lnavginc)....0.0 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp10da = development_project_proposal.disaggregate(parcel.lnemp10da)....0.0 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32)....0.0 sec
                    lnemp10wa = development_project_proposal.disaggregate(parcel.lnemp10wa)....0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp20da = development_project_proposal.disaggregate(parcel.lnemp20da)....0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32)....0.0 sec
                    lnemp20tw = development_project_proposal.disaggregate(parcel.lnemp20tw)....0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32)....0.0 sec
                    lnemp20wa = development_project_proposal.disaggregate(parcel.lnemp20wa)....0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp30da = development_project_proposal.disaggregate(parcel.lnemp30da)....0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32)....0.0 sec
                    lnemp30tw = development_project_proposal.disaggregate(parcel.lnemp30tw)....0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)....0.0 sec
                    lnempden = development_project_proposal.disaggregate(parcel.lnempden)....0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)....0.0 sec
                    lngcdacbd = development_project_proposal.disaggregate(parcel.lngcdacbd)....0.0 sec
                    lnlotsqft=(ln(parcel.parcel_sqft)).astype(float32)...0.0 sec
                    lnlotsqft = development_project_proposal.disaggregate(parcel.lnlotsqft)....0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)....0.0 sec
                    lnpopden = development_project_proposal.disaggregate(parcel.lnpopden)....0.0 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32)....0.0 sec
                    lnunits = development_project_proposal.disaggregate(parcel.lnunits)....0.0 sec
                PDPRM chunk 1 out of 1.: completed.......................1.9 sec
            Running Development Project Proposal Regression Model (from urbansim_parcel.models.development_project_proposal_regression_model): completed...2.3 sec
            Flushing parcel
            Flushing building
            Flushing development_project_proposal_component
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/development_project_proposal_components doesn't exist and is created
            Flushing development_project_proposal
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/development_project_proposals doesn't exist and is created
            exp_roi = exp(urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment)
                urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment
                    total_investment = (urbansim_parcel.development_project_proposal.acquisition_cost + urbansim_parcel.development_project_proposal.demolition_cost + urbansim_parcel.development_project_proposal.construction_cost).astype(float32)
                        urbansim_parcel.development_project_proposal.acquisition_cost
                            unit_price = development_project_proposal.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                            existing_units = development_project_proposal.disaggregate(urbansim_parcel.parcel.existing_units)
                                urbansim_parcel.parcel.existing_units
                                    unit_name = parcel.disaggregate(land_use_type.unit_name)....0.0 sec
                                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                                        urbansim_parcel.building.building_sqft....0.1 sec
                                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.2 sec
                                    residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                                urbansim_parcel.parcel.existing_units: completed...0.3 sec
                            existing_units = development_project_proposal.disaggregate(urbansim_parcel.parcel.existing_units): completed...0.4 sec
                            improvement_value=development_project_proposal.disaggregate(urbansim_parcel.parcel.improvement_value)
                                improvement_value =parcel.aggregate(building.improvement_value)....0.1 sec
                            improvement_value=development_project_proposal.disaggregate(urbansim_parcel.parcel.improvement_value): completed...0.1 sec
                            urbansim_parcel.development_project_proposal.land_area_taken
                                vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                                    vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                                        used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                                    vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                                vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                                land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                            urbansim_parcel.development_project_proposal.land_area_taken: completed...0.2 sec
                            land_area=development_project_proposal.disaggregate(parcel.parcel_sqft)....0.0 sec
                        urbansim_parcel.development_project_proposal.acquisition_cost: completed...0.9 sec
                        construction_cost = development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.construction_cost)
                            construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed
                                urbansim_parcel.development_project_proposal_component.units_proposed
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                                        urbansim_parcel.development_project_proposal.units_proposed
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.0 sec
                                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.0 sec
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.0 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)....0.0 sec
                                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                                    building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.1 sec
                                component_construction_cost_per_unit = (development_template_component.construction_cost_per_unit * development_template_component.building_sqft_per_unit).astype(float32)....0.0 sec
                            construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.2 sec
                        construction_cost = development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.construction_cost): completed...0.2 sec
                        demolition_cost = development_project_proposal.disaggregate(urbansim_parcel.parcel.demolition_cost) * development_project_proposal.is_redevelopment
                            demolition_cost = (parcel.aggregate(urbansim_parcel.building.demolition_cost)).astype(int32)
                                urbansim_parcel.building.demolition_cost
                                    demolition_cost_per_sqft=building.disaggregate(demolition_cost_per_sqft.demolition_cost_per_sqft)
                                        Creating object urbansim_parcel.datasets.demolition_cost_per_sqft_dataset.DemolitionCostPerSqftDataset
                                    demolition_cost_per_sqft=building.disaggregate(demolition_cost_per_sqft.demolition_cost_per_sqft): completed...0.1 sec
                                urbansim_parcel.building.demolition_cost: completed...0.1 sec
                            demolition_cost = (parcel.aggregate(urbansim_parcel.building.demolition_cost)).astype(int32): completed...0.1 sec
                        demolition_cost = development_project_proposal.disaggregate(urbansim_parcel.parcel.demolition_cost) * development_project_proposal.is_redevelopment: completed...0.2 sec
                    total_investment = (urbansim_parcel.development_project_proposal.acquisition_cost + urbansim_parcel.development_project_proposal.demolition_cost + urbansim_parcel.development_project_proposal.construction_cost).astype(float32): completed...1.3 sec
                    profit = urbansim_parcel.development_project_proposal.total_revenue - urbansim_parcel.development_project_proposal.total_investment
                        total_revenue = (urbansim_parcel.development_project_proposal.building_sqft * development_project_proposal.unit_price_expected).astype(float32)
                            building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32)
                                building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32)....0.0 sec
                            building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32): completed...0.0 sec
                        total_revenue = (urbansim_parcel.development_project_proposal.building_sqft * development_project_proposal.unit_price_expected).astype(float32): completed...0.1 sec
                    profit = urbansim_parcel.development_project_proposal.total_revenue - urbansim_parcel.development_project_proposal.total_investment: completed...0.1 sec
                urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment: completed...1.3 sec
            exp_roi = exp(urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment): completed...1.3 sec
            Running urbansim_parcel.models.development_project_proposal_sampling_model.DevelopmentProjectProposalSamplingModel: started on Mon Jun 27 18:51:23 2011
                number_of_components = (development_project_proposal.number_of_agents(development_project_proposal_component)).astype(int32)....0.0 sec
                zone_id = development_project_proposal.disaggregate(parcel.zone_id)....0.1 sec
                occupied_units_for_jobs = urbansim_parcel.building.number_of_non_home_based_jobs
                    urbansim_parcel.building.number_of_SSS_jobs
                        urbansim.job.is_building_type_SSS................0.0 sec
                    urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                occupied_units_for_jobs = urbansim_parcel.building.number_of_non_home_based_jobs: completed...0.2 sec
                units_for_jobs = urbansim_parcel.building.total_non_home_based_job_space
                    urbansim_parcel.building.total_non_home_based_job_space
                        urbansim_parcel.building.building_sqft_per_job
                            Creating object urbansim_parcel.datasets.building_sqft_per_job_dataset.BuildingSqftPerJobDataset
                            zone_id = building.disaggregate(parcel.zone_id)....0.1 sec
                        urbansim_parcel.building.building_sqft_per_job: completed...0.1 sec
                    urbansim_parcel.building.total_non_home_based_job_space: completed...0.1 sec
                units_for_jobs = urbansim_parcel.building.total_non_home_based_job_space: completed...0.1 sec
                occupied_residential_units = urbansim_parcel.building.number_of_households
                    number_of_households = building.number_of_agents(household)....0.1 sec
                occupied_residential_units = urbansim_parcel.building.number_of_households: completed...0.1 sec
                is_residential = (building.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                Creating object urbansim_parcel.datasets.target_vacancy_dataset.TargetVacancyDataset
                is_residential = target_vacancy.disaggregate(building_type.is_residential)....0.0 sec
                Sampling from 4 eligible proposals with status 4.
                WARNING: Running out of proposals; there aren't any proposals with non-zero weight
                Status of 1 development proposals set to active.
                Target/existing vacancy rates (reached using eligible proposals) by building type:
                3[commercial]: 0.73187891489 = ((existing_units:387463 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:103887) / units_stock:387463
                4[condo_residential]: 0.086559668827 = ((existing_units:29471 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:26920) / units_stock:29471
                8[industrial]: 0.869380067423 = ((existing_units:303162 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:39599) / units_stock:303162
                12[multi_family_residential]: 0.0825482117259 = ((existing_units:110917 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:101761) / units_stock:110917
                13[office]: 0.631880125066 = ((existing_units:474628 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:174720) / units_stock:474628
                19[single_family_residential]: 0.000454735483303 = ((existing_units:136349 + 
                                              units_proposed:12 - units_to_be_demolished:18) 
                                              - units_occupied:136281) / units_stock:136343
                20[tcu]: 0.764628963714 = ((existing_units:3059 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:720) / units_stock:3059
                21[warehousing]: 0.874657354299 = ((existing_units:430109 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:53911) / units_stock:430109
            Running urbansim_parcel.models.development_project_proposal_sampling_model.DevelopmentProjectProposalSamplingModel: completed...0.8 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing development_project_proposal_component
            Flushing development_project_proposal
            Running BuildingConstructionModel (from urbansim_parcel.models.building_construction_model): started on Mon Jun 27 18:51:24 2011
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: started on Mon Jun 27 18:51:24 2011
                    18 values of household.building_id are set to -1.
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: completed...0.1 sec
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: started on Mon Jun 27 18:51:24 2011
                    0 values of job.building_id are set to -1.
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: completed...0.1 sec
                2 buildings demolished.
                Creating object urbansim_parcel.datasets.velocity_function_dataset.VelocityFunctionDataset
                Creating object urbansim_parcel.datasets.development_project_proposal_component_dataset.DevelopmentProjectProposalComponentDataset
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                    used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                    urbansim_parcel.building.building_sqft...............0.0 sec
                building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.1 sec
                urbansim_parcel.parcel.is_land_use_type_SSS..............0.0 sec
                development_project_proposal_component.disaggregate(development_template.land_use_type_id, [development_project_proposal])
                    development_project_proposal.disaggregate(development_template.land_use_type_id)....0.0 sec
                development_project_proposal_component.disaggregate(development_template.land_use_type_id, [development_project_proposal]): completed...0.0 sec
                urbansim_parcel.development_project_proposal_component.units_proposed
                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                        urbansim_parcel.development_project_proposal.units_proposed
                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                urbansim_parcel.development_project_proposal.land_area_taken
                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)....0.0 sec
                                    land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                    land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                    parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                                urbansim_parcel.development_project_proposal.land_area_taken: completed...0.1 sec
                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.2 sec
                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.2 sec
                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.2 sec
                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)....0.0 sec
                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                    building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.2 sec
                land_area_taken = urbansim_parcel.development_project_proposal_component.percent_building_sqft * (development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.land_area_taken) / 100.)....0.0 sec
                construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed....0.0 sec
                1 new buildings built.
                building type 19: 1
                Number of new buildings by template ids:
                {15: 1}
            Running BuildingConstructionModel (from urbansim_parcel.models.building_construction_model): completed...1.2 sec
            Flushing parcel
            Flushing building
            Flushing development_project_proposal
            Creating object urbansim.datasets.household_characteristic_dataset.HouseholdCharacteristicDataset
            Running Household Transition Model with Persons Update (from urbansim_parcel.models.household_transition_model): started on Mon Jun 27 18:51:27 2011
                Difference in number of households: 2641 (original 266132, new 268773, created 2663, deleted 22)
                Number of unplaced households: 2680
                Created 1598 persons.
                WARNING: Number of persons in household set (665603) does not correspond to those in person set (535788).
            Running Household Transition Model with Persons Update (from urbansim_parcel.models.household_transition_model): completed...2.8 sec
            Flushing household
            Running Employment Transition Model (from urbansim.models.employment_transition_model): started on Mon Jun 27 18:51:30 2011
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                    urbansim.job.is_home_based_job.......................0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based
                    urbansim.job.is_non_home_based_job...................0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                Difference in number of jobs: -2223 (original 544202, new 541979, created 4580, deleted 6803)
                Number of unplaced jobs: 6119
            Running Employment Transition Model (from urbansim.models.employment_transition_model): completed...1.6 sec
            Flushing job
            Creating object urbansim.datasets.household_relocation_rate_dataset.HouseholdRelocationRateDataset
            Running Household Relocation Model (from urbansim.models.agent_relocation_model): started on Mon Jun 27 18:51:32 2011
                compute_probabilities ...
                WARNING: There are 119 households whose probability is un-specified by the rate dataset. Their probability is set to 0.
                compute_choices ...
                Number of movers: 74513
            Running Household Relocation Model (from urbansim.models.agent_relocation_model): completed...0.7 sec
            Flushing household
            zone_id = building.disaggregate(parcel.zone_id)..............0.1 sec
            Running Household Location Choice Model (from psrc_parcel.models.household_location_choice_model): started on Mon Jun 27 18:51:33 2011
                Total number of individuals: 74513
                HLCM chunk 1 out of 2.: started on Mon Jun 27 18:51:33 2011
                    Number of agents in this chunk: 37257
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.2 sec
                    Available capacity: 50024 units.
                    numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(numpy.logical_and(building.residential_units, building.sqft_per_unit), urbansim_parcel.building.unit_price > 0))
                        unit_price = building.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                        is_residential = (building.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                    numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(numpy.logical_and(building.residential_units, building.sqft_per_unit), urbansim_parcel.building.unit_price > 0)): completed...0.2 sec
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.1 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential
                        is_condo_residential=building.disaggregate(building_type.building_type_name=='condo_residential')
                            building_type.building_type_name=='condo_residential'....0.0 sec
                        is_condo_residential=building.disaggregate(building_type.building_type_name=='condo_residential'): completed...0.0 sec
                        urbansim.household.is_low_income.................0.0 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential: completed...0.1 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential
                        is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential')
                            building_type.building_type_name=='multi_family_residential'....0.0 sec
                        is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential'): completed...0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential: completed...0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)
                        is_single_family_residential=building.disaggregate(building_type.building_type_name == 'single_family_residential')
                            building_type.building_type_name=='single_family_residential'....0.0 sec
                        is_single_family_residential=building.disaggregate(building_type.building_type_name == 'single_family_residential'): completed...0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential): completed...0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)
                        urbansim_parcel.building.building_sqft...........0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft): completed...0.2 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.2 sec
                    ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit)
                        parcel_sqft_per_unit=safe_array_divide(building.disaggregate(parcel.parcel_sqft),building.residential_units)....0.1 sec
                    ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit): completed...0.1 sec
                    lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.5 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.5 sec
                    lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32): completed...0.5 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)
                            urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.1 sec
                        ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone): completed...0.1 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.2 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 3022 (in 6 iterations)
                HLCM chunk 1 out of 2.: completed.......................14.0 sec
                HLCM chunk 2 out of 2.: started on Mon Jun 27 18:51:47 2011
                    Number of agents in this chunk: 37256
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 51727 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.1 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.2 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.1 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 2780 (in 6 iterations)
                HLCM chunk 2 out of 2.: completed.......................12.9 sec
                number_of_households = building.number_of_agents(household)....0.1 sec
                Total number of individuals: 5802
                HLCM chunk 1 out of 1.: started on Mon Jun 27 18:52:00 2011
                    Number of agents in this chunk: 5802
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 17251 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.0 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.0 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.0 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.3 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.0 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 0 (in 5 iterations)
                HLCM chunk 1 out of 1.: completed........................1.5 sec
                number_of_households = building.number_of_agents(household)....0.1 sec
            Running Household Location Choice Model (from psrc_parcel.models.household_location_choice_model): completed...28.8 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing travel_data
            Creating object urbansim.datasets.job_relocation_rate_dataset.JobRelocationRateDataset
            Running Employment Relocation Model (from urbansim.models.agent_relocation_model): started on Mon Jun 27 18:52:02 2011
                compute_probabilities ...
                compute_choices ...
                Number of movers: 37835
            Running Employment Relocation Model (from urbansim.models.agent_relocation_model): completed...0.9 sec
            Flushing job
            'agents_grouping_attribute' set to job.building_type.
            zone_id = building.disaggregate(parcel.zone_id)..............0.1 sec
            Running Non_home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): started on Mon Jun 27 18:52:03 2011
                Total number of individuals: 37104
                Non_home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:52:03 2011
                    Number of agents in this chunk: 37104
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.4 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.8 sec
                            urbansim_parcel.building.building_sqft.......0.1 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...1.1 sec
                        urbansim_parcel.building.building_sqft_per_job...0.0 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...1.2 sec
                    Available capacity: 1493123 units.
                    building.non_residential_sqft>0......................0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.3 sec
                    far=(urbansim_parcel.building.building_sqft/urbansim_parcel.building.parcel_sqft).astype(float32)
                        parcel_sqft = building.disaggregate(parcel.parcel_sqft)....0.1 sec
                    far=(urbansim_parcel.building.building_sqft/urbansim_parcel.building.parcel_sqft).astype(float32): completed...0.1 sec
                    inugb = building.disaggregate(parcel.is_inside_urban_growth_boundary)*1....0.1 sec
                    is_commercial_building = urbansim.building.is_commercial
                        is_commercial=building.disaggregate(building_type.building_type_name =='commercial')
                            building_type.building_type_name=='commercial'....0.0 sec
                        is_commercial=building.disaggregate(building_type.building_type_name =='commercial'): completed...0.0 sec
                    is_commercial_building = urbansim.building.is_commercial: completed...0.0 sec
                    is_industrial_building = urbansim.building.is_industrial
                        is_industrial=building.disaggregate(building_type.building_type_name =='industrial')
                            building_type.building_type_name=='industrial'....0.0 sec
                        is_industrial=building.disaggregate(building_type.building_type_name =='industrial'): completed...0.0 sec
                    is_industrial_building = urbansim.building.is_industrial: completed...0.0 sec
                    is_near_art = building.disaggregate(psrc.parcel.is_near_arterial_in_gridcell)
                        psrc.parcel.SSS_in_gridcell
                            urbansim.gridcell.is_near_arterial...........0.0 sec
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    is_near_art = building.disaggregate(psrc.parcel.is_near_arterial_in_gridcell): completed...0.2 sec
                    is_near_highway = building.disaggregate(psrc.parcel.is_near_highway_in_gridcell)
                        psrc.parcel.SSS_in_gridcell
                            urbansim.gridcell.is_near_highway............0.0 sec
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    is_near_highway = building.disaggregate(psrc.parcel.is_near_highway_in_gridcell): completed...0.2 sec
                    is_office_building = urbansim.building.is_office
                        is_office=building.disaggregate(building_type.building_type_name =='office')
                            building_type.building_type_name=='office'...0.0 sec
                        is_office=building.disaggregate(building_type.building_type_name =='office'): completed...0.0 sec
                    is_office_building = urbansim.building.is_office: completed...0.0 sec
                    ln_bldgage=ln(urbansim_parcel.building.age_masked)
                        urbansim_parcel.building.age_masked
                            urbansim_parcel.building.has_valid_year_built....0.0 sec
                        urbansim_parcel.building.age_masked: completed...0.0 sec
                    ln_bldgage=ln(urbansim_parcel.building.age_masked): completed...0.0 sec
                    ln_unit_price_trunc = ln(where(building.disaggregate(urbansim_parcel.parcel.unit_price<1500),where(building.disaggregate(urbansim_parcel.parcel.unit_price<1),1,building.disaggregate(urbansim_parcel.parcel.unit_price)),1500))
                        urbansim_parcel.parcel.unit_price<1500...........0.0 sec
                        urbansim_parcel.parcel.unit_price<1..............0.0 sec
                    ln_unit_price_trunc = ln(where(building.disaggregate(urbansim_parcel.parcel.unit_price<1500),where(building.disaggregate(urbansim_parcel.parcel.unit_price<1),1,building.disaggregate(urbansim_parcel.parcel.unit_price)),1500)): completed...0.3 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD
                            urbansim_parcel.job.is_sector_DDD............0.0 sec
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD: completed...0.1 sec
                        zone.aggregate(parcel.parcel_sqft)/43560.0.......0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income))
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean)
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean): completed...0.3 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income)): completed...0.3 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.2 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.2 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    lngcdacbd=ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))....0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))
                        urbansim_parcel.zone.population_per_acre
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre)): completed...0.1 sec
                    lnsqft=ln(urbansim_parcel.building.building_sqft)....0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 1.: completed........11.9 sec
                urbansim_parcel.building.number_of_SSS_jobs
                    urbansim.job.is_building_type_SSS....................0.0 sec
                urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                urbansim_parcel.building.total_non_home_based_job_space..0.0 sec
                Total number of individuals: 3362
                Non_home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:52:15 2011
                    Number of agents in this chunk: 3362
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.4 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.8 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...1.0 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...1.0 sec
                    Available capacity: 1459383 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.1 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 1.: completed.........2.7 sec
                urbansim_parcel.building.number_of_SSS_jobs..............0.2 sec
                Total number of individuals: 3297
                Non_home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:52:18 2011
                    Number of agents in this chunk: 3297
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.4 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.8 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...1.0 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...1.0 sec
                    Available capacity: 1459318 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.1 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 1.: completed.........2.6 sec
                urbansim_parcel.building.number_of_SSS_jobs..............0.2 sec
            Running Non_home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): completed...17.9 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing travel_data
            'agents_grouping_attribute' set to job.building_type.
            zone_id = building.disaggregate(parcel.zone_id)..............0.1 sec
            Running Home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): started on Mon Jun 27 18:52:21 2011
                Total number of individuals: 731
                Home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:52:21 2011
                    Number of agents in this chunk: 731
                    urbansim_parcel.building.vacant_home_based_job_space
                        urbansim_parcel.building.total_home_based_job_space
                            sum_minimum_persons_and_2=building.aggregate(urbansim_parcel.household.minimum_persons_and_2)
                                urbansim_parcel.household.minimum_persons_and_2....0.0 sec
                            sum_minimum_persons_and_2=building.aggregate(urbansim_parcel.household.minimum_persons_and_2): completed...0.2 sec
                            is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential')....0.0 sec
                        urbansim_parcel.building.total_home_based_job_space: completed...0.3 sec
                        urbansim_parcel.building.number_of_SSS_jobs
                            urbansim.job.is_building_type_SSS............0.0 sec
                        urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                        WARNING: Negative values detected in function/method ''
                        WARNING: Minimum: -208.0. Negative values clipped to zero.
                    urbansim_parcel.building.vacant_home_based_job_space: completed...0.5 sec
                    Available capacity: 395338.0 units.
                    numpy.logical_and(building.residential_units, building.sqft_per_unit)....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    bias_hb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_home_based_job_space = urbansim_parcel.building.vacant_home_based_job_space/float(sum(urbansim_parcel.building.vacant_home_based_job_space))....0.1 sec
                            _log_weights_vacant_home_based_job_space = ln(building._normalized_weights_vacant_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_home_based_job_space = ln(1 - building._normalized_weights_vacant_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_hb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_home_based_job_space: completed...0.1 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income))....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.5 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.5 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.5 sec
                    lngcdacbd=ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))....0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))....0.0 sec
                    lnsqftunit=ln(urbansim_parcel.building.building_sqft_per_unit)
                        building_sqft_per_unit=safe_array_divide(urbansim_parcel.building.building_sqft,building.residential_units)
                            urbansim_parcel.building.building_sqft.......0.0 sec
                        building_sqft_per_unit=safe_array_divide(urbansim_parcel.building.building_sqft,building.residential_units): completed...0.0 sec
                    lnsqftunit=ln(urbansim_parcel.building.building_sqft_per_unit): completed...0.1 sec
                    unit_price = building.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 0 (in 2 iterations)
                Home_based ELCM chunk 1 out of 1.: completed.............1.5 sec
            Running Home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): completed...1.6 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Running Distribute Unplaced Jobs Model (from urbansim_parcel.models.distribute_unplaced_jobs_model): started on Mon Jun 27 18:52:23 2011
                urbansim.job.is_in_employment_sector_group_SSS...........3.8 sec
                Number of scalable jobs: 892
                urbansim_parcel.building.number_of_jobs_of_sector_DDD
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim_parcel.building.number_of_jobs_of_sector_DDD: completed...0.2 sec
                urbansim_parcel.building.number_of_jobs_of_sector_DDD
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim_parcel.building.number_of_jobs_of_sector_DDD: completed...0.2 sec
                is_governmental = building.disaggregate(building_type.generic_building_type_description == 'government')
                    building_type.generic_building_type_description=='government'....0.0 sec
                is_governmental = building.disaggregate(building_type.generic_building_type_description == 'government'): completed...0.1 sec
            Running Distribute Unplaced Jobs Model (from urbansim_parcel.models.distribute_unplaced_jobs_model): completed...4.4 sec
            Flushing building
            Flushing job
            Writing datasets to cache for year 2003: started on Mon Jun 27 18:52:28 2011
                Flushing travel_data
                Flushing development_project_proposal
                Flushing household
                Flushing development_template
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/development_templates doesn't exist and is created
                Flushing job_building_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/job_building_types doesn't exist and is created
                Flushing zone
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/zones doesn't exist and is created
                Flushing demolition_cost_per_sqft
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/demolition_cost_per_sqft doesn't exist and is created
                Flushing employment_sector_group
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/employment_adhoc_sector_groups doesn't exist and is created
                Flushing generic_land_use_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/generic_land_use_types doesn't exist and is created
                Flushing land_use_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/land_use_types doesn't exist and is created
                Flushing employment_sector
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/employment_sectors doesn't exist and is created
                Flushing dataset
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/employment_adhoc_sector_group_definitions doesn't exist and is created
                Flushing parcel
                Flushing gridcell
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/gridcells doesn't exist and is created
                Flushing target_vacancy
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/target_vacancies doesn't exist and is created
                Flushing urbansim_constant
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/urbansim_constants doesn't exist and is created
                Flushing job
                Flushing building
                Flushing development_constraint
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/development_constraints doesn't exist and is created
                Flushing development_template_component
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/development_template_components doesn't exist and is created
                Flushing person
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/persons doesn't exist and is created
                Flushing building_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/building_types doesn't exist and is created
                Flushing building_sqft_per_job
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2003/building_sqft_per_job doesn't exist and is created
            Writing datasets to cache for year 2003: completed...........3.3 sec
        Simulate year 2003: completed............................1 min, 27.8 sec
        Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/year_2003_log.txt
    Starting simulation for year 2003: completed.................1 min, 27.8 sec
Start simulation run: completed..................................1 min, 27.8 sec
Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
Running UrbanSim for year 2003 in new process: completed.........1 min, 28.5 sec
Running UrbanSim for year 2004 in new process: started on Mon Jun 27 18:52:31 2011
    Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
    Invoking: /usr/bin/python /home/christian/Documents/vibe2/src/3dparty/opus/src/urbansim/model_coordinators/model_system.py -r /tmp/tmpi7PtRu/resources.pickle --log-file-name run_multiprocess.log
Cache Directory set to: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47
Start simulation run: started on Mon Jun 27 18:52:31 2011
    random seed = (412315250,)
    Starting simulation for year 2004: started on Mon Jun 27 18:52:31 2011
        Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
        Logging to file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/year_2004_log.txt
        Simulate year 2004: started on Mon Jun 27 18:52:31 2011
            Creating object urbansim.datasets.travel_data_dataset.TravelDataDataset
            Creating object urbansim_parcel.datasets.building_dataset.BuildingDataset
            Creating object urbansim.datasets.job_building_type_dataset.JobBuildingTypeDataset
            Creating object urbansim_parcel.datasets.parcel_dataset.ParcelDataset
            Creating object urbansim.datasets.zone_dataset.ZoneDataset
            Creating object urbansim.datasets.household_dataset.HouseholdDataset
            Creating object urbansim_parcel.datasets.development_template_component_dataset.DevelopmentTemplateComponentDataset
            Creating object urbansim_parcel.datasets.development_template_dataset.DevelopmentTemplateDataset
            Creating object urbansim_parcel.datasets.person_dataset.PersonDataset
            Creating object urbansim.datasets.job_dataset.JobDataset
            Creating object urbansim.datasets.building_type_dataset.BuildingTypeDataset
            Running Real Estate Price Model (from urbansim.models.real_estate_price_model): started on Mon Jun 27 18:52:32 2011
                numpy.logical_or(urbansim_parcel.parcel.building_sqft, urbansim_parcel.parcel.is_land_use_type_vacant)
                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                        urbansim_parcel.building.building_sqft...........0.2 sec
                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.4 sec
                    urbansim_parcel.parcel.is_land_use_type_SSS
                        Creating object urbansim_parcel.datasets.land_use_type_dataset.LandUseTypeDataset
                    urbansim_parcel.parcel.is_land_use_type_SSS: completed...0.1 sec
                numpy.logical_or(urbansim_parcel.parcel.building_sqft, urbansim_parcel.parcel.is_land_use_type_vacant): completed...0.6 sec
                ln_unit_price=ln(urbansim_parcel.parcel.unit_price)......0.0 sec
                Total number of individuals: 163810
                REPM chunk 1 out of 1.: started on Mon Jun 27 18:52:32 2011
                    Number of agents in this chunk: 163810
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300
                        psrc.parcel.SSS_in_gridcell
                            Creating object urbansim.datasets.gridcell_dataset.GridcellDataset
                        psrc.parcel.SSS_in_gridcell: completed...........0.2 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300: completed...0.2 sec
                    art600 = psrc.parcel.distance_to_arterial_in_gridcell<600....0.0 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)
                        psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone....0.1 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone): completed...0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200: completed...0.1 sec
                    hwy2000 = psrc.parcel.distance_to_highway_in_gridcell<2000....0.0 sec
                    inugb = parcel.is_inside_urban_growth_boundary*1.....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built)
                            urbansim_parcel.building.has_valid_year_built....0.0 sec
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built): completed...0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940: completed...0.1 sec
                    ln_bldgage=(ln(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean))).astype(float32)
                        urbansim_parcel.building.age_masked..............0.0 sec
                    ln_bldgage=(ln(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean))).astype(float32): completed...0.1 sec
                    ln_invfar=(ln(parcel.parcel_sqft/(urbansim_parcel.parcel.building_sqft).astype(float32))).astype(float32)....0.1 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32)
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean)
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)
                                zone_id = building.disaggregate(parcel.zone_id)....0.1 sec
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id): completed...0.3 sec
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean): completed...0.4 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32): completed...0.5 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.6 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.7 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.7 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.7 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_walk....0.0 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32): completed...0.1 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_transit_walk....0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32): completed...0.1 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_walk....0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32): completed...0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_transit_walk....0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32): completed...0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            acres = zone.aggregate(parcel.parcel_sqft) / 43560.0 ....0.0 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32): completed...0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)
                        psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd
                            psrc.zone.generalized_cost_hbw_am_drive_alone_to_DDD
                                destination_id=129+0*zone.zone_id........0.0 sec
                            psrc.zone.generalized_cost_hbw_am_drive_alone_to_DDD: completed...0.0 sec
                        psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd: completed...0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32): completed...0.1 sec
                    lnlotsqft=(ln(parcel.parcel_sqft)).astype(float32)...0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.1 sec
                    lnsqft=(ln(urbansim_parcel.parcel.building_sqft)).astype(float32)....0.0 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32)
                        residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32): completed...0.1 sec
                REPM chunk 1 out of 1.: completed........................2.8 sec
            Running Real Estate Price Model (from urbansim.models.real_estate_price_model): completed...3.5 sec
            Flushing parcel
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/parcels doesn't exist and is created
            Flushing building
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/buildings doesn't exist and is created
            Flushing household
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/households doesn't exist and is created
            Flushing job
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/jobs doesn't exist and is created
            Flushing travel_data
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/travel_data doesn't exist and is created
            Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
            flter = numpy.logical_and(parcel.number_of_agents(development_project_proposal) == 0, urbansim_parcel.parcel.vacant_land_area > 0)
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                    used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.2 sec
            flter = numpy.logical_and(parcel.number_of_agents(development_project_proposal) == 0, urbansim_parcel.parcel.vacant_land_area > 0): completed...0.2 sec
            development_template.is_active > 0...........................0.0 sec
            WARNING: template_filter is set to development_template.is_active > 0, but there is an error when computing it: Incomplete variable specification for 'development_template.is_active' (missing package name, and variable is not in expression library not a lag variable).
            Creating proposals for new development: started on Mon Jun 27 18:52:38 2011
                Creating object urbansim.datasets.development_constraint_dataset.DevelopmentConstraintDataset
                urbansim_parcel.development_template.far.................0.1 sec
                urbansim_parcel.development_template.units_per_acre......0.0 sec
                Creating object urbansim_parcel.datasets.generic_land_use_type_dataset.GenericLandUseTypeDataset
                Matching 772 development constraints to 166524 parcels: started on Mon Jun 27 18:52:38 2011....5.2 sec
                generic_land_use_type_id=development_template.disaggregate(land_use_type.generic_land_use_type_id)....0.1 sec
                Combine parcels, templates and constraints: started on Mon Jun 27 18:52:43 2011....2.8 sec
                Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
                urbansim_parcel.development_project_proposal.is_size_fit
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)....1.3 sec
                    land_area_min=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_min)....0.2 sec
                    land_area_max=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_max)....0.2 sec
                urbansim_parcel.development_project_proposal.is_size_fit: completed...1.7 sec
                urbansim_parcel.development_project_proposal.units_proposed
                    urbansim_parcel.development_project_proposal.units_proposed_fraction
                        urbansim_parcel.development_project_proposal.land_area_taken
                            land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                            land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                        urbansim_parcel.development_project_proposal.land_area_taken: completed...0.0 sec
                        density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)
                            urbansim_parcel.development_template.density_converter....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter): completed...0.0 sec
                        usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                    urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.1 sec
                urbansim_parcel.development_project_proposal.units_proposed: completed...0.1 sec
                proposal set created with 81392 proposals.
            Creating proposals for new development: completed...........11.0 sec
            Creating proposals for re-development: started on Mon Jun 27 18:52:49 2011
                low_improvement_ratio_of_parcels_with_bldg=(parcel.number_of_agents(building)>0)*(urbansim_parcel.parcel.improvement_value / ( urbansim_parcel.parcel.unit_price * urbansim_parcel.parcel.existing_units ) < 0.1)*(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean)>30)
                    urbansim_parcel.parcel.existing_units
                        unit_name = parcel.disaggregate(land_use_type.unit_name)....0.1 sec
                        building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                            urbansim_parcel.building.building_sqft.......0.1 sec
                        building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.2 sec
                        residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                    urbansim_parcel.parcel.existing_units: completed.....0.3 sec
                    improvement_value =parcel.aggregate(building.improvement_value)....0.1 sec
                    urbansim_parcel.building.age_masked
                        urbansim_parcel.building.has_valid_year_built....0.0 sec
                    urbansim_parcel.building.age_masked: completed.......0.0 sec
                low_improvement_ratio_of_parcels_with_bldg=(parcel.number_of_agents(building)>0)*(urbansim_parcel.parcel.improvement_value / ( urbansim_parcel.parcel.unit_price * urbansim_parcel.parcel.existing_units ) < 0.1)*(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean)>30): completed...0.6 sec
                Matching 772 development constraints to 2794 parcels: started on Mon Jun 27 18:52:49 2011....0.1 sec
                Combine parcels, templates and constraints: started on Mon Jun 27 18:52:49 2011....0.0 sec
                Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
                urbansim_parcel.development_project_proposal.is_size_fit
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                            used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                    land_area_min=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_min)....0.0 sec
                    land_area_max=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_max)....0.0 sec
                urbansim_parcel.development_project_proposal.is_size_fit: completed...0.1 sec
                urbansim_parcel.development_project_proposal.units_proposed
                    urbansim_parcel.development_project_proposal.units_proposed_fraction
                        urbansim_parcel.development_project_proposal.land_area_taken
                            land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                            land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                        urbansim_parcel.development_project_proposal.land_area_taken: completed...0.0 sec
                        density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                        usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                    urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.0 sec
                urbansim_parcel.development_project_proposal.units_proposed: completed...0.0 sec
                proposal set created with 11619 proposals.
            Creating proposals for re-development: completed.............1.1 sec
            Running Development Project Proposal Regression Model (from urbansim_parcel.models.development_project_proposal_regression_model): started on Mon Jun 27 18:52:50 2011
                Creating object urbansim_parcel.datasets.development_project_proposal_component_dataset.DevelopmentProjectProposalComponentDataset
                Total number of individuals: 93011
                PDPRM chunk 1 out of 1.: started on Mon Jun 27 18:52:50 2011
                    Number of agents in this chunk: 93011
                    land_use_type_id=development_project_proposal.disaggregate(development_template.land_use_type_id)....0.0 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300: completed...0.1 sec
                    art300 = development_project_proposal.disaggregate(parcel.art300)....0.0 sec
                    art600 = psrc.parcel.distance_to_arterial_in_gridcell<600....0.0 sec
                    art600 = development_project_proposal.disaggregate(parcel.art600)....0.0 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)....0.0 sec
                    hbwavgtmda = development_project_proposal.disaggregate(parcel.hbwavgtmda)....0.0 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200: completed...0.1 sec
                    hwy200 = development_project_proposal.disaggregate(parcel.hwy200)....0.0 sec
                    hwy2000 = psrc.parcel.distance_to_highway_in_gridcell<2000....0.0 sec
                    hwy2000 = development_project_proposal.disaggregate(parcel.hwy2000)....0.0 sec
                    inugb = parcel.is_inside_urban_growth_boundary*1.....0.0 sec
                    inugb = development_project_proposal.disaggregate(parcel.inugb)....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built)....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940: completed...0.1 sec
                    is_pre_1940 = development_project_proposal.disaggregate(parcel.is_pre_1940)....0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_age).astype(float32))
                        urbansim_parcel.development_project_proposal.building_age
                            urbansim_parcel.development_project_proposal.has_valid_year_built....0.0 sec
                        urbansim_parcel.development_project_proposal.building_age: completed...0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_age).astype(float32)): completed...0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_sqft).astype(float32))
                        building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32)
                            building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32)
                                building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                                        urbansim_parcel.development_project_proposal.units_proposed
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                                urbansim_parcel.development_project_proposal.land_area_taken
                                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                                                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                                                            used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                                                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                                                    land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                                    land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                                    parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                                                urbansim_parcel.development_project_proposal.land_area_taken: completed...0.2 sec
                                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.2 sec
                                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.2 sec
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.2 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)
                                        urbansim_parcel.development_template.is_far....0.0 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far): completed...0.0 sec
                                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.3 sec
                            building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32): completed...0.3 sec
                        building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32): completed...0.3 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_sqft).astype(float32)): completed...0.3 sec
                    ln_bounded(safe_array_divide(development_project_proposal.disaggregate(parcel.parcel_sqft), (urbansim_parcel.development_project_proposal.building_sqft).astype(float32)))....0.1 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32)....0.0 sec
                    lnavginc = development_project_proposal.disaggregate(parcel.lnavginc)....0.0 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp10da = development_project_proposal.disaggregate(parcel.lnemp10da)....0.0 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32)....0.0 sec
                    lnemp10wa = development_project_proposal.disaggregate(parcel.lnemp10wa)....0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp20da = development_project_proposal.disaggregate(parcel.lnemp20da)....0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32)....0.0 sec
                    lnemp20tw = development_project_proposal.disaggregate(parcel.lnemp20tw)....0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32)....0.0 sec
                    lnemp20wa = development_project_proposal.disaggregate(parcel.lnemp20wa)....0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp30da = development_project_proposal.disaggregate(parcel.lnemp30da)....0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32)....0.0 sec
                    lnemp30tw = development_project_proposal.disaggregate(parcel.lnemp30tw)....0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)....0.0 sec
                    lnempden = development_project_proposal.disaggregate(parcel.lnempden)....0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)....0.0 sec
                    lngcdacbd = development_project_proposal.disaggregate(parcel.lngcdacbd)....0.0 sec
                    lnlotsqft=(ln(parcel.parcel_sqft)).astype(float32)...0.0 sec
                    lnlotsqft = development_project_proposal.disaggregate(parcel.lnlotsqft)....0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)....0.0 sec
                    lnpopden = development_project_proposal.disaggregate(parcel.lnpopden)....0.0 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32)....0.0 sec
                    lnunits = development_project_proposal.disaggregate(parcel.lnunits)....0.0 sec
                PDPRM chunk 1 out of 1.: completed.......................1.9 sec
            Running Development Project Proposal Regression Model (from urbansim_parcel.models.development_project_proposal_regression_model): completed...2.3 sec
            Flushing parcel
            Flushing building
            Flushing development_project_proposal_component
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/development_project_proposal_components doesn't exist and is created
            Flushing development_project_proposal
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/development_project_proposals doesn't exist and is created
            exp_roi = exp(urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment)
                urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment
                    total_investment = (urbansim_parcel.development_project_proposal.acquisition_cost + urbansim_parcel.development_project_proposal.demolition_cost + urbansim_parcel.development_project_proposal.construction_cost).astype(float32)
                        urbansim_parcel.development_project_proposal.acquisition_cost
                            unit_price = development_project_proposal.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                            existing_units = development_project_proposal.disaggregate(urbansim_parcel.parcel.existing_units)
                                urbansim_parcel.parcel.existing_units
                                    unit_name = parcel.disaggregate(land_use_type.unit_name)....0.0 sec
                                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                                        urbansim_parcel.building.building_sqft....0.1 sec
                                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.2 sec
                                    residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                                urbansim_parcel.parcel.existing_units: completed...0.4 sec
                            existing_units = development_project_proposal.disaggregate(urbansim_parcel.parcel.existing_units): completed...0.4 sec
                            improvement_value=development_project_proposal.disaggregate(urbansim_parcel.parcel.improvement_value)
                                improvement_value =parcel.aggregate(building.improvement_value)....0.1 sec
                            improvement_value=development_project_proposal.disaggregate(urbansim_parcel.parcel.improvement_value): completed...0.1 sec
                            urbansim_parcel.development_project_proposal.land_area_taken
                                vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                                    vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                                        used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                                    vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                                vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                                land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                            urbansim_parcel.development_project_proposal.land_area_taken: completed...0.3 sec
                            land_area=development_project_proposal.disaggregate(parcel.parcel_sqft)....0.0 sec
                        urbansim_parcel.development_project_proposal.acquisition_cost: completed...1.0 sec
                        construction_cost = development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.construction_cost)
                            construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed
                                urbansim_parcel.development_project_proposal_component.units_proposed
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                                        urbansim_parcel.development_project_proposal.units_proposed
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.0 sec
                                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.0 sec
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.0 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)....0.0 sec
                                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                                    building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.2 sec
                                component_construction_cost_per_unit = (development_template_component.construction_cost_per_unit * development_template_component.building_sqft_per_unit).astype(float32)....0.0 sec
                            construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.2 sec
                        construction_cost = development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.construction_cost): completed...0.2 sec
                        demolition_cost = development_project_proposal.disaggregate(urbansim_parcel.parcel.demolition_cost) * development_project_proposal.is_redevelopment
                            demolition_cost = (parcel.aggregate(urbansim_parcel.building.demolition_cost)).astype(int32)
                                urbansim_parcel.building.demolition_cost
                                    demolition_cost_per_sqft=building.disaggregate(demolition_cost_per_sqft.demolition_cost_per_sqft)
                                        Creating object urbansim_parcel.datasets.demolition_cost_per_sqft_dataset.DemolitionCostPerSqftDataset
                                    demolition_cost_per_sqft=building.disaggregate(demolition_cost_per_sqft.demolition_cost_per_sqft): completed...0.1 sec
                                urbansim_parcel.building.demolition_cost: completed...0.1 sec
                            demolition_cost = (parcel.aggregate(urbansim_parcel.building.demolition_cost)).astype(int32): completed...0.1 sec
                        demolition_cost = development_project_proposal.disaggregate(urbansim_parcel.parcel.demolition_cost) * development_project_proposal.is_redevelopment: completed...0.2 sec
                    total_investment = (urbansim_parcel.development_project_proposal.acquisition_cost + urbansim_parcel.development_project_proposal.demolition_cost + urbansim_parcel.development_project_proposal.construction_cost).astype(float32): completed...1.4 sec
                    profit = urbansim_parcel.development_project_proposal.total_revenue - urbansim_parcel.development_project_proposal.total_investment
                        total_revenue = (urbansim_parcel.development_project_proposal.building_sqft * development_project_proposal.unit_price_expected).astype(float32)
                            building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32)
                                building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32)....0.0 sec
                            building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32): completed...0.0 sec
                        total_revenue = (urbansim_parcel.development_project_proposal.building_sqft * development_project_proposal.unit_price_expected).astype(float32): completed...0.1 sec
                    profit = urbansim_parcel.development_project_proposal.total_revenue - urbansim_parcel.development_project_proposal.total_investment: completed...0.1 sec
                urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment: completed...1.4 sec
            exp_roi = exp(urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment): completed...1.5 sec
            Running urbansim_parcel.models.development_project_proposal_sampling_model.DevelopmentProjectProposalSamplingModel: started on Mon Jun 27 18:52:54 2011
                number_of_components = (development_project_proposal.number_of_agents(development_project_proposal_component)).astype(int32)....0.0 sec
                zone_id = development_project_proposal.disaggregate(parcel.zone_id)....0.1 sec
                occupied_units_for_jobs = urbansim_parcel.building.number_of_non_home_based_jobs
                    urbansim_parcel.building.number_of_SSS_jobs
                        urbansim.job.is_building_type_SSS................0.0 sec
                    urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                occupied_units_for_jobs = urbansim_parcel.building.number_of_non_home_based_jobs: completed...0.2 sec
                units_for_jobs = urbansim_parcel.building.total_non_home_based_job_space
                    urbansim_parcel.building.total_non_home_based_job_space
                        urbansim_parcel.building.building_sqft_per_job
                            Creating object urbansim_parcel.datasets.building_sqft_per_job_dataset.BuildingSqftPerJobDataset
                            zone_id = building.disaggregate(parcel.zone_id)....0.1 sec
                        urbansim_parcel.building.building_sqft_per_job: completed...0.1 sec
                    urbansim_parcel.building.total_non_home_based_job_space: completed...0.1 sec
                units_for_jobs = urbansim_parcel.building.total_non_home_based_job_space: completed...0.1 sec
                occupied_residential_units = urbansim_parcel.building.number_of_households
                    number_of_households = building.number_of_agents(household)....0.1 sec
                occupied_residential_units = urbansim_parcel.building.number_of_households: completed...0.1 sec
                is_residential = (building.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                Creating object urbansim_parcel.datasets.target_vacancy_dataset.TargetVacancyDataset
                is_residential = target_vacancy.disaggregate(building_type.is_residential)....0.0 sec
                Status of 0 development proposals set to active.
                Target/existing vacancy rates (reached using eligible proposals) by building type:
                3[commercial]: 0.732193783665 = ((existing_units:387463 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:103765) / units_stock:387463
                4[condo_residential]: 0.0599233144447 = ((existing_units:29471 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:27705) / units_stock:29471
                8[industrial]: 0.875037108872 = ((existing_units:303162 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:37884) / units_stock:303162
                12[multi_family_residential]: 0.0638134821533 = ((existing_units:110917 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:103839) / units_stock:110917
                13[office]: 0.63236892893 = ((existing_units:474628 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:174488) / units_stock:474628
                19[single_family_residential]: 7.33444327908e-06 = ((existing_units:136343 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:136342) / units_stock:136343
                20[tcu]: 0.761359921543 = ((existing_units:3059 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:730) / units_stock:3059
                21[warehousing]: 0.877935593071 = ((existing_units:430109 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:52501) / units_stock:430109
            Running urbansim_parcel.models.development_project_proposal_sampling_model.DevelopmentProjectProposalSamplingModel: completed...0.9 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing development_project_proposal_component
            Flushing development_project_proposal
            Running BuildingConstructionModel (from urbansim_parcel.models.building_construction_model): started on Mon Jun 27 18:52:55 2011
                Creating object urbansim_parcel.datasets.velocity_function_dataset.VelocityFunctionDataset
                No new buildings built.
            Running BuildingConstructionModel (from urbansim_parcel.models.building_construction_model): completed...0.0 sec
            Creating object urbansim.datasets.household_characteristic_dataset.HouseholdCharacteristicDataset
            Running Household Transition Model with Persons Update (from urbansim_parcel.models.household_transition_model): started on Mon Jun 27 18:52:55 2011
                Difference in number of households: 3605 (original 268773, new 272378, created 3609, deleted 4)
                Number of unplaced households: 3609
                Created 2109 persons.
                WARNING: Number of persons in household set (672651) does not correspond to those in person set (537895).
            Running Household Transition Model with Persons Update (from urbansim_parcel.models.household_transition_model): completed...2.9 sec
            Flushing household
            Running Employment Transition Model (from urbansim.models.employment_transition_model): started on Mon Jun 27 18:52:58 2011
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                    urbansim.job.is_home_based_job.......................0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based
                    urbansim.job.is_non_home_based_job...................0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                Difference in number of jobs: 7167 (original 541979, new 549146, created 11045, deleted 3878)
                Number of unplaced jobs: 13447
            Running Employment Transition Model (from urbansim.models.employment_transition_model): completed...1.8 sec
            Flushing job
            Creating object urbansim.datasets.household_relocation_rate_dataset.HouseholdRelocationRateDataset
            Running Household Relocation Model (from urbansim.models.agent_relocation_model): started on Mon Jun 27 18:53:00 2011
                compute_probabilities ...
                WARNING: There are 121 households whose probability is un-specified by the rate dataset. Their probability is set to 0.
                compute_choices ...
                Number of movers: 76299
            Running Household Relocation Model (from urbansim.models.agent_relocation_model): completed...0.7 sec
            Flushing household
            zone_id = building.disaggregate(parcel.zone_id)..............0.1 sec
            Running Household Location Choice Model (from psrc_parcel.models.household_location_choice_model): started on Mon Jun 27 18:53:01 2011
                Total number of individuals: 76299
                HLCM chunk 1 out of 2.: started on Mon Jun 27 18:53:01 2011
                    Number of agents in this chunk: 38150
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.2 sec
                    Available capacity: 47780 units.
                    numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(numpy.logical_and(building.residential_units, building.sqft_per_unit), urbansim_parcel.building.unit_price > 0))
                        unit_price = building.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                        is_residential = (building.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                    numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(numpy.logical_and(building.residential_units, building.sqft_per_unit), urbansim_parcel.building.unit_price > 0)): completed...0.2 sec
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.1 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential
                        is_condo_residential=building.disaggregate(building_type.building_type_name=='condo_residential')
                            building_type.building_type_name=='condo_residential'....0.0 sec
                        is_condo_residential=building.disaggregate(building_type.building_type_name=='condo_residential'): completed...0.0 sec
                        urbansim.household.is_low_income.................0.0 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential: completed...0.3 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential
                        is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential')
                            building_type.building_type_name=='multi_family_residential'....0.0 sec
                        is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential'): completed...0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential: completed...0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)
                        is_single_family_residential=building.disaggregate(building_type.building_type_name == 'single_family_residential')
                            building_type.building_type_name=='single_family_residential'....0.0 sec
                        is_single_family_residential=building.disaggregate(building_type.building_type_name == 'single_family_residential'): completed...0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential): completed...0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)
                        urbansim_parcel.building.building_sqft...........0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft): completed...0.2 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.2 sec
                    ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit)
                        parcel_sqft_per_unit=safe_array_divide(building.disaggregate(parcel.parcel_sqft),building.residential_units)....0.1 sec
                    ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit): completed...0.1 sec
                    lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.4 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.4 sec
                    lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32): completed...0.4 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)
                            urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.1 sec
                        ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone): completed...0.1 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.2 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 3560 (in 6 iterations)
                HLCM chunk 1 out of 2.: completed.......................14.4 sec
                HLCM chunk 2 out of 2.: started on Mon Jun 27 18:53:15 2011
                    Number of agents in this chunk: 38149
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 49553 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.1 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.2 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.1 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 3335 (in 6 iterations)
                HLCM chunk 2 out of 2.: completed.......................13.0 sec
                number_of_households = building.number_of_agents(household)....0.1 sec
                Total number of individuals: 6895
                HLCM chunk 1 out of 1.: started on Mon Jun 27 18:53:29 2011
                    Number of agents in this chunk: 6895
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 14739 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.0 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.0 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.0 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.0 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 9 (in 5 iterations)
                HLCM chunk 1 out of 1.: completed........................1.5 sec
                number_of_households = building.number_of_agents(household)....0.1 sec
                Total number of individuals: 9
                HLCM chunk 1 out of 1.: started on Mon Jun 27 18:53:30 2011
                    Number of agents in this chunk: 9
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 7853 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.0 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.0 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.0 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.0 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                HLCM chunk 1 out of 1.: completed........................0.6 sec
                number_of_households = building.number_of_agents(household)....0.1 sec
            Running Household Location Choice Model (from psrc_parcel.models.household_location_choice_model): completed...30.1 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing travel_data
            Creating object urbansim.datasets.job_relocation_rate_dataset.JobRelocationRateDataset
            Running Employment Relocation Model (from urbansim.models.agent_relocation_model): started on Mon Jun 27 18:53:31 2011
                compute_probabilities ...
                compute_choices ...
                Number of movers: 44914
            Running Employment Relocation Model (from urbansim.models.agent_relocation_model): completed...0.8 sec
            Flushing job
            'agents_grouping_attribute' set to job.building_type.
            zone_id = building.disaggregate(parcel.zone_id)..............0.1 sec
            Running Non_home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): started on Mon Jun 27 18:53:32 2011
                Total number of individuals: 44062
                Non_home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:53:32 2011
                    Number of agents in this chunk: 44062
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.3 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.6 sec
                            urbansim_parcel.building.building_sqft.......0.1 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...0.9 sec
                        urbansim_parcel.building.building_sqft_per_job...0.0 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...0.9 sec
                    Available capacity: 1484204 units.
                    building.non_residential_sqft>0......................0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.2 sec
                    far=(urbansim_parcel.building.building_sqft/urbansim_parcel.building.parcel_sqft).astype(float32)
                        parcel_sqft = building.disaggregate(parcel.parcel_sqft)....0.1 sec
                    far=(urbansim_parcel.building.building_sqft/urbansim_parcel.building.parcel_sqft).astype(float32): completed...0.1 sec
                    inugb = building.disaggregate(parcel.is_inside_urban_growth_boundary)*1....0.1 sec
                    is_commercial_building = urbansim.building.is_commercial
                        is_commercial=building.disaggregate(building_type.building_type_name =='commercial')
                            building_type.building_type_name=='commercial'....0.0 sec
                        is_commercial=building.disaggregate(building_type.building_type_name =='commercial'): completed...0.0 sec
                    is_commercial_building = urbansim.building.is_commercial: completed...0.0 sec
                    is_industrial_building = urbansim.building.is_industrial
                        is_industrial=building.disaggregate(building_type.building_type_name =='industrial')
                            building_type.building_type_name=='industrial'....0.0 sec
                        is_industrial=building.disaggregate(building_type.building_type_name =='industrial'): completed...0.0 sec
                    is_industrial_building = urbansim.building.is_industrial: completed...0.0 sec
                    is_near_art = building.disaggregate(psrc.parcel.is_near_arterial_in_gridcell)
                        psrc.parcel.SSS_in_gridcell
                            urbansim.gridcell.is_near_arterial...........0.0 sec
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    is_near_art = building.disaggregate(psrc.parcel.is_near_arterial_in_gridcell): completed...0.2 sec
                    is_near_highway = building.disaggregate(psrc.parcel.is_near_highway_in_gridcell)
                        psrc.parcel.SSS_in_gridcell
                            urbansim.gridcell.is_near_highway............0.0 sec
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    is_near_highway = building.disaggregate(psrc.parcel.is_near_highway_in_gridcell): completed...0.1 sec
                    is_office_building = urbansim.building.is_office
                        is_office=building.disaggregate(building_type.building_type_name =='office')
                            building_type.building_type_name=='office'...0.0 sec
                        is_office=building.disaggregate(building_type.building_type_name =='office'): completed...0.0 sec
                    is_office_building = urbansim.building.is_office: completed...0.0 sec
                    ln_bldgage=ln(urbansim_parcel.building.age_masked)
                        urbansim_parcel.building.age_masked
                            urbansim_parcel.building.has_valid_year_built....0.0 sec
                        urbansim_parcel.building.age_masked: completed...0.0 sec
                    ln_bldgage=ln(urbansim_parcel.building.age_masked): completed...0.0 sec
                    ln_unit_price_trunc = ln(where(building.disaggregate(urbansim_parcel.parcel.unit_price<1500),where(building.disaggregate(urbansim_parcel.parcel.unit_price<1),1,building.disaggregate(urbansim_parcel.parcel.unit_price)),1500))
                        urbansim_parcel.parcel.unit_price<1..............0.0 sec
                        urbansim_parcel.parcel.unit_price<1500...........0.0 sec
                    ln_unit_price_trunc = ln(where(building.disaggregate(urbansim_parcel.parcel.unit_price<1500),where(building.disaggregate(urbansim_parcel.parcel.unit_price<1),1,building.disaggregate(urbansim_parcel.parcel.unit_price)),1500)): completed...0.3 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD
                            urbansim_parcel.job.is_sector_DDD............0.0 sec
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD: completed...0.0 sec
                        zone.aggregate(parcel.parcel_sqft)/43560.0.......0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income))
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean)
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean): completed...0.2 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income)): completed...0.3 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.2 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.2 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    lngcdacbd=ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))....0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))
                        urbansim_parcel.zone.population_per_acre
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre)): completed...0.1 sec
                    lnsqft=ln(urbansim_parcel.building.building_sqft)....0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 1.: completed........12.4 sec
                urbansim_parcel.building.number_of_SSS_jobs
                    urbansim.job.is_building_type_SSS....................0.0 sec
                urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                urbansim_parcel.building.total_non_home_based_job_space..0.0 sec
                Total number of individuals: 6130
                Non_home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:53:45 2011
                    Number of agents in this chunk: 6130
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.3 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.6 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...0.8 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...0.8 sec
                    Available capacity: 1446272 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.1 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 1.: completed.........2.8 sec
                urbansim_parcel.building.number_of_SSS_jobs..............0.2 sec
                Total number of individuals: 6007
                Non_home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:53:48 2011
                    Number of agents in this chunk: 6007
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.3 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.6 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...0.8 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...0.8 sec
                    Available capacity: 1446149 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.1 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 1.: completed.........2.6 sec
                urbansim_parcel.building.number_of_SSS_jobs..............0.2 sec
            Running Non_home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): completed...18.5 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing travel_data
            'agents_grouping_attribute' set to job.building_type.
            zone_id = building.disaggregate(parcel.zone_id)..............0.1 sec
            Running Home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): started on Mon Jun 27 18:53:51 2011
                Total number of individuals: 852
                Home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:53:51 2011
                    Number of agents in this chunk: 852
                    urbansim_parcel.building.vacant_home_based_job_space
                        urbansim_parcel.building.total_home_based_job_space
                            sum_minimum_persons_and_2=building.aggregate(urbansim_parcel.household.minimum_persons_and_2)
                                urbansim_parcel.household.minimum_persons_and_2....0.0 sec
                            sum_minimum_persons_and_2=building.aggregate(urbansim_parcel.household.minimum_persons_and_2): completed...0.2 sec
                            is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential')....0.0 sec
                        urbansim_parcel.building.total_home_based_job_space: completed...0.3 sec
                        urbansim_parcel.building.number_of_SSS_jobs
                            urbansim.job.is_building_type_SSS............0.0 sec
                        urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                        WARNING: Negative values detected in function/method ''
                        WARNING: Minimum: -189.0. Negative values clipped to zero.
                    urbansim_parcel.building.vacant_home_based_job_space: completed...0.5 sec
                    Available capacity: 396435.0 units.
                    numpy.logical_and(building.residential_units, building.sqft_per_unit)....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    bias_hb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_home_based_job_space = urbansim_parcel.building.vacant_home_based_job_space/float(sum(urbansim_parcel.building.vacant_home_based_job_space))....0.1 sec
                            _log_weights_vacant_home_based_job_space = ln(building._normalized_weights_vacant_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_home_based_job_space = ln(1 - building._normalized_weights_vacant_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_hb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_home_based_job_space: completed...0.1 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income))....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.4 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.4 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.4 sec
                    lngcdacbd=ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))....0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))....0.0 sec
                    lnsqftunit=ln(urbansim_parcel.building.building_sqft_per_unit)
                        building_sqft_per_unit=safe_array_divide(urbansim_parcel.building.building_sqft,building.residential_units)
                            urbansim_parcel.building.building_sqft.......0.0 sec
                        building_sqft_per_unit=safe_array_divide(urbansim_parcel.building.building_sqft,building.residential_units): completed...0.0 sec
                    lnsqftunit=ln(urbansim_parcel.building.building_sqft_per_unit): completed...0.1 sec
                    unit_price = building.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                Home_based ELCM chunk 1 out of 1.: completed.............1.3 sec
            Running Home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): completed...1.4 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Running Distribute Unplaced Jobs Model (from urbansim_parcel.models.distribute_unplaced_jobs_model): started on Mon Jun 27 18:53:53 2011
                urbansim.job.is_in_employment_sector_group_SSS...........3.5 sec
                Number of scalable jobs: 2479
                urbansim_parcel.building.number_of_jobs_of_sector_DDD
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim_parcel.building.number_of_jobs_of_sector_DDD: completed...0.2 sec
                is_governmental = building.disaggregate(building_type.generic_building_type_description == 'government')
                    building_type.generic_building_type_description=='government'....0.0 sec
                is_governmental = building.disaggregate(building_type.generic_building_type_description == 'government'): completed...0.1 sec
            Running Distribute Unplaced Jobs Model (from urbansim_parcel.models.distribute_unplaced_jobs_model): completed...3.8 sec
            Flushing building
            Flushing job
            Writing datasets to cache for year 2004: started on Mon Jun 27 18:53:57 2011
                Flushing travel_data
                Flushing development_project_proposal
                Flushing household
                Flushing development_template
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/development_templates doesn't exist and is created
                Flushing job_building_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/job_building_types doesn't exist and is created
                Flushing zone
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/zones doesn't exist and is created
                Flushing demolition_cost_per_sqft
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/demolition_cost_per_sqft doesn't exist and is created
                Flushing employment_sector_group
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/employment_adhoc_sector_groups doesn't exist and is created
                Flushing generic_land_use_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/generic_land_use_types doesn't exist and is created
                Flushing land_use_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/land_use_types doesn't exist and is created
                Flushing employment_sector
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/employment_sectors doesn't exist and is created
                Flushing dataset
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/employment_adhoc_sector_group_definitions doesn't exist and is created
                Flushing parcel
                Flushing gridcell
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/gridcells doesn't exist and is created
                Flushing target_vacancy
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/target_vacancies doesn't exist and is created
                Flushing urbansim_constant
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/urbansim_constants doesn't exist and is created
                Flushing job
                Flushing development_project_proposal_component
                Flushing building
                Flushing development_constraint
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/development_constraints doesn't exist and is created
                Flushing development_template_component
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/development_template_components doesn't exist and is created
                Flushing person
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/persons doesn't exist and is created
                Flushing building_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/building_types doesn't exist and is created
                Flushing building_sqft_per_job
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2004/building_sqft_per_job doesn't exist and is created
            Writing datasets to cache for year 2004: completed...........3.2 sec
        Simulate year 2004: completed............................1 min, 28.7 sec
        Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/year_2004_log.txt
    Starting simulation for year 2004: completed.................1 min, 28.7 sec
Start simulation run: completed..................................1 min, 28.7 sec
Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
Running UrbanSim for year 2004 in new process: completed.........1 min, 29.1 sec
Running UrbanSim for year 2005 in new process: started on Mon Jun 27 18:54:00 2011
    Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
    Invoking: /usr/bin/python /home/christian/Documents/vibe2/src/3dparty/opus/src/urbansim/model_coordinators/model_system.py -r /tmp/tmpdIcT39/resources.pickle --log-file-name run_multiprocess.log
Cache Directory set to: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47
Start simulation run: started on Mon Jun 27 18:54:00 2011
    random seed = (125977543,)
    Starting simulation for year 2005: started on Mon Jun 27 18:54:00 2011
        Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
        Logging to file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/year_2005_log.txt
        Simulate year 2005: started on Mon Jun 27 18:54:00 2011
            Creating object urbansim.datasets.travel_data_dataset.TravelDataDataset
            Creating object urbansim_parcel.datasets.building_dataset.BuildingDataset
            Creating object urbansim.datasets.job_building_type_dataset.JobBuildingTypeDataset
            Creating object urbansim_parcel.datasets.parcel_dataset.ParcelDataset
            Creating object urbansim.datasets.zone_dataset.ZoneDataset
            Creating object urbansim.datasets.household_dataset.HouseholdDataset
            Creating object urbansim_parcel.datasets.development_template_component_dataset.DevelopmentTemplateComponentDataset
            Creating object urbansim_parcel.datasets.development_template_dataset.DevelopmentTemplateDataset
            Creating object urbansim_parcel.datasets.person_dataset.PersonDataset
            Creating object urbansim.datasets.job_dataset.JobDataset
            Creating object urbansim.datasets.building_type_dataset.BuildingTypeDataset
            Running Real Estate Price Model (from urbansim.models.real_estate_price_model): started on Mon Jun 27 18:54:01 2011
                numpy.logical_or(urbansim_parcel.parcel.building_sqft, urbansim_parcel.parcel.is_land_use_type_vacant)
                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                        urbansim_parcel.building.building_sqft...........0.1 sec
                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.4 sec
                    urbansim_parcel.parcel.is_land_use_type_SSS
                        Creating object urbansim_parcel.datasets.land_use_type_dataset.LandUseTypeDataset
                    urbansim_parcel.parcel.is_land_use_type_SSS: completed...0.1 sec
                numpy.logical_or(urbansim_parcel.parcel.building_sqft, urbansim_parcel.parcel.is_land_use_type_vacant): completed...0.5 sec
                ln_unit_price=ln(urbansim_parcel.parcel.unit_price)......0.0 sec
                Total number of individuals: 163810
                REPM chunk 1 out of 1.: started on Mon Jun 27 18:54:01 2011
                    Number of agents in this chunk: 163810
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300
                        psrc.parcel.SSS_in_gridcell
                            Creating object urbansim.datasets.gridcell_dataset.GridcellDataset
                        psrc.parcel.SSS_in_gridcell: completed...........0.2 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300: completed...0.2 sec
                    art600 = psrc.parcel.distance_to_arterial_in_gridcell<600....0.0 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)
                        psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone....0.1 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone): completed...0.2 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200: completed...0.1 sec
                    hwy2000 = psrc.parcel.distance_to_highway_in_gridcell<2000....0.0 sec
                    inugb = parcel.is_inside_urban_growth_boundary*1.....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built)
                            urbansim_parcel.building.has_valid_year_built....0.0 sec
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built): completed...0.1 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940: completed...0.1 sec
                    ln_bldgage=(ln(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean))).astype(float32)
                        urbansim_parcel.building.age_masked..............0.0 sec
                    ln_bldgage=(ln(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean))).astype(float32): completed...0.1 sec
                    ln_invfar=(ln(parcel.parcel_sqft/(urbansim_parcel.parcel.building_sqft).astype(float32))).astype(float32)....0.1 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32)
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean)
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)
                                zone_id = building.disaggregate(parcel.zone_id)....0.1 sec
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id): completed...0.3 sec
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean): completed...0.4 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32): completed...0.4 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.5 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.6 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.6 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.7 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_walk....0.0 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32): completed...0.1 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_transit_walk....0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32): completed...0.1 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_walk....0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32): completed...0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_transit_walk....0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32): completed...0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            acres = zone.aggregate(parcel.parcel_sqft) / 43560.0 ....0.0 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32): completed...0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)
                        psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd
                            psrc.zone.generalized_cost_hbw_am_drive_alone_to_DDD
                                destination_id=129+0*zone.zone_id........0.0 sec
                            psrc.zone.generalized_cost_hbw_am_drive_alone_to_DDD: completed...0.0 sec
                        psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd: completed...0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32): completed...0.1 sec
                    lnlotsqft=(ln(parcel.parcel_sqft)).astype(float32)...0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.1 sec
                    lnsqft=(ln(urbansim_parcel.parcel.building_sqft)).astype(float32)....0.0 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32)
                        residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32): completed...0.1 sec
                REPM chunk 1 out of 1.: completed........................2.7 sec
            Running Real Estate Price Model (from urbansim.models.real_estate_price_model): completed...3.4 sec
            Flushing parcel
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/parcels doesn't exist and is created
            Flushing building
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/buildings doesn't exist and is created
            Flushing household
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/households doesn't exist and is created
            Flushing job
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/jobs doesn't exist and is created
            Flushing travel_data
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/travel_data doesn't exist and is created
            Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
            flter = numpy.logical_and(parcel.number_of_agents(development_project_proposal) == 0, urbansim_parcel.parcel.vacant_land_area > 0)
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                    used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.2 sec
            flter = numpy.logical_and(parcel.number_of_agents(development_project_proposal) == 0, urbansim_parcel.parcel.vacant_land_area > 0): completed...0.2 sec
            development_template.is_active > 0...........................0.0 sec
            WARNING: template_filter is set to development_template.is_active > 0, but there is an error when computing it: Incomplete variable specification for 'development_template.is_active' (missing package name, and variable is not in expression library not a lag variable).
            Creating proposals for new development: started on Mon Jun 27 18:54:07 2011
                Creating object urbansim.datasets.development_constraint_dataset.DevelopmentConstraintDataset
                urbansim_parcel.development_template.far.................0.1 sec
                urbansim_parcel.development_template.units_per_acre......0.0 sec
                Creating object urbansim_parcel.datasets.generic_land_use_type_dataset.GenericLandUseTypeDataset
                Matching 772 development constraints to 166524 parcels: started on Mon Jun 27 18:54:07 2011....4.6 sec
                generic_land_use_type_id=development_template.disaggregate(land_use_type.generic_land_use_type_id)....0.1 sec
                Combine parcels, templates and constraints: started on Mon Jun 27 18:54:12 2011....2.5 sec
                Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
                urbansim_parcel.development_project_proposal.is_size_fit
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)....1.2 sec
                    land_area_min=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_min)....0.2 sec
                    land_area_max=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_max)....0.2 sec
                urbansim_parcel.development_project_proposal.is_size_fit: completed...1.6 sec
                urbansim_parcel.development_project_proposal.units_proposed
                    urbansim_parcel.development_project_proposal.units_proposed_fraction
                        urbansim_parcel.development_project_proposal.land_area_taken
                            land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                            land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                        urbansim_parcel.development_project_proposal.land_area_taken: completed...0.0 sec
                        density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)
                            urbansim_parcel.development_template.density_converter....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter): completed...0.0 sec
                        usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                    urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.1 sec
                urbansim_parcel.development_project_proposal.units_proposed: completed...0.1 sec
                proposal set created with 81392 proposals.
            Creating proposals for new development: completed...........10.0 sec
            Creating proposals for re-development: started on Mon Jun 27 18:54:17 2011
                low_improvement_ratio_of_parcels_with_bldg=(parcel.number_of_agents(building)>0)*(urbansim_parcel.parcel.improvement_value / ( urbansim_parcel.parcel.unit_price * urbansim_parcel.parcel.existing_units ) < 0.1)*(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean)>30)
                    urbansim_parcel.parcel.existing_units
                        unit_name = parcel.disaggregate(land_use_type.unit_name)....0.1 sec
                        building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                            urbansim_parcel.building.building_sqft.......0.1 sec
                        building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.2 sec
                        residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                    urbansim_parcel.parcel.existing_units: completed.....0.3 sec
                    improvement_value =parcel.aggregate(building.improvement_value)....0.1 sec
                    urbansim_parcel.building.age_masked
                        urbansim_parcel.building.has_valid_year_built....0.0 sec
                    urbansim_parcel.building.age_masked: completed.......0.0 sec
                low_improvement_ratio_of_parcels_with_bldg=(parcel.number_of_agents(building)>0)*(urbansim_parcel.parcel.improvement_value / ( urbansim_parcel.parcel.unit_price * urbansim_parcel.parcel.existing_units ) < 0.1)*(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean)>30): completed...0.7 sec
                Matching 772 development constraints to 2831 parcels: started on Mon Jun 27 18:54:17 2011....0.1 sec
                Combine parcels, templates and constraints: started on Mon Jun 27 18:54:17 2011....0.1 sec
                Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
                urbansim_parcel.development_project_proposal.is_size_fit
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                            used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                    land_area_min=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_min)....0.0 sec
                    land_area_max=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_max)....0.0 sec
                urbansim_parcel.development_project_proposal.is_size_fit: completed...0.1 sec
                urbansim_parcel.development_project_proposal.units_proposed
                    urbansim_parcel.development_project_proposal.units_proposed_fraction
                        urbansim_parcel.development_project_proposal.land_area_taken
                            land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                            land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                        urbansim_parcel.development_project_proposal.land_area_taken: completed...0.0 sec
                        density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                        usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                    urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.0 sec
                urbansim_parcel.development_project_proposal.units_proposed: completed...0.0 sec
                proposal set created with 11847 proposals.
            Creating proposals for re-development: completed.............1.2 sec
            Running Development Project Proposal Regression Model (from urbansim_parcel.models.development_project_proposal_regression_model): started on Mon Jun 27 18:54:18 2011
                Creating object urbansim_parcel.datasets.development_project_proposal_component_dataset.DevelopmentProjectProposalComponentDataset
                Total number of individuals: 93239
                PDPRM chunk 1 out of 1.: started on Mon Jun 27 18:54:18 2011
                    Number of agents in this chunk: 93239
                    land_use_type_id=development_project_proposal.disaggregate(development_template.land_use_type_id)....0.0 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300: completed...0.1 sec
                    art300 = development_project_proposal.disaggregate(parcel.art300)....0.0 sec
                    art600 = psrc.parcel.distance_to_arterial_in_gridcell<600....0.0 sec
                    art600 = development_project_proposal.disaggregate(parcel.art600)....0.0 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)....0.0 sec
                    hbwavgtmda = development_project_proposal.disaggregate(parcel.hbwavgtmda)....0.0 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200: completed...0.1 sec
                    hwy200 = development_project_proposal.disaggregate(parcel.hwy200)....0.0 sec
                    hwy2000 = psrc.parcel.distance_to_highway_in_gridcell<2000....0.0 sec
                    hwy2000 = development_project_proposal.disaggregate(parcel.hwy2000)....0.0 sec
                    inugb = parcel.is_inside_urban_growth_boundary*1.....0.0 sec
                    inugb = development_project_proposal.disaggregate(parcel.inugb)....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built)....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940: completed...0.1 sec
                    is_pre_1940 = development_project_proposal.disaggregate(parcel.is_pre_1940)....0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_age).astype(float32))
                        urbansim_parcel.development_project_proposal.building_age
                            urbansim_parcel.development_project_proposal.has_valid_year_built....0.0 sec
                        urbansim_parcel.development_project_proposal.building_age: completed...0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_age).astype(float32)): completed...0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_sqft).astype(float32))
                        building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32)
                            building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32)
                                building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                                        urbansim_parcel.development_project_proposal.units_proposed
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                                urbansim_parcel.development_project_proposal.land_area_taken
                                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                                                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                                                            used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                                                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                                                    land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                                    land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                                    parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                                                urbansim_parcel.development_project_proposal.land_area_taken: completed...0.2 sec
                                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.2 sec
                                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.2 sec
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.2 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)
                                        urbansim_parcel.development_template.is_far....0.0 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far): completed...0.0 sec
                                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.3 sec
                            building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32): completed...0.3 sec
                        building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32): completed...0.4 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_sqft).astype(float32)): completed...0.4 sec
                    ln_bounded(safe_array_divide(development_project_proposal.disaggregate(parcel.parcel_sqft), (urbansim_parcel.development_project_proposal.building_sqft).astype(float32)))....0.1 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32)....0.0 sec
                    lnavginc = development_project_proposal.disaggregate(parcel.lnavginc)....0.0 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp10da = development_project_proposal.disaggregate(parcel.lnemp10da)....0.0 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32)....0.0 sec
                    lnemp10wa = development_project_proposal.disaggregate(parcel.lnemp10wa)....0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp20da = development_project_proposal.disaggregate(parcel.lnemp20da)....0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32)....0.0 sec
                    lnemp20tw = development_project_proposal.disaggregate(parcel.lnemp20tw)....0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32)....0.0 sec
                    lnemp20wa = development_project_proposal.disaggregate(parcel.lnemp20wa)....0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp30da = development_project_proposal.disaggregate(parcel.lnemp30da)....0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32)....0.0 sec
                    lnemp30tw = development_project_proposal.disaggregate(parcel.lnemp30tw)....0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)....0.0 sec
                    lnempden = development_project_proposal.disaggregate(parcel.lnempden)....0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)....0.0 sec
                    lngcdacbd = development_project_proposal.disaggregate(parcel.lngcdacbd)....0.0 sec
                    lnlotsqft=(ln(parcel.parcel_sqft)).astype(float32)...0.0 sec
                    lnlotsqft = development_project_proposal.disaggregate(parcel.lnlotsqft)....0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)....0.0 sec
                    lnpopden = development_project_proposal.disaggregate(parcel.lnpopden)....0.0 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32)....0.0 sec
                    lnunits = development_project_proposal.disaggregate(parcel.lnunits)....0.0 sec
                PDPRM chunk 1 out of 1.: completed.......................1.9 sec
            Running Development Project Proposal Regression Model (from urbansim_parcel.models.development_project_proposal_regression_model): completed...2.3 sec
            Flushing parcel
            Flushing building
            Flushing development_project_proposal_component
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/development_project_proposal_components doesn't exist and is created
            Flushing development_project_proposal
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/development_project_proposals doesn't exist and is created
            exp_roi = exp(urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment)
                urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment
                    total_investment = (urbansim_parcel.development_project_proposal.acquisition_cost + urbansim_parcel.development_project_proposal.demolition_cost + urbansim_parcel.development_project_proposal.construction_cost).astype(float32)
                        urbansim_parcel.development_project_proposal.acquisition_cost
                            unit_price = development_project_proposal.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                            existing_units = development_project_proposal.disaggregate(urbansim_parcel.parcel.existing_units)
                                urbansim_parcel.parcel.existing_units
                                    unit_name = parcel.disaggregate(land_use_type.unit_name)....0.0 sec
                                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                                        urbansim_parcel.building.building_sqft....0.1 sec
                                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.2 sec
                                    residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                                urbansim_parcel.parcel.existing_units: completed...0.4 sec
                            existing_units = development_project_proposal.disaggregate(urbansim_parcel.parcel.existing_units): completed...0.4 sec
                            improvement_value=development_project_proposal.disaggregate(urbansim_parcel.parcel.improvement_value)
                                improvement_value =parcel.aggregate(building.improvement_value)....0.1 sec
                            improvement_value=development_project_proposal.disaggregate(urbansim_parcel.parcel.improvement_value): completed...0.1 sec
                            urbansim_parcel.development_project_proposal.land_area_taken
                                vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                                    vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                                        used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                                    vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                                vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                                land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                            urbansim_parcel.development_project_proposal.land_area_taken: completed...0.3 sec
                            land_area=development_project_proposal.disaggregate(parcel.parcel_sqft)....0.0 sec
                        urbansim_parcel.development_project_proposal.acquisition_cost: completed...1.0 sec
                        construction_cost = development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.construction_cost)
                            construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed
                                urbansim_parcel.development_project_proposal_component.units_proposed
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                                        urbansim_parcel.development_project_proposal.units_proposed
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.0 sec
                                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.0 sec
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.1 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)....0.0 sec
                                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                                    building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.2 sec
                                component_construction_cost_per_unit = (development_template_component.construction_cost_per_unit * development_template_component.building_sqft_per_unit).astype(float32)....0.0 sec
                            construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.2 sec
                        construction_cost = development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.construction_cost): completed...0.3 sec
                        demolition_cost = development_project_proposal.disaggregate(urbansim_parcel.parcel.demolition_cost) * development_project_proposal.is_redevelopment
                            demolition_cost = (parcel.aggregate(urbansim_parcel.building.demolition_cost)).astype(int32)
                                urbansim_parcel.building.demolition_cost
                                    demolition_cost_per_sqft=building.disaggregate(demolition_cost_per_sqft.demolition_cost_per_sqft)
                                        Creating object urbansim_parcel.datasets.demolition_cost_per_sqft_dataset.DemolitionCostPerSqftDataset
                                    demolition_cost_per_sqft=building.disaggregate(demolition_cost_per_sqft.demolition_cost_per_sqft): completed...0.1 sec
                                urbansim_parcel.building.demolition_cost: completed...0.1 sec
                            demolition_cost = (parcel.aggregate(urbansim_parcel.building.demolition_cost)).astype(int32): completed...0.1 sec
                        demolition_cost = development_project_proposal.disaggregate(urbansim_parcel.parcel.demolition_cost) * development_project_proposal.is_redevelopment: completed...0.2 sec
                    total_investment = (urbansim_parcel.development_project_proposal.acquisition_cost + urbansim_parcel.development_project_proposal.demolition_cost + urbansim_parcel.development_project_proposal.construction_cost).astype(float32): completed...1.5 sec
                    profit = urbansim_parcel.development_project_proposal.total_revenue - urbansim_parcel.development_project_proposal.total_investment
                        total_revenue = (urbansim_parcel.development_project_proposal.building_sqft * development_project_proposal.unit_price_expected).astype(float32)
                            building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32)
                                building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32)....0.0 sec
                            building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32): completed...0.0 sec
                        total_revenue = (urbansim_parcel.development_project_proposal.building_sqft * development_project_proposal.unit_price_expected).astype(float32): completed...0.1 sec
                    profit = urbansim_parcel.development_project_proposal.total_revenue - urbansim_parcel.development_project_proposal.total_investment: completed...0.1 sec
                urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment: completed...1.6 sec
            exp_roi = exp(urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment): completed...1.6 sec
            Running urbansim_parcel.models.development_project_proposal_sampling_model.DevelopmentProjectProposalSamplingModel: started on Mon Jun 27 18:54:22 2011
                number_of_components = (development_project_proposal.number_of_agents(development_project_proposal_component)).astype(int32)....0.0 sec
                zone_id = development_project_proposal.disaggregate(parcel.zone_id)....0.1 sec
                occupied_units_for_jobs = urbansim_parcel.building.number_of_non_home_based_jobs
                    urbansim_parcel.building.number_of_SSS_jobs
                        urbansim.job.is_building_type_SSS................0.0 sec
                    urbansim_parcel.building.number_of_SSS_jobs: completed...0.3 sec
                occupied_units_for_jobs = urbansim_parcel.building.number_of_non_home_based_jobs: completed...0.3 sec
                units_for_jobs = urbansim_parcel.building.total_non_home_based_job_space
                    urbansim_parcel.building.total_non_home_based_job_space
                        urbansim_parcel.building.building_sqft_per_job
                            Creating object urbansim_parcel.datasets.building_sqft_per_job_dataset.BuildingSqftPerJobDataset
                            zone_id = building.disaggregate(parcel.zone_id)....0.1 sec
                        urbansim_parcel.building.building_sqft_per_job: completed...0.1 sec
                    urbansim_parcel.building.total_non_home_based_job_space: completed...0.1 sec
                units_for_jobs = urbansim_parcel.building.total_non_home_based_job_space: completed...0.1 sec
                occupied_residential_units = urbansim_parcel.building.number_of_households
                    number_of_households = building.number_of_agents(household)....0.2 sec
                occupied_residential_units = urbansim_parcel.building.number_of_households: completed...0.2 sec
                is_residential = (building.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                Creating object urbansim_parcel.datasets.target_vacancy_dataset.TargetVacancyDataset
                is_residential = target_vacancy.disaggregate(building_type.is_residential)....0.0 sec
                Sampling from 76694 eligible proposals with status 4.
                WARNING: Running out of proposals; there aren't any proposals with non-zero weight
                Status of 795 development proposals set to active.
                Target/existing vacancy rates (reached using eligible proposals) by building type:
                3[commercial]: 0.729334117999 = ((existing_units:387463 + 
                                              units_proposed:0 - units_to_be_demolished:37) 
                                              - units_occupied:104863) / units_stock:387426
                4[condo_residential]: 0.0702445696421 = ((existing_units:29471 + 
                                              units_proposed:1236 - units_to_be_demolished:0) 
                                              - units_occupied:28550) / units_stock:30707
                8[industrial]: 0.873559351106 = ((existing_units:303162 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:38332) / units_stock:303162
                12[multi_family_residential]: 0.0500182353517 = ((existing_units:110917 + 
                                              units_proposed:1528 - units_to_be_demolished:26) 
                                              - units_occupied:106796) / units_stock:112419
                13[office]: 0.627193795836 = ((existing_units:474628 + 
                                              units_proposed:0 - units_to_be_demolished:108) 
                                              - units_occupied:176904) / units_stock:474520
                19[single_family_residential]: 0.000161332903112 = ((existing_units:136343 + 
                                              units_proposed:67 - units_to_be_demolished:46) 
                                              - units_occupied:136342) / units_stock:136364
                20[tcu]: 0.751552795031 = ((existing_units:3059 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:760) / units_stock:3059
                21[warehousing]: 0.877514769512 = ((existing_units:430109 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:52682) / units_stock:430109
            Running urbansim_parcel.models.development_project_proposal_sampling_model.DevelopmentProjectProposalSamplingModel: completed...4.6 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing development_project_proposal_component
            Flushing development_project_proposal
            Running BuildingConstructionModel (from urbansim_parcel.models.building_construction_model): started on Mon Jun 27 18:54:27 2011
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: started on Mon Jun 27 18:54:27 2011
                    72 values of household.building_id are set to -1.
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: completed...0.1 sec
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: started on Mon Jun 27 18:54:27 2011
                    327 values of job.building_id are set to -1.
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: completed...0.2 sec
                24 buildings demolished.
                Creating object urbansim_parcel.datasets.velocity_function_dataset.VelocityFunctionDataset
                Creating object urbansim_parcel.datasets.development_project_proposal_component_dataset.DevelopmentProjectProposalComponentDataset
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                    used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                    urbansim_parcel.building.building_sqft...............0.0 sec
                building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.1 sec
                urbansim_parcel.parcel.is_land_use_type_SSS..............0.0 sec
                development_project_proposal_component.disaggregate(development_template.land_use_type_id, [development_project_proposal])
                    development_project_proposal.disaggregate(development_template.land_use_type_id)....0.0 sec
                development_project_proposal_component.disaggregate(development_template.land_use_type_id, [development_project_proposal]): completed...0.0 sec
                urbansim_parcel.development_project_proposal_component.units_proposed
                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                        urbansim_parcel.development_project_proposal.units_proposed
                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                urbansim_parcel.development_project_proposal.land_area_taken
                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)....0.0 sec
                                    land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                    land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                    parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                                urbansim_parcel.development_project_proposal.land_area_taken: completed...0.2 sec
                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.2 sec
                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.2 sec
                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.2 sec
                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)....0.0 sec
                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                    building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.2 sec
                land_area_taken = urbansim_parcel.development_project_proposal_component.percent_building_sqft * (development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.land_area_taken) / 100.)....0.0 sec
                construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed....0.0 sec
                795 new buildings built.
                building type 12: 507
                building type 19: 3
                building type 4: 285
                Number of new buildings by template ids:
                {139: 20, 140: 4, 17: 2, 18: 1, 149: 34, 150: 20, 53: 10, 54: 2, 55: 159, 56: 15, 57: 6, 58: 4, 59: 11, 60: 17, 61: 19, 62: 18, 85: 55, 86: 54, 87: 103, 88: 83, 89: 36, 90: 27, 91: 69, 92: 26}
            Running BuildingConstructionModel (from urbansim_parcel.models.building_construction_model): completed...1.6 sec
            Flushing parcel
            Flushing building
            Flushing development_project_proposal
            Creating object urbansim.datasets.household_characteristic_dataset.HouseholdCharacteristicDataset
            Running Household Transition Model with Persons Update (from urbansim_parcel.models.household_transition_model): started on Mon Jun 27 18:54:28 2011
                Difference in number of households: 3908 (original 272378, new 276286, created 3908, deleted 0)
                Number of unplaced households: 3980
                Created 2358 persons.
                WARNING: Number of persons in household set (680390) does not correspond to those in person set (540253).
            Running Household Transition Model with Persons Update (from urbansim_parcel.models.household_transition_model): completed...2.9 sec
            Flushing household
            Running Employment Transition Model (from urbansim.models.employment_transition_model): started on Mon Jun 27 18:54:31 2011
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                    urbansim.job.is_home_based_job.......................0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based
                    urbansim.job.is_non_home_based_job...................0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                Difference in number of jobs: 16068 (original 549146, new 565214, created 18501, deleted 2433)
                Number of unplaced jobs: 22154
            Running Employment Transition Model (from urbansim.models.employment_transition_model): completed...1.8 sec
            Flushing job
            Creating object urbansim.datasets.household_relocation_rate_dataset.HouseholdRelocationRateDataset
            Running Household Relocation Model (from urbansim.models.agent_relocation_model): started on Mon Jun 27 18:54:33 2011
                compute_probabilities ...
                WARNING: There are 121 households whose probability is un-specified by the rate dataset. Their probability is set to 0.
                compute_choices ...
                Number of movers: 77724
            Running Household Relocation Model (from urbansim.models.agent_relocation_model): completed...0.8 sec
            Flushing household
            zone_id = building.disaggregate(parcel.zone_id)..............0.1 sec
            Running Household Location Choice Model (from psrc_parcel.models.household_location_choice_model): started on Mon Jun 27 18:54:34 2011
                Total number of individuals: 77724
                HLCM chunk 1 out of 2.: started on Mon Jun 27 18:54:34 2011
                    Number of agents in this chunk: 38862
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.2 sec
                    Available capacity: 47520 units.
                    numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(numpy.logical_and(building.residential_units, building.sqft_per_unit), urbansim_parcel.building.unit_price > 0))
                        unit_price = building.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                        is_residential = (building.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                    numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(numpy.logical_and(building.residential_units, building.sqft_per_unit), urbansim_parcel.building.unit_price > 0)): completed...0.2 sec
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.1 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential
                        is_condo_residential=building.disaggregate(building_type.building_type_name=='condo_residential')
                            building_type.building_type_name=='condo_residential'....0.0 sec
                        is_condo_residential=building.disaggregate(building_type.building_type_name=='condo_residential'): completed...0.0 sec
                        urbansim.household.is_low_income.................0.0 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential: completed...0.1 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential
                        is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential')
                            building_type.building_type_name=='multi_family_residential'....0.0 sec
                        is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential'): completed...0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential: completed...0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)
                        is_single_family_residential=building.disaggregate(building_type.building_type_name == 'single_family_residential')
                            building_type.building_type_name=='single_family_residential'....0.0 sec
                        is_single_family_residential=building.disaggregate(building_type.building_type_name == 'single_family_residential'): completed...0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential): completed...0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)
                        urbansim_parcel.building.building_sqft...........0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft): completed...0.2 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.2 sec
                    ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit)
                        parcel_sqft_per_unit=safe_array_divide(building.disaggregate(parcel.parcel_sqft),building.residential_units)....0.1 sec
                    ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit): completed...0.1 sec
                    lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.5 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.5 sec
                    lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32): completed...0.5 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)
                            urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.1 sec
                        ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone): completed...0.1 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.2 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 2775 (in 6 iterations)
                HLCM chunk 1 out of 2.: completed.......................14.7 sec
                HLCM chunk 2 out of 2.: started on Mon Jun 27 18:54:49 2011
                    Number of agents in this chunk: 38862
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 48332 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.1 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.2 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.1 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 3534 (in 6 iterations)
                HLCM chunk 2 out of 2.: completed.......................14.2 sec
                number_of_households = building.number_of_agents(household)....0.1 sec
                Total number of individuals: 6309
                HLCM chunk 1 out of 1.: started on Mon Jun 27 18:55:03 2011
                    Number of agents in this chunk: 6309
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 13004 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.0 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.0 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.0 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.0 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 52 (in 6 iterations)
                HLCM chunk 1 out of 1.: completed........................1.5 sec
                number_of_households = building.number_of_agents(household)....0.1 sec
                Total number of individuals: 52
                HLCM chunk 1 out of 1.: started on Mon Jun 27 18:55:05 2011
                    Number of agents in this chunk: 52
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 6747 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.0 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.0 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.0 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.2 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.0 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                HLCM chunk 1 out of 1.: completed........................0.7 sec
                number_of_households = building.number_of_agents(household)....0.1 sec
            Running Household Location Choice Model (from psrc_parcel.models.household_location_choice_model): completed...31.7 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing travel_data
            Creating object urbansim.datasets.job_relocation_rate_dataset.JobRelocationRateDataset
            Running Employment Relocation Model (from urbansim.models.agent_relocation_model): started on Mon Jun 27 18:55:06 2011
                compute_probabilities ...
                compute_choices ...
                Number of movers: 54090
            Running Employment Relocation Model (from urbansim.models.agent_relocation_model): completed...0.8 sec
            Flushing job
            'agents_grouping_attribute' set to job.building_type.
            zone_id = building.disaggregate(parcel.zone_id)..............0.1 sec
            Running Non_home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): started on Mon Jun 27 18:55:07 2011
                Total number of individuals: 53124
                Non_home_based ELCM chunk 1 out of 2.: started on Mon Jun 27 18:55:07 2011
                    Number of agents in this chunk: 26562
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.4 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.8 sec
                            urbansim_parcel.building.building_sqft.......0.1 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...1.1 sec
                        urbansim_parcel.building.building_sqft_per_job...0.0 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...1.1 sec
                    Available capacity: 1458618 units.
                    building.non_residential_sqft>0......................0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.2 sec
                    far=(urbansim_parcel.building.building_sqft/urbansim_parcel.building.parcel_sqft).astype(float32)
                        parcel_sqft = building.disaggregate(parcel.parcel_sqft)....0.1 sec
                    far=(urbansim_parcel.building.building_sqft/urbansim_parcel.building.parcel_sqft).astype(float32): completed...0.1 sec
                    inugb = building.disaggregate(parcel.is_inside_urban_growth_boundary)*1....0.1 sec
                    is_commercial_building = urbansim.building.is_commercial
                        is_commercial=building.disaggregate(building_type.building_type_name =='commercial')
                            building_type.building_type_name=='commercial'....0.0 sec
                        is_commercial=building.disaggregate(building_type.building_type_name =='commercial'): completed...0.0 sec
                    is_commercial_building = urbansim.building.is_commercial: completed...0.0 sec
                    is_industrial_building = urbansim.building.is_industrial
                        is_industrial=building.disaggregate(building_type.building_type_name =='industrial')
                            building_type.building_type_name=='industrial'....0.0 sec
                        is_industrial=building.disaggregate(building_type.building_type_name =='industrial'): completed...0.0 sec
                    is_industrial_building = urbansim.building.is_industrial: completed...0.0 sec
                    is_near_art = building.disaggregate(psrc.parcel.is_near_arterial_in_gridcell)
                        psrc.parcel.SSS_in_gridcell
                            urbansim.gridcell.is_near_arterial...........0.0 sec
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    is_near_art = building.disaggregate(psrc.parcel.is_near_arterial_in_gridcell): completed...0.2 sec
                    is_near_highway = building.disaggregate(psrc.parcel.is_near_highway_in_gridcell)
                        psrc.parcel.SSS_in_gridcell
                            urbansim.gridcell.is_near_highway............0.0 sec
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    is_near_highway = building.disaggregate(psrc.parcel.is_near_highway_in_gridcell): completed...0.1 sec
                    is_office_building = urbansim.building.is_office
                        is_office=building.disaggregate(building_type.building_type_name =='office')
                            building_type.building_type_name=='office'...0.0 sec
                        is_office=building.disaggregate(building_type.building_type_name =='office'): completed...0.0 sec
                    is_office_building = urbansim.building.is_office: completed...0.0 sec
                    ln_bldgage=ln(urbansim_parcel.building.age_masked)
                        urbansim_parcel.building.age_masked
                            urbansim_parcel.building.has_valid_year_built....0.0 sec
                        urbansim_parcel.building.age_masked: completed...0.0 sec
                    ln_bldgage=ln(urbansim_parcel.building.age_masked): completed...0.0 sec
                    ln_unit_price_trunc = ln(where(building.disaggregate(urbansim_parcel.parcel.unit_price<1500),where(building.disaggregate(urbansim_parcel.parcel.unit_price<1),1,building.disaggregate(urbansim_parcel.parcel.unit_price)),1500))
                        urbansim_parcel.parcel.unit_price<1500...........0.0 sec
                        urbansim_parcel.parcel.unit_price<1..............0.0 sec
                    ln_unit_price_trunc = ln(where(building.disaggregate(urbansim_parcel.parcel.unit_price<1500),where(building.disaggregate(urbansim_parcel.parcel.unit_price<1),1,building.disaggregate(urbansim_parcel.parcel.unit_price)),1500)): completed...0.3 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD
                            urbansim_parcel.job.is_sector_DDD............0.0 sec
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD: completed...0.0 sec
                        zone.aggregate(parcel.parcel_sqft)/43560.0.......0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income))
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean)
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean): completed...0.3 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income)): completed...0.3 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.2 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.2 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    lngcdacbd=ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))....0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))
                        urbansim_parcel.zone.population_per_acre
                            population = zone.aggregate(household.persons)....0.1 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.1 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre)): completed...0.1 sec
                    lnsqft=ln(urbansim_parcel.building.building_sqft)....0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 2.: completed.........9.3 sec
                Non_home_based ELCM chunk 2 out of 2.: started on Mon Jun 27 18:55:17 2011
                    Number of agents in this chunk: 26562
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.3 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.7 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...0.9 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...0.9 sec
                    Available capacity: 1448448 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.2 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 2 out of 2.: completed.........7.7 sec
                urbansim_parcel.building.number_of_SSS_jobs
                    urbansim.job.is_building_type_SSS....................0.0 sec
                urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                urbansim_parcel.building.total_non_home_based_job_space..0.0 sec
                Total number of individuals: 8162
                Non_home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:55:25 2011
                    Number of agents in this chunk: 8162
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.4 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.8 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...0.9 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...0.9 sec
                    Available capacity: 1425941 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.1 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 1.: completed.........3.2 sec
                urbansim_parcel.building.number_of_SSS_jobs..............0.2 sec
                Total number of individuals: 8115
                Non_home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:55:28 2011
                    Number of agents in this chunk: 8115
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.4 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.8 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...0.9 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...0.9 sec
                    Available capacity: 1425894 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.1 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 1.: completed.........3.1 sec
                urbansim_parcel.building.number_of_SSS_jobs..............0.2 sec
            Running Non_home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): completed...24.0 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing travel_data
            'agents_grouping_attribute' set to job.building_type.
            zone_id = building.disaggregate(parcel.zone_id)..............0.2 sec
            Running Home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): started on Mon Jun 27 18:55:32 2011
                Total number of individuals: 966
                Home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:55:32 2011
                    Number of agents in this chunk: 966
                    urbansim_parcel.building.vacant_home_based_job_space
                        urbansim_parcel.building.total_home_based_job_space
                            sum_minimum_persons_and_2=building.aggregate(urbansim_parcel.household.minimum_persons_and_2)
                                urbansim_parcel.household.minimum_persons_and_2....0.0 sec
                            sum_minimum_persons_and_2=building.aggregate(urbansim_parcel.household.minimum_persons_and_2): completed...0.2 sec
                            is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential')....0.0 sec
                        urbansim_parcel.building.total_home_based_job_space: completed...0.3 sec
                        urbansim_parcel.building.number_of_SSS_jobs
                            urbansim.job.is_building_type_SSS............0.0 sec
                        urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                        WARNING: Negative values detected in function/method ''
                        WARNING: Minimum: -176.0. Negative values clipped to zero.
                    urbansim_parcel.building.vacant_home_based_job_space: completed...0.5 sec
                    Available capacity: 399802.0 units.
                    numpy.logical_and(building.residential_units, building.sqft_per_unit)....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    bias_hb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_home_based_job_space = urbansim_parcel.building.vacant_home_based_job_space/float(sum(urbansim_parcel.building.vacant_home_based_job_space))....0.1 sec
                            _log_weights_vacant_home_based_job_space = ln(building._normalized_weights_vacant_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_home_based_job_space = ln(1 - building._normalized_weights_vacant_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_hb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_home_based_job_space: completed...0.1 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income))....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.4 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.4 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.4 sec
                    lngcdacbd=ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))....0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))....0.0 sec
                    lnsqftunit=ln(urbansim_parcel.building.building_sqft_per_unit)
                        building_sqft_per_unit=safe_array_divide(urbansim_parcel.building.building_sqft,building.residential_units)
                            urbansim_parcel.building.building_sqft.......0.0 sec
                        building_sqft_per_unit=safe_array_divide(urbansim_parcel.building.building_sqft,building.residential_units): completed...0.1 sec
                    lnsqftunit=ln(urbansim_parcel.building.building_sqft_per_unit): completed...0.1 sec
                    unit_price = building.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 0 (in 2 iterations)
                Home_based ELCM chunk 1 out of 1.: completed.............1.5 sec
            Running Home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): completed...1.6 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Running Distribute Unplaced Jobs Model (from urbansim_parcel.models.distribute_unplaced_jobs_model): started on Mon Jun 27 18:55:33 2011
                urbansim.job.is_in_employment_sector_group_SSS...........3.5 sec
                Number of scalable jobs: 2646
                urbansim_parcel.building.number_of_jobs_of_sector_DDD
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim_parcel.building.number_of_jobs_of_sector_DDD: completed...0.2 sec
                is_governmental = building.disaggregate(building_type.generic_building_type_description == 'government')
                    building_type.generic_building_type_description=='government'....0.0 sec
                is_governmental = building.disaggregate(building_type.generic_building_type_description == 'government'): completed...0.1 sec
            Running Distribute Unplaced Jobs Model (from urbansim_parcel.models.distribute_unplaced_jobs_model): completed...3.8 sec
            Flushing building
            Flushing job
            Writing datasets to cache for year 2005: started on Mon Jun 27 18:55:37 2011
                Flushing travel_data
                Flushing development_project_proposal
                Flushing household
                Flushing development_template
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/development_templates doesn't exist and is created
                Flushing job_building_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/job_building_types doesn't exist and is created
                Flushing zone
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/zones doesn't exist and is created
                Flushing demolition_cost_per_sqft
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/demolition_cost_per_sqft doesn't exist and is created
                Flushing employment_sector_group
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/employment_adhoc_sector_groups doesn't exist and is created
                Flushing generic_land_use_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/generic_land_use_types doesn't exist and is created
                Flushing land_use_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/land_use_types doesn't exist and is created
                Flushing employment_sector
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/employment_sectors doesn't exist and is created
                Flushing dataset
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/employment_adhoc_sector_group_definitions doesn't exist and is created
                Flushing parcel
                Flushing gridcell
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/gridcells doesn't exist and is created
                Flushing target_vacancy
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/target_vacancies doesn't exist and is created
                Flushing urbansim_constant
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/urbansim_constants doesn't exist and is created
                Flushing job
                Flushing building
                Flushing development_constraint
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/development_constraints doesn't exist and is created
                Flushing development_template_component
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/development_template_components doesn't exist and is created
                Flushing person
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/persons doesn't exist and is created
                Flushing building_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/building_types doesn't exist and is created
                Flushing building_sqft_per_job
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2005/building_sqft_per_job doesn't exist and is created
            Writing datasets to cache for year 2005: completed...........3.2 sec
        Simulate year 2005: completed............................1 min, 40.2 sec
        Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/year_2005_log.txt
    Starting simulation for year 2005: completed.................1 min, 40.2 sec
Start simulation run: completed..................................1 min, 40.2 sec
Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
Running UrbanSim for year 2005 in new process: completed.........1 min, 40.6 sec
Running UrbanSim for year 2006 in new process: started on Mon Jun 27 18:55:41 2011
    Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
    Invoking: /usr/bin/python /home/christian/Documents/vibe2/src/3dparty/opus/src/urbansim/model_coordinators/model_system.py -r /tmp/tmpdJ3K1W/resources.pickle --log-file-name run_multiprocess.log
Cache Directory set to: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47
Start simulation run: started on Mon Jun 27 18:55:41 2011
    random seed = (656943583,)
    Starting simulation for year 2006: started on Mon Jun 27 18:55:41 2011
        Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
        Logging to file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/year_2006_log.txt
        Simulate year 2006: started on Mon Jun 27 18:55:41 2011
            Creating object urbansim.datasets.travel_data_dataset.TravelDataDataset
            Creating object urbansim_parcel.datasets.building_dataset.BuildingDataset
            Creating object urbansim.datasets.job_building_type_dataset.JobBuildingTypeDataset
            Creating object urbansim_parcel.datasets.parcel_dataset.ParcelDataset
            Creating object urbansim.datasets.zone_dataset.ZoneDataset
            Creating object urbansim.datasets.household_dataset.HouseholdDataset
            Creating object urbansim_parcel.datasets.development_template_component_dataset.DevelopmentTemplateComponentDataset
            Creating object urbansim_parcel.datasets.development_template_dataset.DevelopmentTemplateDataset
            Creating object urbansim_parcel.datasets.person_dataset.PersonDataset
            Creating object urbansim.datasets.job_dataset.JobDataset
            Creating object urbansim.datasets.building_type_dataset.BuildingTypeDataset
            Running Real Estate Price Model (from urbansim.models.real_estate_price_model): started on Mon Jun 27 18:55:41 2011
                numpy.logical_or(urbansim_parcel.parcel.building_sqft, urbansim_parcel.parcel.is_land_use_type_vacant)
                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                        urbansim_parcel.building.building_sqft...........0.2 sec
                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.4 sec
                    urbansim_parcel.parcel.is_land_use_type_SSS
                        Creating object urbansim_parcel.datasets.land_use_type_dataset.LandUseTypeDataset
                    urbansim_parcel.parcel.is_land_use_type_SSS: completed...0.1 sec
                numpy.logical_or(urbansim_parcel.parcel.building_sqft, urbansim_parcel.parcel.is_land_use_type_vacant): completed...0.6 sec
                ln_unit_price=ln(urbansim_parcel.parcel.unit_price)......0.1 sec
                Total number of individuals: 163886
                REPM chunk 1 out of 1.: started on Mon Jun 27 18:55:42 2011
                    Number of agents in this chunk: 163886
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300
                        psrc.parcel.SSS_in_gridcell
                            Creating object urbansim.datasets.gridcell_dataset.GridcellDataset
                        psrc.parcel.SSS_in_gridcell: completed...........0.2 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300: completed...0.2 sec
                    art600 = psrc.parcel.distance_to_arterial_in_gridcell<600....0.0 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)
                        psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone....0.1 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone): completed...0.2 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200: completed...0.1 sec
                    hwy2000 = psrc.parcel.distance_to_highway_in_gridcell<2000....0.0 sec
                    inugb = parcel.is_inside_urban_growth_boundary*1.....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built)
                            urbansim_parcel.building.has_valid_year_built....0.0 sec
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built): completed...0.1 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940: completed...0.1 sec
                    ln_bldgage=(ln(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean))).astype(float32)
                        urbansim_parcel.building.age_masked..............0.0 sec
                    ln_bldgage=(ln(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean))).astype(float32): completed...0.1 sec
                    ln_invfar=(ln(parcel.parcel_sqft/(urbansim_parcel.parcel.building_sqft).astype(float32))).astype(float32)....0.1 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32)
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean)
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)
                                zone_id = building.disaggregate(parcel.zone_id)....0.1 sec
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id): completed...0.3 sec
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean): completed...0.4 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32): completed...0.5 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.5 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.6 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.7 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.7 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_walk....0.0 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32): completed...0.1 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_transit_walk....0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32): completed...0.1 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_walk....0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32): completed...0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32): completed...0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32)
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_transit_walk....0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32): completed...0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            acres = zone.aggregate(parcel.parcel_sqft) / 43560.0 ....0.0 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32): completed...0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)
                        psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd
                            psrc.zone.generalized_cost_hbw_am_drive_alone_to_DDD
                                destination_id=129+0*zone.zone_id........0.0 sec
                            psrc.zone.generalized_cost_hbw_am_drive_alone_to_DDD: completed...0.0 sec
                        psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd: completed...0.1 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32): completed...0.1 sec
                    lnlotsqft=(ln(parcel.parcel_sqft)).astype(float32)...0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            population = zone.aggregate(household.persons)....0.1 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.1 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.1 sec
                    lnsqft=(ln(urbansim_parcel.parcel.building_sqft)).astype(float32)....0.0 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32)
                        residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32): completed...0.1 sec
                REPM chunk 1 out of 1.: completed........................2.9 sec
            Running Real Estate Price Model (from urbansim.models.real_estate_price_model): completed...3.7 sec
            Flushing parcel
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/parcels doesn't exist and is created
            Flushing building
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/buildings doesn't exist and is created
            Flushing household
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/households doesn't exist and is created
            Flushing job
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/jobs doesn't exist and is created
            Flushing travel_data
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/travel_data doesn't exist and is created
            Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
            flter = numpy.logical_and(parcel.number_of_agents(development_project_proposal) == 0, urbansim_parcel.parcel.vacant_land_area > 0)
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                    used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.2 sec
            flter = numpy.logical_and(parcel.number_of_agents(development_project_proposal) == 0, urbansim_parcel.parcel.vacant_land_area > 0): completed...0.2 sec
            development_template.is_active > 0...........................0.0 sec
            WARNING: template_filter is set to development_template.is_active > 0, but there is an error when computing it: Incomplete variable specification for 'development_template.is_active' (missing package name, and variable is not in expression library not a lag variable).
            Creating proposals for new development: started on Mon Jun 27 18:55:48 2011
                Creating object urbansim.datasets.development_constraint_dataset.DevelopmentConstraintDataset
                urbansim_parcel.development_template.far.................0.1 sec
                urbansim_parcel.development_template.units_per_acre......0.0 sec
                Creating object urbansim_parcel.datasets.generic_land_use_type_dataset.GenericLandUseTypeDataset
                Matching 772 development constraints to 165783 parcels: started on Mon Jun 27 18:55:48 2011....4.7 sec
                generic_land_use_type_id=development_template.disaggregate(land_use_type.generic_land_use_type_id)....0.1 sec
                Combine parcels, templates and constraints: started on Mon Jun 27 18:55:53 2011....2.5 sec
                Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
                urbansim_parcel.development_project_proposal.is_size_fit
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)....1.3 sec
                    land_area_min=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_min)....0.2 sec
                    land_area_max=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_max)....0.2 sec
                urbansim_parcel.development_project_proposal.is_size_fit: completed...1.6 sec
                urbansim_parcel.development_project_proposal.units_proposed
                    urbansim_parcel.development_project_proposal.units_proposed_fraction
                        urbansim_parcel.development_project_proposal.land_area_taken
                            land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                            land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                        urbansim_parcel.development_project_proposal.land_area_taken: completed...0.0 sec
                        density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)
                            urbansim_parcel.development_template.density_converter....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter): completed...0.0 sec
                        usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                    urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.1 sec
                urbansim_parcel.development_project_proposal.units_proposed: completed...0.1 sec
                proposal set created with 76715 proposals.
            Creating proposals for new development: completed...........10.2 sec
            Creating proposals for re-development: started on Mon Jun 27 18:55:58 2011
                low_improvement_ratio_of_parcels_with_bldg=(parcel.number_of_agents(building)>0)*(urbansim_parcel.parcel.improvement_value / ( urbansim_parcel.parcel.unit_price * urbansim_parcel.parcel.existing_units ) < 0.1)*(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean)>30)
                    urbansim_parcel.parcel.existing_units
                        unit_name = parcel.disaggregate(land_use_type.unit_name)....0.1 sec
                        building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                            urbansim_parcel.building.building_sqft.......0.1 sec
                        building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.2 sec
                        residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                    urbansim_parcel.parcel.existing_units: completed.....0.4 sec
                    improvement_value =parcel.aggregate(building.improvement_value)....0.1 sec
                    urbansim_parcel.building.age_masked
                        urbansim_parcel.building.has_valid_year_built....0.0 sec
                    urbansim_parcel.building.age_masked: completed.......0.0 sec
                low_improvement_ratio_of_parcels_with_bldg=(parcel.number_of_agents(building)>0)*(urbansim_parcel.parcel.improvement_value / ( urbansim_parcel.parcel.unit_price * urbansim_parcel.parcel.existing_units ) < 0.1)*(parcel.aggregate(urbansim_parcel.building.age_masked, function=mean)>30): completed...0.7 sec
                Matching 772 development constraints to 2821 parcels: started on Mon Jun 27 18:55:59 2011....0.1 sec
                Combine parcels, templates and constraints: started on Mon Jun 27 18:55:59 2011....0.1 sec
                Creating object urbansim_parcel.datasets.development_project_proposal_dataset.DevelopmentProjectProposalDataset
                urbansim_parcel.development_project_proposal.is_size_fit
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                            used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                    land_area_min=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_min)....0.0 sec
                    land_area_max=development_project_proposal.disaggregate(urbansim_parcel.development_template.land_sqft_max)....0.0 sec
                urbansim_parcel.development_project_proposal.is_size_fit: completed...0.1 sec
                urbansim_parcel.development_project_proposal.units_proposed
                    urbansim_parcel.development_project_proposal.units_proposed_fraction
                        urbansim_parcel.development_project_proposal.land_area_taken
                            land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                            land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                        urbansim_parcel.development_project_proposal.land_area_taken: completed...0.0 sec
                        density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                        density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                        usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                    urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.0 sec
                urbansim_parcel.development_project_proposal.units_proposed: completed...0.0 sec
                proposal set created with 11739 proposals.
            Creating proposals for re-development: completed.............1.2 sec
            Running Development Project Proposal Regression Model (from urbansim_parcel.models.development_project_proposal_regression_model): started on Mon Jun 27 18:55:59 2011
                Creating object urbansim_parcel.datasets.development_project_proposal_component_dataset.DevelopmentProjectProposalComponentDataset
                Total number of individuals: 88454
                PDPRM chunk 1 out of 1.: started on Mon Jun 27 18:56:00 2011
                    Number of agents in this chunk: 88454
                    land_use_type_id=development_project_proposal.disaggregate(development_template.land_use_type_id)....0.0 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    art300 = psrc.parcel.distance_to_arterial_in_gridcell<300: completed...0.1 sec
                    art300 = development_project_proposal.disaggregate(parcel.art300)....0.0 sec
                    art600 = psrc.parcel.distance_to_arterial_in_gridcell<600....0.0 sec
                    art600 = development_project_proposal.disaggregate(parcel.art600)....0.0 sec
                    hbwavgtmda = parcel.disaggregate(psrc.zone.trip_weighted_average_time_hbw_from_home_am_drive_alone)....0.1 sec
                    hbwavgtmda = development_project_proposal.disaggregate(parcel.hbwavgtmda)....0.0 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200
                        psrc.parcel.SSS_in_gridcell......................0.1 sec
                    hwy200 = psrc.parcel.distance_to_highway_in_gridcell<200: completed...0.1 sec
                    hwy200 = development_project_proposal.disaggregate(parcel.hwy200)....0.0 sec
                    hwy2000 = psrc.parcel.distance_to_highway_in_gridcell<2000....0.0 sec
                    hwy2000 = development_project_proposal.disaggregate(parcel.hwy2000)....0.0 sec
                    inugb = parcel.is_inside_urban_growth_boundary*1.....0.0 sec
                    inugb = development_project_proposal.disaggregate(parcel.inugb)....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940
                        numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built==0,building.year_built)....0.0 sec
                    is_pre_1940 = parcel.aggregate(numpy.ma.masked_where(urbansim_parcel.building.has_valid_year_built == 0, building.year_built),function=mean) < 1940: completed...0.1 sec
                    is_pre_1940 = development_project_proposal.disaggregate(parcel.is_pre_1940)....0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_age).astype(float32))
                        urbansim_parcel.development_project_proposal.building_age
                            urbansim_parcel.development_project_proposal.has_valid_year_built....0.0 sec
                        urbansim_parcel.development_project_proposal.building_age: completed...0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_age).astype(float32)): completed...0.0 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_sqft).astype(float32))
                        building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32)
                            building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32)
                                building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                                        urbansim_parcel.development_project_proposal.units_proposed
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                                urbansim_parcel.development_project_proposal.land_area_taken
                                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                                                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                                                            used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                                                        vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                                                    land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                                    land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                                    parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                                                urbansim_parcel.development_project_proposal.land_area_taken: completed...0.2 sec
                                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.2 sec
                                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.2 sec
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.2 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)
                                        urbansim_parcel.development_template.is_far....0.0 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far): completed...0.0 sec
                                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.3 sec
                            building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32): completed...0.3 sec
                        building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32): completed...0.4 sec
                    ln_bounded((urbansim_parcel.development_project_proposal.building_sqft).astype(float32)): completed...0.4 sec
                    ln_bounded(safe_array_divide(development_project_proposal.disaggregate(parcel.parcel_sqft), (urbansim_parcel.development_project_proposal.building_sqft).astype(float32)))....0.0 sec
                    lnavginc=(ln(parcel.disaggregate(urbansim_parcel.zone.average_income))).astype(float32)....0.0 sec
                    lnavginc = development_project_proposal.disaggregate(parcel.lnavginc)....0.0 sec
                    lnemp10da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp10da = development_project_proposal.disaggregate(parcel.lnemp10da)....0.0 sec
                    lnemp10wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_10_minutes_travel_time_hbw_am_walk))).astype(float32)....0.0 sec
                    lnemp10wa = development_project_proposal.disaggregate(parcel.lnemp10wa)....0.0 sec
                    lnemp20da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp20da = development_project_proposal.disaggregate(parcel.lnemp20da)....0.0 sec
                    lnemp20tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_transit_walk))).astype(float32)....0.0 sec
                    lnemp20tw = development_project_proposal.disaggregate(parcel.lnemp20tw)....0.0 sec
                    lnemp20wa=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_20_minutes_travel_time_hbw_am_walk))).astype(float32)....0.0 sec
                    lnemp20wa = development_project_proposal.disaggregate(parcel.lnemp20wa)....0.0 sec
                    lnemp30da=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))).astype(float32)....0.0 sec
                    lnemp30da = development_project_proposal.disaggregate(parcel.lnemp30da)....0.0 sec
                    lnemp30tw=(ln(parcel.disaggregate(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_transit_walk))).astype(float32)....0.0 sec
                    lnemp30tw = development_project_proposal.disaggregate(parcel.lnemp30tw)....0.0 sec
                    lnempden=(ln(parcel.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)....0.0 sec
                    lnempden = development_project_proposal.disaggregate(parcel.lnempden)....0.0 sec
                    lngcdacbd=(ln(parcel.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))).astype(float32)....0.0 sec
                    lngcdacbd = development_project_proposal.disaggregate(parcel.lngcdacbd)....0.0 sec
                    lnlotsqft=(ln(parcel.parcel_sqft)).astype(float32)...0.0 sec
                    lnlotsqft = development_project_proposal.disaggregate(parcel.lnlotsqft)....0.0 sec
                    lnpopden=(ln(parcel.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)....0.0 sec
                    lnpopden = development_project_proposal.disaggregate(parcel.lnpopden)....0.0 sec
                    lnunits=(ln(urbansim_parcel.parcel.residential_units)).astype(float32)....0.0 sec
                    lnunits = development_project_proposal.disaggregate(parcel.lnunits)....0.0 sec
                PDPRM chunk 1 out of 1.: completed.......................2.0 sec
            Running Development Project Proposal Regression Model (from urbansim_parcel.models.development_project_proposal_regression_model): completed...2.3 sec
            Flushing parcel
            Flushing building
            Flushing development_project_proposal_component
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/development_project_proposal_components doesn't exist and is created
            Flushing development_project_proposal
            /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/development_project_proposals doesn't exist and is created
            exp_roi = exp(urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment)
                urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment
                    total_investment = (urbansim_parcel.development_project_proposal.acquisition_cost + urbansim_parcel.development_project_proposal.demolition_cost + urbansim_parcel.development_project_proposal.construction_cost).astype(float32)
                        urbansim_parcel.development_project_proposal.acquisition_cost
                            unit_price = development_project_proposal.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                            existing_units = development_project_proposal.disaggregate(urbansim_parcel.parcel.existing_units)
                                urbansim_parcel.parcel.existing_units
                                    unit_name = parcel.disaggregate(land_use_type.unit_name)....0.1 sec
                                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                                        urbansim_parcel.building.building_sqft....0.1 sec
                                    building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.3 sec
                                    residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                                urbansim_parcel.parcel.existing_units: completed...0.5 sec
                            existing_units = development_project_proposal.disaggregate(urbansim_parcel.parcel.existing_units): completed...0.5 sec
                            improvement_value=development_project_proposal.disaggregate(urbansim_parcel.parcel.improvement_value)
                                improvement_value =parcel.aggregate(building.improvement_value)....0.1 sec
                            improvement_value=development_project_proposal.disaggregate(urbansim_parcel.parcel.improvement_value): completed...0.1 sec
                            urbansim_parcel.development_project_proposal.land_area_taken
                                vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)
                                    vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                                        used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                                    vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                                vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area): completed...0.1 sec
                                land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                            urbansim_parcel.development_project_proposal.land_area_taken: completed...0.3 sec
                            land_area=development_project_proposal.disaggregate(parcel.parcel_sqft)....0.0 sec
                        urbansim_parcel.development_project_proposal.acquisition_cost: completed...1.1 sec
                        construction_cost = development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.construction_cost)
                            construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed
                                urbansim_parcel.development_project_proposal_component.units_proposed
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                                        urbansim_parcel.development_project_proposal.units_proposed
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.0 sec
                                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.0 sec
                                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.1 sec
                                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)....0.0 sec
                                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                                    building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.2 sec
                                component_construction_cost_per_unit = (development_template_component.construction_cost_per_unit * development_template_component.building_sqft_per_unit).astype(float32)....0.0 sec
                            construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.2 sec
                        construction_cost = development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.construction_cost): completed...0.3 sec
                        demolition_cost = development_project_proposal.disaggregate(urbansim_parcel.parcel.demolition_cost) * development_project_proposal.is_redevelopment
                            demolition_cost = (parcel.aggregate(urbansim_parcel.building.demolition_cost)).astype(int32)
                                urbansim_parcel.building.demolition_cost
                                    demolition_cost_per_sqft=building.disaggregate(demolition_cost_per_sqft.demolition_cost_per_sqft)
                                        Creating object urbansim_parcel.datasets.demolition_cost_per_sqft_dataset.DemolitionCostPerSqftDataset
                                    demolition_cost_per_sqft=building.disaggregate(demolition_cost_per_sqft.demolition_cost_per_sqft): completed...0.1 sec
                                urbansim_parcel.building.demolition_cost: completed...0.1 sec
                            demolition_cost = (parcel.aggregate(urbansim_parcel.building.demolition_cost)).astype(int32): completed...0.2 sec
                        demolition_cost = development_project_proposal.disaggregate(urbansim_parcel.parcel.demolition_cost) * development_project_proposal.is_redevelopment: completed...0.2 sec
                    total_investment = (urbansim_parcel.development_project_proposal.acquisition_cost + urbansim_parcel.development_project_proposal.demolition_cost + urbansim_parcel.development_project_proposal.construction_cost).astype(float32): completed...1.6 sec
                    profit = urbansim_parcel.development_project_proposal.total_revenue - urbansim_parcel.development_project_proposal.total_investment
                        total_revenue = (urbansim_parcel.development_project_proposal.building_sqft * development_project_proposal.unit_price_expected).astype(float32)
                            building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32)
                                building_sqft = (urbansim_parcel.development_project_proposal_component.building_sqft_per_unit * urbansim_parcel.development_project_proposal_component.units_proposed).astype(int32)....0.0 sec
                            building_sqft = (development_project_proposal.aggregate(urbansim_parcel.development_project_proposal_component.building_sqft)).astype(float32): completed...0.0 sec
                        total_revenue = (urbansim_parcel.development_project_proposal.building_sqft * development_project_proposal.unit_price_expected).astype(float32): completed...0.1 sec
                    profit = urbansim_parcel.development_project_proposal.total_revenue - urbansim_parcel.development_project_proposal.total_investment: completed...0.1 sec
                urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment: completed...1.7 sec
            exp_roi = exp(urbansim_parcel.development_project_proposal.expected_rate_of_return_on_investment): completed...1.7 sec
            Running urbansim_parcel.models.development_project_proposal_sampling_model.DevelopmentProjectProposalSamplingModel: started on Mon Jun 27 18:56:04 2011
                number_of_components = (development_project_proposal.number_of_agents(development_project_proposal_component)).astype(int32)....0.0 sec
                zone_id = development_project_proposal.disaggregate(parcel.zone_id)....0.1 sec
                occupied_units_for_jobs = urbansim_parcel.building.number_of_non_home_based_jobs
                    urbansim_parcel.building.number_of_SSS_jobs
                        urbansim.job.is_building_type_SSS................0.0 sec
                    urbansim_parcel.building.number_of_SSS_jobs: completed...0.3 sec
                occupied_units_for_jobs = urbansim_parcel.building.number_of_non_home_based_jobs: completed...0.3 sec
                units_for_jobs = urbansim_parcel.building.total_non_home_based_job_space
                    urbansim_parcel.building.total_non_home_based_job_space
                        urbansim_parcel.building.building_sqft_per_job
                            Creating object urbansim_parcel.datasets.building_sqft_per_job_dataset.BuildingSqftPerJobDataset
                            zone_id = building.disaggregate(parcel.zone_id)....0.1 sec
                        urbansim_parcel.building.building_sqft_per_job: completed...0.1 sec
                    urbansim_parcel.building.total_non_home_based_job_space: completed...0.1 sec
                units_for_jobs = urbansim_parcel.building.total_non_home_based_job_space: completed...0.1 sec
                occupied_residential_units = urbansim_parcel.building.number_of_households
                    number_of_households = building.number_of_agents(household)....0.2 sec
                occupied_residential_units = urbansim_parcel.building.number_of_households: completed...0.2 sec
                is_residential = (building.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                Creating object urbansim_parcel.datasets.target_vacancy_dataset.TargetVacancyDataset
                is_residential = target_vacancy.disaggregate(building_type.is_residential)....0.0 sec
                Sampling from 72002 eligible proposals with status 4.
                WARNING: Running out of proposals; there aren't any proposals with non-zero weight
                Status of 1189 development proposals set to active.
                Target/existing vacancy rates (reached using eligible proposals) by building type:
                3[commercial]: 0.721966952144 = ((existing_units:387426 + 
                                              units_proposed:0 - units_to_be_demolished:472) 
                                              - units_occupied:107586) / units_stock:386954
                4[condo_residential]: 0.0615399114127 = ((existing_units:30707 + 
                                              units_proposed:1128 - units_to_be_demolished:2) 
                                              - units_occupied:29874) / units_stock:31833
                8[industrial]: 0.865833407614 = ((existing_units:303162 + 
                                              units_proposed:0 - units_to_be_demolished:255) 
                                              - units_occupied:40640) / units_stock:302907
                12[multi_family_residential]: 0.0500151797719 = ((existing_units:112419 + 
                                              units_proposed:2908 - units_to_be_demolished:42) 
                                              - units_occupied:109519) / units_stock:115285
                13[office]: 0.615333681973 = ((existing_units:474520 + 
                                              units_proposed:0 - units_to_be_demolished:296) 
                                              - units_occupied:182418) / units_stock:474224
                19[single_family_residential]: 0.0 = ((existing_units:136364 + 
                                              units_proposed:20 - units_to_be_demolished:48) 
                                              - units_occupied:136363) / units_stock:136336
                20[tcu]: 0.741091860085 = ((existing_units:3059 + 
                                              units_proposed:0 - units_to_be_demolished:0) 
                                              - units_occupied:792) / units_stock:3059
                21[warehousing]: 0.874148536227 = ((existing_units:430109 + 
                                              units_proposed:0 - units_to_be_demolished:261) 
                                              - units_occupied:54097) / units_stock:429848
            Running urbansim_parcel.models.development_project_proposal_sampling_model.DevelopmentProjectProposalSamplingModel: completed...5.1 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing development_project_proposal_component
            Flushing development_project_proposal
            Running BuildingConstructionModel (from urbansim_parcel.models.building_construction_model): started on Mon Jun 27 18:56:09 2011
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: started on Mon Jun 27 18:56:09 2011
                    92 values of household.building_id are set to -1.
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: completed...0.2 sec
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: started on Mon Jun 27 18:56:09 2011
                    809 values of job.building_id are set to -1.
                Running opus_core.join_attribute_modification_model.JoinAttributeModificationModel: completed...0.2 sec
                67 buildings demolished.
                Creating object urbansim_parcel.datasets.velocity_function_dataset.VelocityFunctionDataset
                Creating object urbansim_parcel.datasets.development_project_proposal_component_dataset.DevelopmentProjectProposalComponentDataset
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area
                    used_land_area = (parcel.aggregate(building.land_area, function=sum)).astype(int32)....0.1 sec
                vacant_land_area = parcel.parcel_sqft - urbansim_parcel.parcel.used_land_area: completed...0.1 sec
                residential_units = (parcel.aggregate(building.residential_units)).astype(int32)....0.1 sec
                building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32)
                    urbansim_parcel.building.building_sqft...............0.0 sec
                building_sqft = (parcel.aggregate(urbansim_parcel.building.building_sqft)).astype(int32): completed...0.1 sec
                urbansim_parcel.parcel.is_land_use_type_SSS..............0.0 sec
                development_project_proposal_component.disaggregate(development_template.land_use_type_id, [development_project_proposal])
                    development_project_proposal.disaggregate(development_template.land_use_type_id)....0.0 sec
                development_project_proposal_component.disaggregate(development_template.land_use_type_id, [development_project_proposal]): completed...0.0 sec
                urbansim_parcel.development_project_proposal_component.units_proposed
                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed)
                        urbansim_parcel.development_project_proposal.units_proposed
                            urbansim_parcel.development_project_proposal.units_proposed_fraction
                                urbansim_parcel.development_project_proposal.land_area_taken
                                    vacant_land_area=development_project_proposal.disaggregate(urbansim_parcel.parcel.vacant_land_area)....0.0 sec
                                    land_sqft_min = development_project_proposal.disaggregate(development_template.land_sqft_min)....0.0 sec
                                    land_sqft_max = development_project_proposal.disaggregate(development_template.land_sqft_max)....0.0 sec
                                    parcel_sqft = development_project_proposal.disaggregate(urbansim_parcel.parcel.parcel_sqft)....0.0 sec
                                urbansim_parcel.development_project_proposal.land_area_taken: completed...0.2 sec
                                density = development_project_proposal.disaggregate(urbansim_parcel.development_template.density)....0.0 sec
                                density_convertor = development_project_proposal.disaggregate(urbansim_parcel.development_template.density_converter)....0.0 sec
                                usable_ratio = (1- development_project_proposal.disaggregate(development_template.percent_land_overhead) / 100.0).astype(float32)....0.0 sec
                            urbansim_parcel.development_project_proposal.units_proposed_fraction: completed...0.2 sec
                        urbansim_parcel.development_project_proposal.units_proposed: completed...0.2 sec
                    _units_proposed_in_proposal = development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.units_proposed): completed...0.2 sec
                    _is_far_unit = development_project_proposal_component.disaggregate(urbansim_parcel.development_template.is_far)....0.0 sec
                    percent_building_sqft = development_project_proposal_component.disaggregate(development_template_component.percent_building_sqft)....0.0 sec
                    building_sqft_per_unit = development_project_proposal_component.disaggregate(development_template_component.building_sqft_per_unit)....0.0 sec
                    is_residential = (development_project_proposal_component.disaggregate(building_type.is_residential)).astype('bool')....0.0 sec
                urbansim_parcel.development_project_proposal_component.units_proposed: completed...0.2 sec
                land_area_taken = urbansim_parcel.development_project_proposal_component.percent_building_sqft * (development_project_proposal_component.disaggregate(urbansim_parcel.development_project_proposal.land_area_taken) / 100.)....0.0 sec
                construction_cost = development_project_proposal_component.disaggregate(urbansim_parcel.development_template_component.component_construction_cost_per_unit) * urbansim_parcel.development_project_proposal_component.units_proposed....0.0 sec
                1189 new buildings built.
                building type 12: 908
                building type 19: 1
                building type 4: 280
                Number of new buildings by template ids:
                {91: 109, 86: 70, 92: 77, 87: 164, 89: 32, 16: 1, 88: 135, 90: 36, 85: 96, 150: 82, 55: 170, 56: 22, 57: 7, 58: 7, 59: 15, 60: 9, 61: 25, 62: 25, 149: 107}
            Running BuildingConstructionModel (from urbansim_parcel.models.building_construction_model): completed...1.8 sec
            Flushing parcel
            Flushing building
            Flushing development_project_proposal
            Creating object urbansim.datasets.household_characteristic_dataset.HouseholdCharacteristicDataset
            Running Household Transition Model with Persons Update (from urbansim_parcel.models.household_transition_model): started on Mon Jun 27 18:56:11 2011
                Difference in number of households: 4533 (original 276286, new 280819, created 4718, deleted 185)
                Number of unplaced households: 4807
                Created 3060 persons.
                WARNING: Number of persons in household set (688813) does not correspond to those in person set (542953).
            Running Household Transition Model with Persons Update (from urbansim_parcel.models.household_transition_model): completed...3.3 sec
            Flushing household
            Running Employment Transition Model (from urbansim.models.employment_transition_model): started on Mon Jun 27 18:56:14 2011
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                    urbansim.job.is_home_based_job.......................0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim.job.is_in_employment_sector_DDD_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based
                    urbansim.job.is_non_home_based_job...................0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based: completed...0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                urbansim.job.is_in_employment_sector_DDD_non_home_based..0.0 sec
                Difference in number of jobs: 13688 (original 565214, new 578902, created 13705, deleted 17)
                Number of unplaced jobs: 19964
            Running Employment Transition Model (from urbansim.models.employment_transition_model): completed...2.0 sec
            Flushing job
            Creating object urbansim.datasets.household_relocation_rate_dataset.HouseholdRelocationRateDataset
            Running Household Relocation Model (from urbansim.models.agent_relocation_model): started on Mon Jun 27 18:56:16 2011
                compute_probabilities ...
                WARNING: There are 122 households whose probability is un-specified by the rate dataset. Their probability is set to 0.
                compute_choices ...
                Number of movers: 79517
            Running Household Relocation Model (from urbansim.models.agent_relocation_model): completed...0.9 sec
            Flushing household
            zone_id = building.disaggregate(parcel.zone_id)..............0.2 sec
            Running Household Location Choice Model (from psrc_parcel.models.household_location_choice_model): started on Mon Jun 27 18:56:17 2011
                Total number of individuals: 79517
                HLCM chunk 1 out of 2.: started on Mon Jun 27 18:56:17 2011
                    Number of agents in this chunk: 39759
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.2 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.2 sec
                    Available capacity: 48303 units.
                    numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(numpy.logical_and(building.residential_units, building.sqft_per_unit), urbansim_parcel.building.unit_price > 0))
                        unit_price = building.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                        is_residential = (building.disaggregate(building_type.is_residential)).astype('bool')....0.1 sec
                    numpy.logical_and(urbansim_parcel.building.is_residential, numpy.logical_and(numpy.logical_and(building.residential_units, building.sqft_per_unit), urbansim_parcel.building.unit_price > 0)): completed...0.2 sec
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.1 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential
                        is_condo_residential=building.disaggregate(building_type.building_type_name=='condo_residential')
                            building_type.building_type_name=='condo_residential'....0.0 sec
                        is_condo_residential=building.disaggregate(building_type.building_type_name=='condo_residential'): completed...0.0 sec
                        urbansim.household.is_low_income.................0.1 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential: completed...0.1 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential
                        is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential')
                            building_type.building_type_name=='multi_family_residential'....0.0 sec
                        is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential'): completed...0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential: completed...0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)
                        is_single_family_residential=building.disaggregate(building_type.building_type_name == 'single_family_residential')
                            building_type.building_type_name=='single_family_residential'....0.0 sec
                        is_single_family_residential=building.disaggregate(building_type.building_type_name == 'single_family_residential'): completed...0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential): completed...0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)
                        urbansim_parcel.building.building_sqft...........0.1 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft): completed...0.3 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.3 sec
                    ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit)
                        parcel_sqft_per_unit=safe_array_divide(building.disaggregate(parcel.parcel_sqft),building.residential_units)....0.2 sec
                    ln_parcel_sf_per_unit = ln(urbansim_parcel.building.parcel_sqft_per_unit): completed...0.2 sec
                    lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32)
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.5 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.6 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.6 sec
                    lnempden=(ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))).astype(float32): completed...0.6 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.3 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.3 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)
                            urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone....0.1 sec
                        ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone): completed...0.1 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.3 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 2303 (in 6 iterations)
                HLCM chunk 1 out of 2.: completed.......................17.1 sec
                HLCM chunk 2 out of 2.: started on Mon Jun 27 18:56:35 2011
                    Number of agents in this chunk: 39758
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.1 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.1 sec
                    Available capacity: 48187 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.1 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.2 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.3 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.3 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.1 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 3844 (in 6 iterations)
                HLCM chunk 2 out of 2.: completed.......................15.6 sec
                number_of_households = building.number_of_agents(household)....0.2 sec
                Total number of individuals: 6147
                HLCM chunk 1 out of 1.: started on Mon Jun 27 18:56:50 2011
                    Number of agents in this chunk: 6147
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.2 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.2 sec
                    Available capacity: 12273 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.0 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.0 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.0 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.2 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.3 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.0 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 82 (in 6 iterations)
                HLCM chunk 1 out of 1.: completed........................1.7 sec
                number_of_households = building.number_of_agents(household)....0.1 sec
                Total number of individuals: 82
                HLCM chunk 1 out of 1.: started on Mon Jun 27 18:56:52 2011
                    Number of agents in this chunk: 82
                    urbansim_parcel.building.vacant_residential_units
                        number_of_households = building.number_of_agents(household)....0.2 sec
                    urbansim_parcel.building.vacant_residential_units: completed...0.2 sec
                    Available capacity: 6208 units.
                    has_vacant_units=urbansim_parcel.building.vacant_residential_units>0....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    gcdacbd_1person= (household.persons==1) * building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd)....0.0 sec
                    is_low_income_x_is_condo_residential = urbansim.household.is_low_income * urbansim.building.is_condo_residential....0.0 sec
                    is_low_income_x_is_multi_family_residential = urbansim.household.is_low_income * urbansim.building.is_multi_family_residential....0.0 sec
                    less_than_2_persons_x_is_not_single_family_residential = (household.persons < 2) * numpy.logical_not(urbansim.building.is_single_family_residential)....0.0 sec
                    ln_income_less_price_per_unit = ln_bounded(household.income - (urbansim_parcel.building.unit_price/10.)*urbansim_parcel.building.building_sqft)....0.0 sec
                    ln_income_x_ln_avg_value_per_unit = ln(household.income) * ln(urbansim_parcel.building.unit_price)....0.0 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32)
                        urbansim_parcel.zone.population_per_acre
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.3 sec
                            population = zone.aggregate(household.persons)....0.0 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.3 sec
                    lnpopden=(ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))).astype(float32): completed...0.3 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                        _normalized_weights_vacant_residential_units = urbansim_parcel.building.vacant_residential_units/float(sum(urbansim_parcel.building.vacant_residential_units))....0.1 sec
                        _log_weights_vacant_residential_units = ln(building._normalized_weights_vacant_residential_units)....0.0 sec
                        _log_1_minus_weights_vacant_residential_units = ln(1 - building._normalized_weights_vacant_residential_units)....0.0 sec
                    urbansim_parcel.household_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    workers_ln_emp_30min_hbw_drive_alone =  household.workers * building.disaggregate(ln_bounded(urbansim_parcel.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))....0.0 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 0 (in 2 iterations)
                HLCM chunk 1 out of 1.: completed........................1.3 sec
                number_of_households = building.number_of_agents(household)....0.1 sec
            Running Household Location Choice Model (from psrc_parcel.models.household_location_choice_model): completed...36.4 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing travel_data
            Creating object urbansim.datasets.job_relocation_rate_dataset.JobRelocationRateDataset
            Running Employment Relocation Model (from urbansim.models.agent_relocation_model): started on Mon Jun 27 18:56:54 2011
                compute_probabilities ...
                compute_choices ...
                Number of movers: 53433
            Running Employment Relocation Model (from urbansim.models.agent_relocation_model): completed...0.9 sec
            Flushing job
            'agents_grouping_attribute' set to job.building_type.
            zone_id = building.disaggregate(parcel.zone_id)..............0.2 sec
            Running Non_home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): started on Mon Jun 27 18:56:55 2011
                Total number of individuals: 52518
                Non_home_based ELCM chunk 1 out of 2.: started on Mon Jun 27 18:56:55 2011
                    Number of agents in this chunk: 26259
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.6 sec
                            urbansim_parcel.job.sqft_imputed: completed...1.0 sec
                            urbansim_parcel.building.building_sqft.......0.1 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...1.3 sec
                        urbansim_parcel.building.building_sqft_per_job...0.0 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...1.4 sec
                    Available capacity: 1437050 units.
                    building.non_residential_sqft>0......................0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.2 sec
                    far=(urbansim_parcel.building.building_sqft/urbansim_parcel.building.parcel_sqft).astype(float32)
                        parcel_sqft = building.disaggregate(parcel.parcel_sqft)....0.1 sec
                    far=(urbansim_parcel.building.building_sqft/urbansim_parcel.building.parcel_sqft).astype(float32): completed...0.1 sec
                    inugb = building.disaggregate(parcel.is_inside_urban_growth_boundary)*1....0.1 sec
                    is_commercial_building = urbansim.building.is_commercial
                        is_commercial=building.disaggregate(building_type.building_type_name =='commercial')
                            building_type.building_type_name=='commercial'....0.0 sec
                        is_commercial=building.disaggregate(building_type.building_type_name =='commercial'): completed...0.0 sec
                    is_commercial_building = urbansim.building.is_commercial: completed...0.0 sec
                    is_industrial_building = urbansim.building.is_industrial
                        is_industrial=building.disaggregate(building_type.building_type_name =='industrial')
                            building_type.building_type_name=='industrial'....0.0 sec
                        is_industrial=building.disaggregate(building_type.building_type_name =='industrial'): completed...0.0 sec
                    is_industrial_building = urbansim.building.is_industrial: completed...0.0 sec
                    is_near_art = building.disaggregate(psrc.parcel.is_near_arterial_in_gridcell)
                        psrc.parcel.SSS_in_gridcell
                            urbansim.gridcell.is_near_arterial...........0.0 sec
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    is_near_art = building.disaggregate(psrc.parcel.is_near_arterial_in_gridcell): completed...0.2 sec
                    is_near_highway = building.disaggregate(psrc.parcel.is_near_highway_in_gridcell)
                        psrc.parcel.SSS_in_gridcell
                            urbansim.gridcell.is_near_highway............0.0 sec
                        psrc.parcel.SSS_in_gridcell: completed...........0.1 sec
                    is_near_highway = building.disaggregate(psrc.parcel.is_near_highway_in_gridcell): completed...0.2 sec
                    is_office_building = urbansim.building.is_office
                        is_office=building.disaggregate(building_type.building_type_name =='office')
                            building_type.building_type_name=='office'...0.0 sec
                        is_office=building.disaggregate(building_type.building_type_name =='office'): completed...0.0 sec
                    is_office_building = urbansim.building.is_office: completed...0.0 sec
                    ln_bldgage=ln(urbansim_parcel.building.age_masked)
                        urbansim_parcel.building.age_masked
                            urbansim_parcel.building.has_valid_year_built....0.0 sec
                        urbansim_parcel.building.age_masked: completed...0.1 sec
                    ln_bldgage=ln(urbansim_parcel.building.age_masked): completed...0.1 sec
                    ln_unit_price_trunc = ln(where(building.disaggregate(urbansim_parcel.parcel.unit_price<1500),where(building.disaggregate(urbansim_parcel.parcel.unit_price<1),1,building.disaggregate(urbansim_parcel.parcel.unit_price)),1500))
                        urbansim_parcel.parcel.unit_price<1500...........0.0 sec
                        urbansim_parcel.parcel.unit_price<1..............0.0 sec
                    ln_unit_price_trunc = ln(where(building.disaggregate(urbansim_parcel.parcel.unit_price<1500),where(building.disaggregate(urbansim_parcel.parcel.unit_price<1),1,building.disaggregate(urbansim_parcel.parcel.unit_price)),1500)): completed...0.3 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD
                            urbansim_parcel.job.is_sector_DDD............0.0 sec
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD: completed...0.0 sec
                        zone.aggregate(parcel.parcel_sqft)/43560.0.......0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income))
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean)
                            zone_id = household.disaggregate(urbansim_parcel.building.zone_id)....0.2 sec
                        average_income = zone.aggregate(urbansim_parcel.household.income, function=mean): completed...0.3 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income)): completed...0.3 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.2 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.2 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    lngcdacbd=ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))....0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))
                        urbansim_parcel.zone.population_per_acre
                            population = zone.aggregate(household.persons)....0.1 sec
                        urbansim_parcel.zone.population_per_acre: completed...0.1 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre)): completed...0.1 sec
                    lnsqft=ln(urbansim_parcel.building.building_sqft)....0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 2.: completed.........9.9 sec
                Non_home_based ELCM chunk 2 out of 2.: started on Mon Jun 27 18:57:05 2011
                    Number of agents in this chunk: 26259
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.4 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.8 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...1.0 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...1.0 sec
                    Available capacity: 1428309 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.2 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 2 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 2 out of 2.: completed.........8.3 sec
                urbansim_parcel.building.number_of_SSS_jobs
                    urbansim.job.is_building_type_SSS....................0.0 sec
                urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                urbansim_parcel.building.total_non_home_based_job_space..0.0 sec
                Total number of individuals: 8329
                Non_home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:57:14 2011
                    Number of agents in this chunk: 8329
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.4 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.8 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...1.0 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...1.0 sec
                    Available capacity: 1406185 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.1 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 1.: completed.........3.4 sec
                urbansim_parcel.building.number_of_SSS_jobs..............0.2 sec
                Total number of individuals: 8264
                Non_home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:57:17 2011
                    Number of agents in this chunk: 8264
                    urbansim_parcel.building.vacant_non_home_based_job_space
                        urbansim_parcel.building.occupied_building_sqft_by_jobs
                            urbansim_parcel.job.sqft_imputed
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.4 sec
                                bldgs_building_type_id = job.disaggregate(building.building_type_id)....0.4 sec
                            urbansim_parcel.job.sqft_imputed: completed...0.8 sec
                        urbansim_parcel.building.occupied_building_sqft_by_jobs: completed...1.0 sec
                    urbansim_parcel.building.vacant_non_home_based_job_space: completed...1.0 sec
                    Available capacity: 1406120 units.
                    Create specified coefficients ...
                    Compute variables ...
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_non_home_based_job_space = urbansim_parcel.building.vacant_non_home_based_job_space/float(sum(urbansim_parcel.building.vacant_non_home_based_job_space))....0.1 sec
                            _log_weights_vacant_non_home_based_job_space = ln(building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_non_home_based_job_space = ln(1 - building._normalized_weights_vacant_non_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.2 sec
                    bias_nhb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_non_home_based_job_space: completed...0.2 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0))
                        urbansim_parcel.zone.number_of_jobs_of_sector_DDD....0.0 sec
                    ln_zone_empden_3=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_of_sector_3)/building.disaggregate(zone.aggregate(parcel.parcel_sqft)/43560.0)): completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone))
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone
                            number_of_jobs = zone.number_of_agents(job)..0.1 sec
                        urbansim_parcel.zone.employment_within_DDD_minutes_travel_time_hbw_am_drive_alone: completed...0.1 sec
                    lnemp30da=ln(building.disaggregate(psrc.zone.employment_within_30_minutes_travel_time_hbw_am_drive_alone)): completed...0.1 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre.....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.0 sec
                    Choice set size: 60
                    Simulate ...
                    Number of unplaced agents: 0 (in 1 iterations)
                Non_home_based ELCM chunk 1 out of 1.: completed.........3.2 sec
                urbansim_parcel.building.number_of_SSS_jobs..............0.2 sec
            Running Non_home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): completed...25.7 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Flushing travel_data
            'agents_grouping_attribute' set to job.building_type.
            zone_id = building.disaggregate(parcel.zone_id)..............0.2 sec
            Running Home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): started on Mon Jun 27 18:57:21 2011
                Total number of individuals: 915
                Home_based ELCM chunk 1 out of 1.: started on Mon Jun 27 18:57:21 2011
                    Number of agents in this chunk: 915
                    urbansim_parcel.building.vacant_home_based_job_space
                        urbansim_parcel.building.total_home_based_job_space
                            sum_minimum_persons_and_2=building.aggregate(urbansim_parcel.household.minimum_persons_and_2)
                                urbansim_parcel.household.minimum_persons_and_2....0.0 sec
                            sum_minimum_persons_and_2=building.aggregate(urbansim_parcel.household.minimum_persons_and_2): completed...0.3 sec
                            is_multi_family_residential=building.disaggregate(building_type.building_type_name =='multi_family_residential')....0.0 sec
                        urbansim_parcel.building.total_home_based_job_space: completed...0.3 sec
                        urbansim_parcel.building.number_of_SSS_jobs
                            urbansim.job.is_building_type_SSS............0.0 sec
                        urbansim_parcel.building.number_of_SSS_jobs: completed...0.2 sec
                        WARNING: Negative values detected in function/method ''
                        WARNING: Minimum: -158.0. Negative values clipped to zero.
                    urbansim_parcel.building.vacant_home_based_job_space: completed...0.5 sec
                    Available capacity: 404323.0 units.
                    numpy.logical_and(building.residential_units, building.sqft_per_unit)....0.0 sec
                    Create specified coefficients ...
                    Compute variables ...
                    bias_hb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_home_based_job_space
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS
                            _normalized_weights_vacant_home_based_job_space = urbansim_parcel.building.vacant_home_based_job_space/float(sum(urbansim_parcel.building.vacant_home_based_job_space))....0.1 sec
                            _log_weights_vacant_home_based_job_space = ln(building._normalized_weights_vacant_home_based_job_space)....0.0 sec
                            _log_1_minus_weights_vacant_home_based_job_space = ln(1 - building._normalized_weights_vacant_home_based_job_space)....0.0 sec
                        urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_SSS: completed...0.1 sec
                    bias_hb = urbansim_parcel.job_x_building.ln_sampling_probability_for_bias_correction_mnl_vacant_home_based_job_space: completed...0.1 sec
                    lnavginc=ln(building.disaggregate(urbansim_parcel.zone.average_income))....0.0 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre))
                        urbansim_parcel.zone.number_of_jobs_per_acre
                            number_of_jobs = zone.number_of_agents(job)
                                zone_id = job.disaggregate(urbansim_parcel.building.zone_id)....0.5 sec
                            number_of_jobs = zone.number_of_agents(job): completed...0.7 sec
                        urbansim_parcel.zone.number_of_jobs_per_acre: completed...0.7 sec
                    lnempden=ln(building.disaggregate(urbansim_parcel.zone.number_of_jobs_per_acre)): completed...0.7 sec
                    lngcdacbd=ln(building.disaggregate(psrc.zone.generalized_cost_hbw_am_drive_alone_to_cbd))....0.0 sec
                    lnpopden=ln(building.disaggregate(urbansim_parcel.zone.population_per_acre))....0.0 sec
                    lnsqftunit=ln(urbansim_parcel.building.building_sqft_per_unit)
                        building_sqft_per_unit=safe_array_divide(urbansim_parcel.building.building_sqft,building.residential_units)
                            urbansim_parcel.building.building_sqft.......0.1 sec
                        building_sqft_per_unit=safe_array_divide(urbansim_parcel.building.building_sqft,building.residential_units): completed...0.1 sec
                    lnsqftunit=ln(urbansim_parcel.building.building_sqft_per_unit): completed...0.1 sec
                    unit_price = building.disaggregate(urbansim_parcel.parcel.unit_price)....0.1 sec
                    Choice set size: 30
                    Simulate ...
                    Number of unplaced agents: 0 (in 2 iterations)
                Home_based ELCM chunk 1 out of 1.: completed.............1.9 sec
            Running Home_based Employment Location Choice Model (from psrc_parcel.models.employment_location_choice_model): completed...2.0 sec
            Flushing parcel
            Flushing building
            Flushing household
            Flushing job
            Running Distribute Unplaced Jobs Model (from urbansim_parcel.models.distribute_unplaced_jobs_model): started on Mon Jun 27 18:57:24 2011
                urbansim.job.is_in_employment_sector_group_SSS...........3.8 sec
                Number of scalable jobs: 931
                urbansim_parcel.building.number_of_jobs_of_sector_DDD
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim_parcel.building.number_of_jobs_of_sector_DDD: completed...0.2 sec
                urbansim_parcel.building.number_of_jobs_of_sector_DDD
                    urbansim.job.is_in_employment_sector_DDD.............0.0 sec
                urbansim_parcel.building.number_of_jobs_of_sector_DDD: completed...0.2 sec
                is_governmental = building.disaggregate(building_type.generic_building_type_description == 'government')
                    building_type.generic_building_type_description=='government'....0.0 sec
                is_governmental = building.disaggregate(building_type.generic_building_type_description == 'government'): completed...0.1 sec
            Running Distribute Unplaced Jobs Model (from urbansim_parcel.models.distribute_unplaced_jobs_model): completed...4.4 sec
            Flushing building
            Flushing job
            Writing datasets to cache for year 2006: started on Mon Jun 27 18:57:28 2011
                Flushing travel_data
                Flushing development_project_proposal
                Flushing household
                Flushing development_template
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/development_templates doesn't exist and is created
                Flushing job_building_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/job_building_types doesn't exist and is created
                Flushing zone
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/zones doesn't exist and is created
                Flushing demolition_cost_per_sqft
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/demolition_cost_per_sqft doesn't exist and is created
                Flushing employment_sector_group
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/employment_adhoc_sector_groups doesn't exist and is created
                Flushing generic_land_use_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/generic_land_use_types doesn't exist and is created
                Flushing land_use_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/land_use_types doesn't exist and is created
                Flushing employment_sector
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/employment_sectors doesn't exist and is created
                Flushing dataset
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/employment_adhoc_sector_group_definitions doesn't exist and is created
                Flushing parcel
                Flushing gridcell
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/gridcells doesn't exist and is created
                Flushing target_vacancy
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/target_vacancies doesn't exist and is created
                Flushing urbansim_constant
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/urbansim_constants doesn't exist and is created
                Flushing job
                Flushing building
                Flushing development_constraint
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/development_constraints doesn't exist and is created
                Flushing development_template_component
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/development_template_components doesn't exist and is created
                Flushing person
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/persons doesn't exist and is created
                Flushing building_type
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/building_types doesn't exist and is created
                Flushing building_sqft_per_job
                /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/2006/building_sqft_per_job doesn't exist and is created
            Writing datasets to cache for year 2006: completed...........3.3 sec
        Simulate year 2006: completed............................1 min, 50.5 sec
        Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/year_2006_log.txt
    Starting simulation for year 2006: completed.................1 min, 50.5 sec
Start simulation run: completed..................................1 min, 50.5 sec
Closing log file: /home/christian/Documents/vibe2/src/3dparty/opus/src/data/seattle_parcel/runs/run_98.2011_06_27_18_47/run_multiprocess.log
Running UrbanSim for year 2006 in new process: completed.........1 min, 50.8 sec
Done running simulation for years 2001 thru 2006
